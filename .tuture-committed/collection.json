{
  "name": "Taro 多端小程序开发大型实战",
  "description": "正当移动互联网进入白热化阶段时，以微信小程序为代表的一类“轻应用”异军突起。它们无需下载，使用方便，“用完即走”，同时功能也较为完备，一经推出即得到了各大平台和及用户的热烈追捧。但是问题也随之而来——开发者们要同时维护 Web 端、移动端、微信小程序、支付宝小程序等等多套用户界面，其维护成本可以想象。作为一个优秀的多端统一开发解决方案，Taro 的出现则改变了这一情况。正值 Taro 2.x 进入 beta 阶段，让我们沏上一杯茶，开始我们的 Taro 多端小程序开发之旅吧。",
  "id": "34a473b9e9e5e3dafcc619ab152750af",
  "created": "2019-12-25T10:16:40.222Z",
  "github": "https://github.com/tuture-dev/ultra-club",
  "topics": [
    "Taro"
  ],
  "categories": [
    "小程序",
    "Taro",
    "入门"
  ],
  "articles": [
    {
      "name": "Taro 小程序开发大型实战（一）：熟悉的 React，熟悉的 Hooks",
      "description": "正当移动互联网进入白热化阶段时，以微信小程序为代表的一类“轻应用”异军突起。它们无需下载，使用方便，“用完即走”，同时功能也较为完备，一经推出即得到了各大平台和及用户的热烈追捧。但是问题也随之而来——开发者们要同时维护 Web 端、移动端、微信小程序、支付宝小程序等等多套用户界面，其维护成本可以想象。作为一个优秀的多端统一开发解决方案，Taro 的出现则改变了这一情况。正值 Taro 2.x 进入 beta 阶段，让我们沏上一杯茶，开始我们的 Taro 多端小程序开发之旅吧。",
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-1.jpg",
      "id": "34a473b9e9e5e3dafcc619ab152750af",
      "created": "2019-12-26T10:16:40.222Z",
      "topics": [
        "Taro"
      ],
      "categories": [
        "小程序",
        "Taro",
        "入门"
      ]
    },
    {
      "name": "Taro 小程序开发大型实战（二）：多页面跳转和 Taro UI 组件库",
      "description": "在上一篇教程中，我们用熟悉的 React 和 Hooks 搞定了“奥特曼俱乐部”的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。",
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-2.jpg",
      "topics": [
        "Taro",
        "Taro UI"
      ],
      "id": "af6922503ad1941b09b324ffa35f33ea",
      "created": "2019-12-29T10:16:40.222Z",
      "categories": [
        "小程序",
        "Taro",
        "入门"
      ]
    },
    {
      "name": "Taro 小程序开发大型实战（三）：实现微信和支付宝多端登录",
      "description": "能够借助所在平台实现“一键登录”是小程序的一大优势，大大降低了用户的使用门槛，但是各平台处理登录和鉴权的方式又存在较大的差异。在这一篇文章中，我们将带你踩过“多端登录”的“坑”，让用户能够在不同的平台轻松登录我们的应用。",
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-3.jpg",
      "id": "5e10118be51d454165777203",
      "categories": [
        "小程序",
        "Taro",
        "进阶"
      ],
      "created": "2020-01-06T10:16:40.222Z",
      "topics": [
        "Hooks",
        "Redux",
        "Redux-Sagas"
      ]
    },
    {
      "name": "Taro 小程序开发大型实战（四）：使用 Hooks 版的 Redux 实现应用状态管理",
      "description": "随着状态增多，状态提升的操作也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销。在这篇长文中，我们将用 Hooks 版的 Redux 来解决状态管理的难题，而让 Taro 专注于渲染用户界面。",
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-4.jpg",
      "id": "5e100f78e51d4541493621cd",
      "topics": [
        "Taro",
        "Redux"
      ],
      "categories": [
        "小程序",
        "Taro",
        "进阶"
      ],
      "created": "2020-01-15T10:16:40.222Z"
    },
    {
      "name": "Taro 小程序开发大型实战（五）：尝鲜微信小程序云",
      "description": "为了将数据持久化存储和高效的查询，我们需要把数据存储到数据库中，为了实现⼩程序端便捷的开发体验，⼀大批⼩程序 Serverless 服务兴起，⽽而微信小程序云正是为了微信小程序的快速开发⽽生的。在这篇文章中，我们将使用微信小程序云作为我们的后端，并讲解如何引⼊和实现 Redux 异步⼯作流来 实现⼩程序端访问小程序云的状态管理。",
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-7.jpg",
      "id": "b32362b",
      "created": "2020-01-17T10:16:40.222Z",
      "topics": [
        "微信小程序云",
        "小程序云开发",
        "Serverless"
      ],
      "categories": [
        "小程序",
        "Taro",
        "进阶"
      ]
    },
    {
      "name": "Taro 小程序开发大型实战（六）：LeanCloud，一统江湖",
      "description": "在上两篇文章中，我们讲解了使用微信小程序云作为我们的小程序后台，然后我们跑通了我们的注册登录、创建帖子、获取帖子列表、获取帖子详情的全栈流程，如果只想了解微信小程序的全栈开发流程的话，之前的文章已经足够了，如果还想了解跨端开发全栈开发流程的话（当然用 Taro 的同学估计也比较期待跨端的全栈开发流程，手动滑稽）接下来这篇文章就是你的菜了😆",
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-8.jpg",
      "id": "abfd872",
      "created": "2020-02-19T10:16:40.222Z",
      "topics": [
        "LeanCloud",
        "Serverless"
      ],
      "categories": [
        "小程序",
        "Taro",
        "进阶"
      ]
    },
    {
      "id": "2b5a9f18",
      "created": "2020-05-17T01:37:06.464Z",
      "name": "Taro 小程序开发大型实战（七）：使用 Authing 打造完整且强大的用户系统",
      "topics": [
        "Taro",
        "用户系统",
        "鉴权",
        "认证",
        "OAuth",
        "微信登录",
        "QQ登录",
        "Github登录"
      ],
      "categories": [
        "小程序",
        "Taro",
        "进阶"
      ],
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-9.jpg",
      "description": "为了让我们的博客看起来更加专业，我们打算给它也加上整上一个专业的用户系统，有了最为核心的用户系统在，我们博客之后的扩展都可以游刃有余，但是据统计，一个应用要想打造一个比较专业的用户系统，至少需要花费几个月时间，还需要花大量的精力去维护打造出来的用户系统，所在在做了一番调研之后，我们将目标放在了一个叫做 Authing 的通用云身份平台，它提供的服务就是帮应用快速集成一个高效、安全的用户系统，而我们这篇教程将会讲解如何借助 Authing 来给我们的之前的小程序博客武装一个专业的用户系统。"
    },
    {
      "id": "2b5a9f18",
      "created": "2020-05-17T01:37:06.464Z",
      "name": "Taro 小程序开发大型实战（七）：使用 Authing 打造完整且强大的用户系统",
      "topics": [
        "Taro",
        "用户系统",
        "鉴权",
        "认证",
        "OAuth",
        "微信登录",
        "QQ登录",
        "Github登录"
      ],
      "categories": [
        "小程序",
        "Taro",
        "进阶"
      ],
      "cover": "https://static.tuture.co/c/34a473b/taro-cover-9.jpg",
      "description": "为了让我们的博客看起来更加专业，我们打算给它也加上整上一个专业的用户系统，有了最为核心的用户系统在，我们博客之后的扩展都可以游刃有余，但是据统计，一个应用要想打造一个比较专业的用户系统，至少需要花费几个月时间，还需要花大量的精力去维护打造出来的用户系统，所在在做了一番调研之后，我们将目标放在了一个叫做 Authing 的通用云身份平台，它提供的服务就是帮应用快速集成一个高效、安全的用户系统，而我们这篇教程将会讲解如何借助 Authing 来给我们的之前的小程序博客武装一个专业的用户系统。"
    }
  ],
  "steps": [
    {
      "commit": "8565035",
      "id": "MwobbUmU",
      "articleId": "34a473b9e9e5e3dafcc619ab152750af",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "8565035",
          "id": "f0xMyj2_j",
          "fixed": true,
          "children": [
            {
              "text": "起步"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对于国内 React 开发者来说，"
                },
                {
                  "link": true,
                  "url": "https://taro.jd.com/",
                  "text": "Taro"
                },
                {
                  "text": " 的出现无疑是福音——它能够让我们用熟悉的 React 代码去搭建各类小程序，并且一份代码可以编译成多个平台的应用（目前包括微信小程序、支付宝小程序、React Native、H5 等等）。随着 Taro 的不断进化，它对 React 代码的支持程度越来越好，所支持的目标平台也越来越多，学习的价值自然不必多言。正值 Taro 进入 2.0.0 版本的 beta 阶段，我们在这一篇教程将手把手带你实现一个能够部署到多端的小程序，让你感受 Taro 的强大与魅力！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一系列教程中，我们将构建一个多端小程序应用——奥特曼俱乐部（Ultraman Club，简称 UltraClub），一个支持多端登录（微信和支付宝）的类似贴吧的小程序。我们还提供了项目仓库的 "
                },
                {
                  "link": true,
                  "url": "https://github.com/tuture-dev/ultra-club",
                  "text": "GitHub 地址"
                },
                {
                  "text": "。"
                },
                {
                  "italic": true,
                  "text": "项目目前还在开发阶段，您可以跳转到任意一次 commit 查看当前步骤的所有代码哦。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "我们将构建什么？"
                }
              ],
              "id": "0uo-rG3lE"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在完成这篇教程后，项目的 GIF 动图展示如下："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f74a316242b176.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "具体有三个页面："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "主页"
                    },
                    {
                      "text": "：展示了所有帖子，以及添加新帖子的按钮。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "帖子详情"
                    },
                    {
                      "text": "：展示单个帖子的全部内容。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "个人主页"
                    },
                    {
                      "text": "：展示用户的个人信息。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "oaiJBC_8N"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在阅读这篇教程之前，我们希望你已经具备以下知识："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "了解 HTML、CSS、JavaScript 的基础知识，如果了解 Sass 就更好了"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "了解 React 框架的基础知识，可以参考"
                    },
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/18/07acf61/",
                      "text": "这篇教程"
                    },
                    {
                      "text": "进行学习；如果接触过 React Native 以及 Hooks 则更好了"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "了解并已经安装好 Node 与 npm，可以参考"
                    },
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/03/892fa12/",
                      "text": "这篇教程"
                    },
                    {
                      "text": "进行学习"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "italic": true,
                  "text": "除此之外，你还需要下载并安装微信开发者工具，这里是"
                },
                {
                  "italic": true,
                  "link": true,
                  "url": "https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html",
                  "text": "下载地址"
                },
                {
                  "italic": true,
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "用 Taro 脚手架初始化项目"
                }
              ],
              "id": "u1IM_l6WW"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先安装 Taro CLI："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install -g @tarojs/cli"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "然后创建我们的项目："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "taro init ultra-club"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "之后会出现一系列选项，按照下图所示进行选择即可（CSS 预处理器选择 "
                },
                {
                  "link": true,
                  "url": "https://www.sass.hk/",
                  "text": "Sass"
                },
                {
                  "text": "，模板选择“默认模板”，老司机可自行选择使用 TS）："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f41480945fd18e.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本项目使用 "
                    },
                    {
                      "link": true,
                      "url": "https://www.sass.hk/",
                      "text": "Sass"
                    },
                    {
                      "text": " 主要是为了兼容 taro-ui 的样式，并没有使用到 Sass 的高级特性，如果你不熟悉的话也不用担心哦，就当成是常规的 CSS 代码。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进入到我们的项目目录 ultra-club 之后，可以看到项目模板包括以下文件："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "text",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "├── config                    # 项目配置"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "│   ├── dev.js                # 开发环境配置文件"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "│   ├── index.js              # 主配置文件"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "│   └── prod.js               # 生产环境配置文件"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "├── package.json"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "├── project.config.json       # 微信小程序项目配置"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "└── src                       # 项目源码目录"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ├── app.scss              # 根组件样式"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ├── app.jsx               # 根组件 app"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    ├── index.html            # 等待被嵌入代码的 HTML 文档"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    └── pages                 # 页面目录"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        └── index             # index 页面模块"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "            ├── index.scss    # index 页面样式"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "            └── index.jsx     # index 页面组件"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们主要看一下两个代码文件："
                },
                {
                  "code": true,
                  "text": "src/app.jsx"
                },
                {
                  "text": " 以及 "
                },
                {
                  "code": true,
                  "text": "src/pages/index/index.jsx"
                },
                {
                  "text": "。"
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".editorconfig",
          "id": "hL4waG3ir",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".editorconfig",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".eslintrc",
          "id": "SNLyF90I5",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".eslintrc",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": ".gitignore",
          "id": "UuG9fpqt9",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".gitignore",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "file",
          "file": ".prettierrc",
          "id": "_bh3nkAhN",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": ".prettierrc",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/dev.js",
          "display": false,
          "id": "RWwBmm3Qc",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/dev.js",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/index.js",
          "display": false,
          "id": "SPo2NmhR2",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/index.js",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/prod.js",
          "display": false,
          "id": "SEKRGti6g",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/prod.js",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "ZYvCl_a5L",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "project.config.json",
          "display": false,
          "id": "WanT4Ir1t",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "project.config.json",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/app.jsx",
          "display": true,
          "commit": "8565035",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "初探脚手架代码"
                    }
                  ],
                  "id": "jCJJv-FOO"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "src/app.jsx"
                    },
                    {
                      "text": " 定义了项目的根组件 "
                    },
                    {
                      "code": true,
                      "text": "App"
                    },
                    {
                      "text": "，它的代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.jsx",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你熟悉 React 的话，那么上面这段代码一定不难理解，只不过是把相应的地方（导包、渲染）从之前的 "
                    },
                    {
                      "code": true,
                      "text": "React"
                    },
                    {
                      "text": " 以及 "
                    },
                    {
                      "code": true,
                      "text": "ReactDOM"
                    },
                    {
                      "text": " 改成 "
                    },
                    {
                      "code": true,
                      "text": "Taro"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "可以看到这个组件还多了一个 "
                        },
                        {
                          "code": true,
                          "text": "config"
                        },
                        {
                          "text": " 属性，这个属性是小程序应用专属的。其中要重点关注的是 "
                        },
                        {
                          "code": true,
                          "text": "pages"
                        },
                        {
                          "text": " 数组，列出了所有的页面模块，例如这里的 "
                        },
                        {
                          "code": true,
                          "text": "pages/index/index"
                        },
                        {
                          "text": " 就对应 src/pages/index/index.jsx。后面在实现路由时还会用到 "
                        },
                        {
                          "code": true,
                          "text": "pages"
                        },
                        {
                          "text": " 属性。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/app.scss",
          "display": false,
          "id": "iEHeKymcU1",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.scss",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/index.html",
          "display": false,
          "id": "amZmJ4mh05",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/index.html",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "8565035",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们再看看 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.jsx"
                    },
                    {
                      "text": "。按照最佳实践，Taro 项目中一般把页面组件放到 "
                    },
                    {
                      "code": true,
                      "text": "src/pages"
                    },
                    {
                      "text": " 目录中，"
                    },
                    {
                      "code": true,
                      "text": "src/pages/index"
                    },
                    {
                      "text": " 就是 "
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": " 页面组件模块，其中 index.jsx 的代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "依旧是熟悉的 React 组件风格，只不过与普通的 React 相比，在 "
                    },
                    {
                      "code": true,
                      "text": "render"
                    },
                    {
                      "text": " 函数中我们用的不再是 "
                    },
                    {
                      "code": true,
                      "text": "div"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "p"
                    },
                    {
                      "text": " 标签，而是 Taro 为我们准备好的 "
                    },
                    {
                      "code": true,
                      "text": "View"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "Text"
                    },
                    {
                      "text": " 组件。为什么 Taro 要自己搞一套组件库呢？因为 Taro 的目标是星辰大海……sorry，是能够编译到各个平台。"
                    },
                    {
                      "bold": true,
                      "text": "只有通过制订 Taro 自己的组件库，才能在各个平台的原生组件库上盖了一层抽象层，进而实现跨平台的目标"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "如果你有过 React Native 的开发经验，那么一定对 Taro 组件库不陌生。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/index/index.scss",
          "display": false,
          "id": "RPNGZWrwrR",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.scss",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "id": "6sjB3pO3dq",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "8565035",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "运行小程序"
                }
              ],
              "id": "cWvb99FVI8"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Taro 提供的模板代码直接可以运行。打开终端，运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm run dev:weapp"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "会出现以下提示信息："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f41486ac1dfe12.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "当看到“监听文件修改中…”的提示后，我们就可以打开微信开发者工具，用微信扫码登录后界面如下："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f41488786a1384.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "点击那个硕大的➕号，开始导入我们刚才创建的 ultra-club 项目："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f4148a6d6f65d1.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如上图所示，首先切换到”导入项目“一栏，然后点击”目录“输入栏右侧的按钮选择刚才创建的 ultra-club 文件夹，最后点击右下角的”导入“按钮即可。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "导入成功后，微信开发者工具的界面如下图所示："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f4148c89d43665.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在模拟器页面中，看到了我们 "
                },
                {
                  "code": true,
                  "text": "index"
                },
                {
                  "text": " 页面渲染的 Hello world；编辑器能够查看所有代码，不过通常我们用自己习惯的代码编辑器来开发（VSCode 真香！）；调试器则是类似 Chrome 的开发者工具。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一切就绪，让我们开始动工吧！"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "从这一步开始，我们的主要开发目标将是微信小程序，但是不要担心，我们会在文章的最后演示怎么编译到其他平台哦。"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "102299e",
      "id": "9o3XNMES6-",
      "articleId": "34a473b9e9e5e3dafcc619ab152750af",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "102299e",
          "id": "YwFMoAQ3fy",
          "fixed": true,
          "children": [
            {
              "text": "React 代码，熟悉的味道"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "从这一步开始，我们就来实现”奥特曼俱乐部“小程序。按照 React 中”万物皆组件“的思想，我们抽象出两个组件："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": "：用于展示一篇帖子，包括标题 "
                    },
                    {
                      "code": true,
                      "text": "title"
                    },
                    {
                      "text": " 和内容 "
                    },
                    {
                      "code": true,
                      "text": "content"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": "：用于发布新帖子的表单"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostForm/index.jsx",
          "display": true,
          "commit": "102299e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现 PostForm 组件"
                    }
                  ],
                  "id": "lT02Aio7M9"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们实现用于创建新帖子的 PostForm 组件。在 "
                    },
                    {
                      "code": true,
                      "text": "src/components"
                    },
                    {
                      "text": " 中创建 "
                    },
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 目录，并在其中添加 "
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": " 文件。"
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostForm/index.jsx",
              "commit": "102299e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 组件一共定义了五个 props，分别如下："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "formTitle"
                        },
                        {
                          "text": "：当前编辑中帖子的标题"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "formContent"
                        },
                        {
                          "text": "：当前编辑中帖子的内容"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": "：处理提交表单的回调函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "handleTitleInput"
                        },
                        {
                          "text": "：处理标题接收到用户输入时的回调函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "handleContentInput"
                        },
                        {
                          "text": "：处理内容接收到用户输入时的回调函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "如果你不熟悉 React，可能会对上面编写表单的方式有点困惑。实际上，React 推荐用”受控组件“的方式编写表单，可参考"
                        },
                        {
                          "link": true,
                          "url": "https://zh-hans.reactjs.org/docs/forms.html",
                          "text": "这篇文档"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.scss",
          "display": true,
          "commit": "102299e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "PostCard 组件的样式 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.scss",
              "commit": "102299e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostForm/index.scss",
          "display": true,
          "commit": "102299e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "PostForm 的样式文件 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": " 的代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostForm/index.scss",
              "commit": "102299e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/index.jsx",
          "display": true,
          "commit": "102299e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了方便在页面组件中使用 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 组件，我们把 "
                    },
                    {
                      "code": true,
                      "text": "src/components"
                    },
                    {
                      "text": " 变成一个模块。具体地，创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/index.jsx"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/index.jsx",
              "commit": "102299e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.jsx",
          "display": true,
          "commit": "102299e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现 PostCard 组件"
                    }
                  ],
                  "id": "15v_u7knIW"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components"
                    },
                    {
                      "text": " 目录，我们的通用组件都会放在这里面。然后创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostCard"
                    },
                    {
                      "text": " 组件目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.jsx",
              "commit": "102299e",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "正如之前所说，"
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 组件包含两个 props：标题 "
                    },
                    {
                      "code": true,
                      "text": "title"
                    },
                    {
                      "text": " 和内容 "
                    },
                    {
                      "code": true,
                      "text": "content"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "102299e",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在 index 页面中接入 PostCard 和 PostForm"
                    }
                  ],
                  "id": "OYQRHjc8SL"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后在 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.jsx"
                    },
                    {
                      "text": " 文件中加入之前写好的 PostCard 和 PostForm 组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "102299e",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，除了接入之前定义的两个组件外，我们还加入了一些状态："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "posts"
                        },
                        {
                          "text": "：当前所有的帖子，每个帖子是一个包含 "
                        },
                        {
                          "code": true,
                          "text": "title"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "content"
                        },
                        {
                          "text": " 的对象"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "formTitle"
                        },
                        {
                          "text": "：当前正在编辑的帖子的标题"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "formContent"
                        },
                        {
                          "text": "：当前正在编辑的帖子的内容"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "以及定义了 "
                    },
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 组件中所需要的三个回调函数。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "查看效果"
                }
              ],
              "id": "XY2gj3g3bF"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果之前的开发服务器还打开着，那么微信开发者工具应该就能直接看到效果了（如果刚才关了，可以运行 "
                },
                {
                  "code": true,
                  "text": "npm run dev:weapp"
                },
                {
                  "text": " 再次打开哦）："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f74a316242b176.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "warning",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有时候 Taro 可能会出现样式加载失败的问题。如果你遇到了，可以关闭开发服务器，重新运行 "
                    },
                    {
                      "code": true,
                      "text": "npm run dev:weapp"
                    },
                    {
                      "text": "。"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "da834d1",
      "id": "hs9ojxLhzY",
      "articleId": "34a473b9e9e5e3dafcc619ab152750af",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "da834d1",
          "id": "HmSXJIi6sr",
          "fixed": true,
          "children": [
            {
              "text": "Hooks 轻装上阵"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "自从 React 团队在 2018 年的 React Conf 引入了 Hooks 之后，前端圈无疑是经历了一场地震。仅仅只需几个 API，就轻松地用"
                },
                {
                  "bold": true,
                  "text": "纯函数"
                },
                {
                  "text": "的方式搞定了组件的状态管理和数据流，这是何等的神仙操作？"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "幸运的是，Taro 团队也在 v1.3.0 版本中添加了"
                },
                {
                  "link": true,
                  "url": "http://taro-docs.jd.com/taro/docs/hooks.html",
                  "text": "对 Hooks 的支持"
                },
                {
                  "text": "。因此，我们也将在本项目中用 Hooks 解决状态管理和数据流的问题。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Hooks 之 useState 快速复习"
                }
              ],
              "id": "Ren7OcLAo2"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "本文在这里简单地过一遍 "
                },
                {
                  "code": true,
                  "text": "useState"
                },
                {
                  "text": " Hook，如果你已经很熟悉了，请直接移步下面的动手环节。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "比如我们之前有这么一个类组件 "
                },
                {
                  "code": true,
                  "text": "ClickMe"
                },
                {
                  "text": "，它会抱怨你点了它多少次："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "class ClickMe extends Component {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  state = { count: 0 }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  render() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        <button onClick={() => this.setState({ count: this.state.count + 1 })}>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "          你点了我 {this.state.count} 次！"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "        </button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "用 Hooks 改写之后，就变成了一个函数式组件："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// 记得导入 useState 函数"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "import Taro, { useState } from '@tarojs/taro'"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "function ClickMe() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  const [count, setCount] = useState(0)"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      <button onClick={() => setCount(count + 1)}>你点了我 {count} 次！</button>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </div>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，"
                },
                {
                  "code": true,
                  "text": "useState"
                },
                {
                  "text": " 函数返回了两个值："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "状态"
                    },
                    {
                      "text": "（也就是上面的 "
                    },
                    {
                      "code": true,
                      "text": "count"
                    },
                    {
                      "text": "）：可以在渲染时直接使用"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "bold": true,
                      "text": "修改状态的函数"
                    },
                    {
                      "text": "（也就是上面的 "
                    },
                    {
                      "code": true,
                      "text": "setCount"
                    },
                    {
                      "text": "）：用于在处理相应事件时，通过传入新的状态来更新状态"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "还注意到 "
                },
                {
                  "code": true,
                  "text": "useState"
                },
                {
                  "text": " 接受一个参数，即"
                },
                {
                  "bold": true,
                  "text": "状态的初始值"
                },
                {
                  "text": "。这里我们取了一个 "
                },
                {
                  "code": true,
                  "text": "Number"
                },
                {
                  "text": " 类型，事实上还可以是字符串、数组、对象等等。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "da834d1",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "动手环节"
                    }
                  ],
                  "id": "-V0Gmpdfaz"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "到了动手环节，我们用 "
                    },
                    {
                      "code": true,
                      "text": "useState"
                    },
                    {
                      "text": " 来重构我们的 index 页面。具体地，我们将整个 "
                    },
                    {
                      "code": true,
                      "text": "Index"
                    },
                    {
                      "text": " 组件转换成函数式组件，然后之前的三个状态都用 "
                    },
                    {
                      "code": true,
                      "text": "useState"
                    },
                    {
                      "text": " 来创建，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "da834d1",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "由于我们把 "
                        },
                        {
                          "code": true,
                          "text": "Index"
                        },
                        {
                          "text": " 从类组件改造成了函数组件，所以挂载 "
                        },
                        {
                          "code": true,
                          "text": "config"
                        },
                        {
                          "text": " 要在 "
                        },
                        {
                          "code": true,
                          "text": "Index"
                        },
                        {
                          "text": " 组件定义之后直接挂载在 "
                        },
                        {
                          "code": true,
                          "text": "Index"
                        },
                        {
                          "text": " 上面。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "你尽可以打开模拟器试一下重构之后效果，看看功能是否与上一步完全一致哦！在接下来的"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2019/12/25/af69225/",
                  "text": "第二篇"
                },
                {
                  "text": "中，我们将进一步实现多页面跳转，并用 Taro UI 组件库升级我们的界面。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "f6c79ab",
      "id": "ppmarFbGsB",
      "articleId": "af6922503ad1941b09b324ffa35f33ea",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "f6c79ab",
          "id": "QYQq0D78Ny",
          "fixed": true,
          "children": [
            {
              "text": "来一打页面"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2019/12/25/34a473b/",
                  "text": "上一篇教程"
                },
                {
                  "text": "中，我们用熟悉的 React 和 Hooks 搞定了“奥特曼俱乐部”的雏形。在这一篇文章中，我们将用 Taro 自带的路由功能实现多页面跳转，并用 Taro UI 组件库升级之前略显简陋的界面。这一篇完成后的 DEMO 如下："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f74b4eb57a242e.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你想直接从这一篇开始动手实践，那么请运行以下命令快速开始："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b second-part https://github.com/tuture-dev/ultra-club.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd ultra-club"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "现在让我们开始实现项目的其他页面吧，包括："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "帖子详情 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": "：进入单篇帖子的详情页面"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "我的 "
                    },
                    {
                      "code": true,
                      "text": "mine"
                    },
                    {
                      "text": "：显示当前用户的个人信息（在后面的步骤中将实现登录注册哦）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "其中，帖子详情页面中将复用前面编写的 "
                },
                {
                  "code": true,
                  "text": "PostCard"
                },
                {
                  "text": " 组件。为了方便管理，我们需要引入一个新的 prop（"
                },
                {
                  "code": true,
                  "text": "isList"
                },
                {
                  "text": "），用于判断此组件是显示在首页列表中，还是在帖子详情页面中。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "项目中所需用到的图片可以从"
                    },
                    {
                      "link": true,
                      "url": "https://github.com/tuture-dev/ultra-club/releases/download/v0.0.1/images.zip",
                      "text": "这个链接"
                    },
                    {
                      "text": "下载，下载后解压并将所有图片放到 "
                    },
                    {
                      "code": true,
                      "text": "src/images"
                    },
                    {
                      "text": " 目录下。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "Taro 的路由功能"
                }
              ],
              "id": "-XkNiwJRRE"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "路由功能是实现多页面应用的核心，幸运的是 Taro 已经自带了。具体而言，在 Taro 中实现页面跳转只需两个步骤："
                }
              ]
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在入口文件（"
                    },
                    {
                      "code": true,
                      "text": "src/app.jsx"
                    },
                    {
                      "text": "）中在 "
                    },
                    {
                      "code": true,
                      "text": "App"
                    },
                    {
                      "text": " 组件的 "
                    },
                    {
                      "code": true,
                      "text": "config"
                    },
                    {
                      "text": " 中配置之前提到的 "
                    },
                    {
                      "code": true,
                      "text": "pages"
                    },
                    {
                      "text": " 属性"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在任意组件中通过 "
                    },
                    {
                      "code": true,
                      "text": "Taro.navigateTo"
                    },
                    {
                      "text": " 或 "
                    },
                    {
                      "code": true,
                      "text": "Taro.redirectTo"
                    },
                    {
                      "text": " 即可实现页面的跳转或重定向"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "感觉不够直观？OK，我们直接撸起袖子写起来。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/app.jsx",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "配置全部页面"
                    }
                  ],
                  "id": "Cnd-JMok4P"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先在入口文件 "
                    },
                    {
                      "code": true,
                      "text": "src/app.jsx"
                    },
                    {
                      "text": " 中配置好所有页面："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.jsx",
              "commit": "f6c79ab",
              "hiddenLines": [
                [
                  0,
                  9
                ],
                [
                  40,
                  46
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们还在 "
                    },
                    {
                      "code": true,
                      "text": "config"
                    },
                    {
                      "text": " 中注册了导航栏 "
                    },
                    {
                      "code": true,
                      "text": "tabBar"
                    },
                    {
                      "text": "，用来在底部切换 "
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": " 页面和 "
                    },
                    {
                      "code": true,
                      "text": "mine"
                    },
                    {
                      "text": " 页面。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.jsx",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在 PostCard 中添加跳转逻辑"
                    }
                  ],
                  "id": "6RFDRAFoNc"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先在 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 组件中添加跳转逻辑，使得它被点击后将进入该帖子的详情页面。将 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostCard/index.jsx"
                    },
                    {
                      "text": " 按如下代码进行修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.jsx",
              "commit": "f6c79ab",
              "hiddenLines": [
                [
                  0,
                  2
                ],
                [
                  22,
                  23
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 中注册了 "
                    },
                    {
                      "code": true,
                      "text": "handleClick"
                    },
                    {
                      "text": " 用于响应点击事件。在 "
                    },
                    {
                      "code": true,
                      "text": "handleClick"
                    },
                    {
                      "text": " 函数中，我们通过新引入的 "
                    },
                    {
                      "code": true,
                      "text": "isList"
                    },
                    {
                      "text": " 属性判断这个组件是否展示在首页列表中。如果是的话，就通过 "
                    },
                    {
                      "code": true,
                      "text": "Taro.navigateTo"
                    },
                    {
                      "text": " 进行跳转。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "眼尖的你一定发现了我们在调用 "
                        },
                        {
                          "code": true,
                          "text": "navigateTo"
                        },
                        {
                          "text": " 时还加上了"
                        },
                        {
                          "bold": true,
                          "text": "查询字符串"
                        },
                        {
                          "text": "用于传递参数。在接下来实现帖子详情页面时，我们就可以接收到传递进来的 "
                        },
                        {
                          "code": true,
                          "text": "title"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "content"
                        },
                        {
                          "text": " 的值啦。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们需要在首页模块中给 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 组件加上 "
                    },
                    {
                      "code": true,
                      "text": "isList"
                    },
                    {
                      "text": "。修改 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.jsx"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "f6c79ab",
              "hiddenLines": [
                [
                  0,
                  23
                ],
                [
                  37,
                  48
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/post/post.jsx",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现“帖子详情”页面"
                    }
                  ],
                  "id": "fokYJBaFLS"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "src/pages"
                    },
                    {
                      "text": " 中创建 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 目录，然后在其中创建 post.jsx 和 post.scss，分别为页面模块和样式文件。post.jsx 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/post/post.jsx",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们用了 "
                    },
                    {
                      "code": true,
                      "text": "useRouter"
                    },
                    {
                      "text": " 这个 Hook（Taro 专有），它用来在函数组件中获取 "
                    },
                    {
                      "code": true,
                      "text": "router"
                    },
                    {
                      "text": "，等同于之前类组件中的 "
                    },
                    {
                      "code": true,
                      "text": "this.$router"
                    },
                    {
                      "text": "。有了 "
                    },
                    {
                      "code": true,
                      "text": "router"
                    },
                    {
                      "text": "，我们就可以获取到在刚才 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 组件跳转时传进来的 "
                    },
                    {
                      "code": true,
                      "text": "title"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "content"
                    },
                    {
                      "text": " 参数了。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/post/post.scss",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "post.scss 的代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/post/post.scss",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/mine/mine.jsx",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实现“我的”页面"
                    }
                  ],
                  "id": "bPS-vjRTwh"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们实现“我的”页面。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/mine"
                    },
                    {
                      "text": " 目录，在其中创建 mine.jsx 和 mine.scss。页面组件 mine.jsx 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.jsx",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/mine/mine.scss",
          "display": true,
          "commit": "f6c79ab",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "样式文件 mine.scss 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.scss",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/images/avatar.png",
          "id": "UK0BdKmq3t",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/images/avatar.png",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/images/home.png",
          "id": "A0ZBGKmKpn",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/images/home.png",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/images/homeSelected.png",
          "id": "Dif8SAfXHM",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/images/homeSelected.png",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/images/mine.png",
          "id": "sMZ_ZI3h3C",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/images/mine.png",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/images/mineSelected.png",
          "id": "jslp90C6Kx",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/images/mineSelected.png",
              "commit": "f6c79ab",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "查看效果"
                }
              ],
              "id": "-LnAzaIeCY"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "又到了激动人心的验收环节。我们应该能看到下面所示的效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f74b4eb57a242e.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "63131b6",
      "id": "DcieypQjK5",
      "articleId": "af6922503ad1941b09b324ffa35f33ea",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "63131b6",
          "id": "Om8zKkUVsy",
          "fixed": true,
          "children": [
            {
              "text": "加速开发，Taro UI 帮帮忙"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在编写用户界面时，如果每次都要自己编写组件逻辑、调整组件样式，对于学习来说是完全可以的，但是对于实际开发任务就显得很麻烦了。在 React 社区，我们有诸如 "
                },
                {
                  "link": true,
                  "url": "https://github.com/ant-design/ant-design",
                  "text": "Ant Design"
                },
                {
                  "text": " 这样的组件库，能够让我们快速搭建一套专业美观的界面。而 Taro 也提供了 "
                },
                {
                  "link": true,
                  "url": "https://taro-ui.jd.com/#/",
                  "text": "Taro UI"
                },
                {
                  "text": " 组件库，为我们提供了能够适应多端的成熟组件。在这一步中，我们将用 Taro UI 升级界面，让它看上去更像一个成熟的小程序。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "不过与之前不同，我们将先贴出完成这一步后的 demo 展示："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f517cdcebe5f20.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到我们做了三点改进："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过点击一个"
                    },
                    {
                      "link": true,
                      "url": "https://taro-ui.jd.com/#/docs/fab",
                      "text": "浮动按钮（Fab）"
                    },
                    {
                      "text": "来触发创建新文章的"
                    },
                    {
                      "link": true,
                      "url": "https://taro-ui.jd.com/#/docs/floatlayout",
                      "text": "浮动弹层（FloatLayout）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "发布成功后，会显示一条温馨的"
                    },
                    {
                      "link": true,
                      "url": "https://taro-ui.jd.com/#/docs/message",
                      "text": "消息提示（Message）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "帖子详情页面中 PostCard 组件去掉了边框，让它看上去更像正文展示"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "配置 Taro UI"
                }
              ],
              "id": "MoB_eekPFo"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先安装 Taro UI 的 npm 包："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "npm install taro-ui"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了后续能在 H5 中使用 taro-ui，我们需要在 "
                },
                {
                  "code": true,
                  "text": "config/index.js"
                },
                {
                  "text": " 中添加如下配置："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "javascript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "h5: {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  esnextModules: ['taro-ui']"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/index.js",
          "display": false,
          "id": "QtSsUARxIB",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/index.js",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  0,
                  3
                ],
                [
                  67,
                  68
                ],
                [
                  103,
                  104
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "PytMqys77G",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  0,
                  39
                ],
                [
                  52,
                  72
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostForm/index.jsx",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "升级 PostForm"
                    }
                  ],
                  "id": "TJUyS5VwAW"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先让我们升级 "
                    },
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 组件。我们先尝鲜 Taro UI 的 "
                    },
                    {
                      "code": true,
                      "text": "AtButton"
                    },
                    {
                      "text": " 组件，替换掉之前 Taro 自带的 "
                    },
                    {
                      "code": true,
                      "text": "Taro"
                    },
                    {
                      "text": " 组件："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostForm/index.jsx",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  13,
                  23
                ],
                [
                  35,
                  36
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注意到我们还把之前 "
                    },
                    {
                      "code": true,
                      "text": "<View>添加新的帖子</View>"
                    },
                    {
                      "text": " 去掉了，因为接下来我们会把表单放在浮动弹层 FloatLayout 里面，所以就不需要这行提示啦。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "你也许会好奇为啥 Taro UI 的组件都以 "
                        },
                        {
                          "code": true,
                          "text": "At"
                        },
                        {
                          "text": " 开头？一个是为了与普通的 Taro 组件区分，另一个则是因为开发 Taro 团队正是 "
                        },
                        {
                          "link": true,
                          "url": "https://aotu.io/",
                          "text": "Aotu.io 凹凸实验室"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostForm/index.scss",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "调整 "
                    },
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 组件的样式，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostForm/index.scss",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  7,
                  7
                ],
                [
                  24,
                  25
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "正如之前所说，我们打算把创建新帖子的表单放在浮动弹层 FloatLayout 中。在首页模块 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.jsx"
                    },
                    {
                      "text": " 中导入相关组件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  7,
                  12
                ],
                [
                  20,
                  21
                ],
                [
                  39,
                  40
                ],
                [
                  72,
                  75
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们来逐一分析新添加的代码："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先从 "
                        },
                        {
                          "code": true,
                          "text": "taro-ui"
                        },
                        {
                          "text": " 导入所需的 "
                        },
                        {
                          "code": true,
                          "text": "AtFab"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "AtFloatLayout"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "AtMessage"
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "使用 "
                        },
                        {
                          "code": true,
                          "text": "useState"
                        },
                        {
                          "text": " Hook 创建新的状态 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": "（用于记录浮动弹层是否打开）和用于修改状态的 "
                        },
                        {
                          "code": true,
                          "text": "setIsOpened"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 中，用 "
                        },
                        {
                          "code": true,
                          "text": "setIsOpened(false)"
                        },
                        {
                          "text": " 关闭浮动弹层，并用 "
                        },
                        {
                          "code": true,
                          "text": "Taro.atMessage"
                        },
                        {
                          "text": " 弹出提示消息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "return"
                        },
                        {
                          "text": " JSX 代码时，添加 "
                        },
                        {
                          "code": true,
                          "text": "<AtMessage />"
                        },
                        {
                          "text": " 组件，并在之前的 "
                        },
                        {
                          "code": true,
                          "text": "PostForm"
                        },
                        {
                          "text": " 组件外层包裹 "
                        },
                        {
                          "code": true,
                          "text": "AtFloatLayout"
                        },
                        {
                          "text": " 组件，最后添加浮动按钮 "
                        },
                        {
                          "code": true,
                          "text": "AtFab"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.scss",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在首页样式文件 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.scss"
                    },
                    {
                      "text": " 中添加样式如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.scss",
              "commit": "63131b6",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.jsx",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "升级 PostCard"
                    }
                  ],
                  "id": "TSecH0Oc9q"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们来调整 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 在不同页面的样式。"
                    },
                    {
                      "link": true,
                      "url": "https://www.npmjs.com/package/classnames",
                      "text": "classnames"
                    },
                    {
                      "text": " 是最常用的 CSS 类组合库，可以让你用 JavaScript 表达式灵活地进行 CSS 类的组合。例如我们有三个 CSS 类 "
                    },
                    {
                      "code": true,
                      "text": "foo"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "bar"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "foo-bar"
                    },
                    {
                      "text": "，可以通过 "
                    },
                    {
                      "code": true,
                      "text": "classNames"
                    },
                    {
                      "text": " 函数进行条件式组合："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "javascript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import classNames from 'classnames`;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "classNames('foo', 'bar'); // => 'foo bar'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "classNames('foo', { bar: true }); // => 'foo bar'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "classNames({ 'foo-bar': true }); // => 'foo-bar'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "classNames({ 'foo-bar': false }); // => ''"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "classNames({ foo: true }, { bar: true }); // => 'foo bar'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "classNames({ foo: true, bar: true }); // => 'foo bar'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们也新增加一个 CSS 类 "
                    },
                    {
                      "code": true,
                      "text": "postcard__isList"
                    },
                    {
                      "text": "，用于表示在帖子列表中的样式。修改 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostCard/index.jsx"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.jsx",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  6,
                  14
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.scss",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "修改 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 组件的样式，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.scss",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  9,
                  17
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/custom-theme.scss",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "定制主题颜色"
                    }
                  ],
                  "id": "m_GuENno7P"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Taro UI 支持一定程度的"
                    },
                    {
                      "link": true,
                      "url": "https://taro-ui.jd.com/#/docs/customizetheme",
                      "text": "主题定制"
                    },
                    {
                      "text": "，这里我们采用最简单却也十分有效的 "
                    },
                    {
                      "bold": true,
                      "text": "SCSS 变量覆盖"
                    },
                    {
                      "text": "。我们创建 "
                    },
                    {
                      "code": true,
                      "text": "src/custom-theme.scss"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/custom-theme.scss",
              "commit": "63131b6",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们定义了三个 SCSS 变量 "
                    },
                    {
                      "code": true,
                      "text": "$color-brand"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "$color-brand-light"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "$color-brand-dark"
                    },
                    {
                      "text": "，覆盖了 Taro UI 的默认主题色。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "欲查看所有可以覆盖的 SCSS 变量，请参考 Taro UI 的"
                        },
                        {
                          "link": true,
                          "url": "https://github.com/NervJS/taro-ui/blob/dev/src/style/variables/default.scss",
                          "text": "默认样式文件"
                        },
                        {
                          "text": "。如果不熟悉 SCSS 变量，这份"
                        },
                        {
                          "link": true,
                          "url": "https://www.sass.hk/guide/",
                          "text": "指南"
                        },
                        {
                          "text": "是不错的资料。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/app.scss",
          "display": true,
          "commit": "63131b6",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "紧接着我们需要在项目的全局样式文件 "
                    },
                    {
                      "code": true,
                      "text": "src/app.scss"
                    },
                    {
                      "text": " 中导入自定义颜色主题文件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.scss",
              "commit": "63131b6",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，除了导入了刚刚创建的 "
                    },
                    {
                      "code": true,
                      "text": "custom-theme.scss"
                    },
                    {
                      "text": "，我们还"
                    },
                    {
                      "bold": true,
                      "text": "按需引入"
                    },
                    {
                      "text": "了 Taro UI 中所用到组件的样式，这样可以有效减少打包后应用体积的大小哦。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "id": "ys3Rjvex6d",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "63131b6",
              "hiddenLines": [
                [
                  0,
                  1268
                ],
                [
                  1277,
                  2859
                ],
                [
                  2871,
                  3354
                ],
                [
                  3363,
                  3917
                ],
                [
                  3929,
                  10090
                ],
                [
                  10109,
                  11148
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "完成这一步的代码后，记得在模拟器里面看看运行起来是不是跟开头的 GIF demo 效果完全一致哦！"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，《Taro 多端小程序开发大型实战》第二篇也就结束啦。欢迎继续阅读"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2019/12/25/5e10118/",
                  "text": "第三篇"
                },
                {
                  "text": "，我们将手把手带大家用实现如何在 Taro 框架下实现多端登录（微信小程序 + 支付宝小程序 + 普通登录）。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "step",
      "commit": "1da2fee",
      "id": "hBiIMS5-wY",
      "articleId": null,
      "children": [
        {
          "type": "heading-two",
          "commit": "1da2fee",
          "id": "VsEM_boWFX",
          "fixed": true,
          "children": [
            {
              "text": "多端登录，群魔乱舞"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/34a473b/",
                      "text": "熟悉的 React，熟悉的 Hooks"
                    },
                    {
                      "text": "：我们用 React 和 Hooks 实现了一个非常简单的添加帖子的原型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/af69225/",
                      "text": "多页面跳转和 Taro UI 组件库"
                    },
                    {
                      "text": "：我们用 Taro 自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而在这一篇中，我们将实现微信和支付宝多端登录。如果你希望直接从这一篇开始，请运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b third-part https://github.com/tuture-dev/ultra-club.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd ultra-club"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "与普通的 Web 应用相比，小程序能够在所在的平台实现一键登录，非常方便。这一步，我们也将实现多端登录（主要包括微信登录和支付宝登录）。之所以标题取为“群魔乱舞”，不仅受了“震惊”小编们的启发，也是因为当今各平台处理登录和鉴权的方式差异很大，很遗憾的是在 Taro 框架下我们依然需要踩很多“坑”才能真正实现“多端登录”。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "准备工作"
                }
              ],
              "id": "qzFJkZnbsX"
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "前提条件"
                }
              ],
              "id": "D_betgfhaA"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在正式开始之前，我们希望你已经具备以下知识："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "基本的 React 框架知识，可参考"
                    },
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/18/07acf61/",
                      "text": "这篇文章"
                    },
                    {
                      "text": "进行学习"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "对常用的 React Hooks （"
                    },
                    {
                      "code": true,
                      "text": "useState"
                    },
                    {
                      "text": "、"
                    },
                    {
                      "code": true,
                      "text": "useEffect"
                    },
                    {
                      "text": "）有所了解，后面图雀社区将推出 “一杯茶的时间，上手 React Hooks”，敬请期待！"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "italic": true,
                  "text": "除此之外，你还需要下载并安装"
                },
                {
                  "italic": true,
                  "link": true,
                  "url": "https://docs.alipay.com/mini/ide/download",
                  "text": "支付宝开发者工具"
                },
                {
                  "italic": true,
                  "text": "，登录后创建自己的小程序 ID。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "组件设计规划"
                }
              ],
              "id": "BKTOgecaFH"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这一节的代码很长，在正式开始之前我们先查看一下组件设计的规划，便于你对接下来我们要做的工作有清晰的了解。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f518056b612947.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到“我的”页面整体拆分成了 "
                },
                {
                  "code": true,
                  "text": "Header"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "Footer"
                },
                {
                  "text": "："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "Header"
                    },
                    {
                      "text": " 包括 "
                    },
                    {
                      "code": true,
                      "text": "LoggedMine"
                    },
                    {
                      "text": "（个人信息），如果在未登录状态下则还有 "
                    },
                    {
                      "code": true,
                      "text": "LoginButton"
                    },
                    {
                      "text": "（普通登录按钮）、"
                    },
                    {
                      "code": true,
                      "text": "WeappLoginButton"
                    },
                    {
                      "text": "（微信登录按钮，仅在微信小程序中出现）以及 "
                    },
                    {
                      "code": true,
                      "text": "AlipayLoginButton"
                    },
                    {
                      "text": "（支付宝登录按钮，仅在支付宝小程序中出现）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "Footer"
                    },
                    {
                      "text": " 则用来显示是否已登录的文字，在已登录的情况下会显示 "
                    },
                    {
                      "code": true,
                      "text": "Logout"
                    },
                    {
                      "text": "（退出登录按钮）"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "config/index.js",
          "display": true,
          "id": "IjOvqCcMur",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "配置 Babel 插件"
                    }
                  ],
                  "id": "y_Iwrz2slD"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "从这一步开始，我们将首次开始写异步代码。本项目将采用流行的 async/await 来编写异步逻辑，因此我们配置一下相应的 Babel 插件："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "npm install babel-plugin-transform-runtime --save-dev"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# yarn add babel-plugin-transform-runtime -D"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后在 "
                    },
                    {
                      "code": true,
                      "text": "config/index.js"
                    },
                    {
                      "text": " 中为 "
                    },
                    {
                      "code": true,
                      "text": "config.babel.plugins"
                    },
                    {
                      "text": " 添加相应的配置如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "config/index.js",
              "commit": "1da2fee",
              "hiddenLines": [
                [
                  0,
                  21
                ],
                [
                  37,
                  86
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "package.json",
          "display": false,
          "id": "1orVWA3UkJ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "1da2fee",
              "hiddenLines": [
                [
                  0,
                  55
                ],
                [
                  63,
                  72
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/LoginButton/index.js",
          "display": true,
          "id": "g4N6LD2EZ_",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "各组件的实现"
                    }
                  ],
                  "id": "RCYkK7DYbB"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 LoginButton"
                    }
                  ],
                  "id": "OfJzbewxBa"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先，我们来实现普通登录按钮 "
                    },
                    {
                      "code": true,
                      "text": "LoginButton"
                    },
                    {
                      "text": " 组件。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoginButton"
                    },
                    {
                      "text": " 目录，在其中创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginButton/index.js",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们使用了 Taro UI 的 "
                    },
                    {
                      "code": true,
                      "text": "AtButton"
                    },
                    {
                      "text": " 组件，并定义了一个 "
                    },
                    {
                      "code": true,
                      "text": "handleClick"
                    },
                    {
                      "text": " 事件，后面在使用时会传入。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/WeappLoginButton/index.js",
          "display": true,
          "id": "onhJPLiMJ2",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 WeappLoginButton"
                    }
                  ],
                  "id": "y3-3xlcIG9"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们实现微信登录按钮 "
                    },
                    {
                      "code": true,
                      "text": "WeappLoginButton"
                    },
                    {
                      "text": "。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/WeappLoginButton"
                    },
                    {
                      "text": " 目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/WeappLoginButton/index.js",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，微信登录按钮和之前的普通登录按钮多了很多东西："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加了 "
                        },
                        {
                          "code": true,
                          "text": "isLogin"
                        },
                        {
                          "text": " 状态，用于表示是否在等待登录中，以及修改状态的 "
                        },
                        {
                          "code": true,
                          "text": "setIsLogin"
                        },
                        {
                          "text": " 函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现了 "
                        },
                        {
                          "code": true,
                          "text": "onGetUserInfo"
                        },
                        {
                          "text": " async 函数，用于处理在用户点击登录按钮、获取到信息之后的逻辑。其中，我们将获取到的用户信息传入 "
                        },
                        {
                          "code": true,
                          "text": "props"
                        },
                        {
                          "text": " 中的 "
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": "，从而修改整个应用的登录状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加了 "
                        },
                        {
                          "code": true,
                          "text": "openType"
                        },
                        {
                          "text": "（微信开放能力）属性，这里我们输入的是 "
                        },
                        {
                          "code": true,
                          "text": "getUserInfo"
                        },
                        {
                          "text": "（获取用户信息），欲查看所有支持的 open-type，请查看"
                        },
                        {
                          "link": true,
                          "url": "https://developers.weixin.qq.com/miniprogram/dev/component/button.html",
                          "text": "微信开放文档对应部分"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "添加了 "
                        },
                        {
                          "code": true,
                          "text": "onGetUserInfo"
                        },
                        {
                          "text": " 这个 handler，用于编写在获取到用户信息后的处理逻辑，这里就是传入刚刚实现的 "
                        },
                        {
                          "code": true,
                          "text": "onGetUserInfo"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/WeappLoginButton/index.scss",
          "display": true,
          "id": "297bqzQoXf",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "WeappLoginButton"
                    },
                    {
                      "text": " 的样式 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/WeappLoginButton/index.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/AlipayLoginButton/index.js",
          "display": true,
          "id": "dmwkEDZ9ez",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 AlipayLoginButton"
                    }
                  ],
                  "id": "R107NlWwBp"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们来实现支付宝登录按钮组件。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/AlipayLoginButton"
                    },
                    {
                      "text": " 目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/AlipayLoginButton/index.js",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，内容与之前的微信登录按钮基本相似，但是有以下差别："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现 "
                        },
                        {
                          "code": true,
                          "text": "onGetAuthorize"
                        },
                        {
                          "text": " 回调函数。与之前微信的回调函数不同，这里我们要调用 "
                        },
                        {
                          "code": true,
                          "text": "Taro.getOpenUserInfo"
                        },
                        {
                          "text": " 手动获取用户基础信息（实际上调用的是支付宝开放平台 "
                        },
                        {
                          "link": true,
                          "url": "https://docs.alipay.com/mini/api/ch8chh",
                          "text": "my.getOpenUserInfo"
                        },
                        {
                          "text": "）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "Button"
                        },
                        {
                          "text": " 组件的 "
                        },
                        {
                          "code": true,
                          "text": "openType"
                        },
                        {
                          "text": "（支付宝开放能力）设置成 "
                        },
                        {
                          "code": true,
                          "text": "getAuthorize"
                        },
                        {
                          "text": "（小程序授权）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在设定开放能力为 "
                        },
                        {
                          "code": true,
                          "text": "getAuthorize"
                        },
                        {
                          "text": " 时，需要添加 "
                        },
                        {
                          "code": true,
                          "text": "scope"
                        },
                        {
                          "text": " 属性为 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": "，让用户可以授权小程序获取支付宝会员的基础信息（另一个有效值是 "
                        },
                        {
                          "code": true,
                          "text": "phoneNumber"
                        },
                        {
                          "text": "，用于获取手机号码）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "传入 "
                        },
                        {
                          "code": true,
                          "text": "onGetAuthorize"
                        },
                        {
                          "text": " 回调函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "关于支付宝小程序登录按钮的细节，可以查看"
                        },
                        {
                          "link": true,
                          "url": "https://docs.alipay.com/mini/component/button",
                          "text": "官方文档"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/AlipayLoginButton/index.scss",
          "display": true,
          "id": "EDWyR04b_j",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "样式文件 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": " 的代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/AlipayLoginButton/index.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/LoggedMine/index.jsx",
          "display": true,
          "id": "wYTGrPcrVc",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 LoggedMine"
                    }
                  ],
                  "id": "Dsf8DbnqF7"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们实现已经登录状态下的 "
                    },
                    {
                      "code": true,
                      "text": "LoggedMine"
                    },
                    {
                      "text": " 组件。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoggedMine"
                    },
                    {
                      "text": " 目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoggedMine/index.jsx",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们添加了点击头像可以预览的功能，可以通过 "
                    },
                    {
                      "link": true,
                      "url": "https://nervjs.github.io/taro/docs/apis/multimedia/images/previewImage.html#docsNav",
                      "code": true,
                      "text": "Taro.previewImage"
                    },
                    {
                      "link": true,
                      "url": "https://nervjs.github.io/taro/docs/apis/multimedia/images/previewImage.html#docsNav",
                      "text": " 函数"
                    },
                    {
                      "text": "实现。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/LoggedMine/index.scss",
          "display": true,
          "id": "BRZuy96VNe",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "LoggedMine"
                    },
                    {
                      "text": " 组件的样式文件如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoggedMine/index.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/Header/index.js",
          "display": true,
          "id": "VFpey4RnNc",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 Header 组件"
                    }
                  ],
                  "id": "WYA_UhM-KY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在所有的“小零件”全部实现后，我们就实现整个登录界面的 "
                    },
                    {
                      "code": true,
                      "text": "Header"
                    },
                    {
                      "text": " 部分。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Header"
                    },
                    {
                      "text": " 目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Header/index.js",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们根据 "
                    },
                    {
                      "code": true,
                      "text": "Taro.ENV_TYPE"
                    },
                    {
                      "text": " 查询当前所在的平台（微信、支付宝或其他），然后确定是否显示相应平台的登录按钮。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "你也许发现了，"
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": " 还是要等待父组件的传入。虽然 Hooks 简化了状态的定义和更新方式，但是却没有简化跨组件修改状态的逻辑。在接下来的一步，我们将用 Redux 进行简化。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/Header/index.scss",
          "display": true,
          "id": "S2KMoCH7hU",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "Header"
                    },
                    {
                      "text": " 组件的样式代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Header/index.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/LoginForm/index.jsx",
          "display": true,
          "id": "jylrI0OqGg",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 LoginForm"
                    }
                  ],
                  "id": "mkpRLLF7QN"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们实现用于普通登录的 "
                    },
                    {
                      "code": true,
                      "text": "LoginForm"
                    },
                    {
                      "text": " 组件。由于本系列教程的目标是讲解 Taro，因此这里简化了注册/登录的流程，用户可以直接输入用户名并上传头像进行注册/登录，无需设置密码和其他验证过程。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoginForm"
                    },
                    {
                      "text": " 目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.jsx",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们使用 Taro UI 的 "
                    },
                    {
                      "link": true,
                      "url": "https://taro-ui.jd.com/#/docs/imagepicker",
                      "text": "ImagePicker 图片选择器组件"
                    },
                    {
                      "text": "，让用户能够选择图片进行上传。"
                    },
                    {
                      "code": true,
                      "text": "AtImagePicker"
                    },
                    {
                      "text": " 最重要的属性就是 "
                    },
                    {
                      "code": true,
                      "text": "onChange"
                    },
                    {
                      "text": " 回调函数，这里我们通过父组件传进来的 "
                    },
                    {
                      "code": true,
                      "text": "handleFilesSelect"
                    },
                    {
                      "text": " 函数来搞定。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/LoginForm/index.scss",
          "display": true,
          "id": "phZpyvNQGZ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "LoginForm"
                    },
                    {
                      "text": " 组件的样式代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/Logout/index.js",
          "display": true,
          "id": "6WDR7N9xmC",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 Logout"
                    }
                  ],
                  "id": "cqGJJIrCC7"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在登录之后，我们还需要退出登录的按钮。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Logout/index.js"
                    },
                    {
                      "text": " 文件，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Logout/index.js",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/Footer/index.js",
          "display": true,
          "id": "sMxqqvnkXZ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现 Footer"
                    }
                  ],
                  "id": "9pNIezmr6x"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "所有的子组件全部实现之后，我们就来实现 "
                    },
                    {
                      "code": true,
                      "text": "Footer"
                    },
                    {
                      "text": " 组件。创建 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Footer"
                    },
                    {
                      "text": " 目录，在其中分别创建 "
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "index.scss"
                    },
                    {
                      "text": "。"
                    },
                    {
                      "code": true,
                      "text": "index.jsx"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Footer/index.js",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/Footer/index.scss",
          "display": true,
          "id": "U71fGG3COf",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "Footer"
                    },
                    {
                      "text": " 组件的样式文件代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Footer/index.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/components/index.jsx",
          "display": true,
          "id": "3kfDwovQBG",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "所有小组件都搞定之后，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/components"
                    },
                    {
                      "text": " 中只需暴露出 "
                    },
                    {
                      "code": true,
                      "text": "Header"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "Footer"
                    },
                    {
                      "text": "。修改 "
                    },
                    {
                      "code": true,
                      "text": "src/components/index.jsx"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/index.jsx",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/mine/mine.jsx",
          "display": true,
          "id": "oySgweCKIr",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "更新“我的”页面"
                    }
                  ],
                  "id": "tDuqQeKks5"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "是时候用上写好的 "
                    },
                    {
                      "code": true,
                      "text": "Header"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "Footer"
                    },
                    {
                      "text": " 组件了，但在此之前，我们先来讲一下我们需要用到的 "
                    },
                    {
                      "code": true,
                      "text": "useEffect"
                    },
                    {
                      "text": " Hooks。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "useEffect Hooks"
                    }
                  ],
                  "id": "sPS6uPbL9a"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "useEffect"
                    },
                    {
                      "text": " Hooks 是用来替代原 React 的生命周期钩子函数的，我们可以在里面发起一些 “副作用” 操作，比如异步获取后端数据、设置定时器或是进行 DOM 操作等："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import React, { useState, useEffect } from 'react';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function Example() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const [count, setCount] = useState(0);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 和 componentDidMount 以及 componentDidUpdate 类似:"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  useEffect(() => {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 使用浏览器 API 更新 document 的标题"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    document.title = `你点击了 ${count} 次`;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  });"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    <div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <p>你点击了 {count} 次</p>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <button onClick={() => setCount(count + 1)}>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        点我"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      </button>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    </div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面的对 "
                    },
                    {
                      "code": true,
                      "text": "document"
                    },
                    {
                      "text": " 标题的修改是具有副作用的操作，在之前的 React 应用中，我们通常会这么写："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "class Example extends React.Component {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  constructor(props) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    super(props);"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    this.state = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      count: 0"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    };"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  componentDidMount() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    document.title = `你点击了 ${this.state.count} 次`;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  componentDidUpdate() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    document.title = `你点击了 ${this.state.count} 次`;"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  render() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return ("
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      <div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        <p>你点击了 {this.state.count} 次</p>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        <button onClick={() => this.setState({ count: this.state.count + 1 })}>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          点我"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        </button>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      </div>"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    );"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果你想了解 "
                    },
                    {
                      "code": true,
                      "text": "useEffect"
                    },
                    {
                      "text": " 具体的详情，可以去查看 React 的"
                    },
                    {
                      "link": true,
                      "url": "https://zh-hans.reactjs.org/docs/hooks-effect.html",
                      "text": "官方文档"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "做的好！了解了 "
                    },
                    {
                      "code": true,
                      "text": "useEffect"
                    },
                    {
                      "text": " Hooks 的概念之后，我们马上来更新“我的”页面组件 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/mine/mine.jsx"
                    },
                    {
                      "text": "，代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.jsx",
              "commit": "1da2fee",
              "hiddenLines": [
                [
                  108,
                  111
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们做了这么些工作："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "使用 "
                        },
                        {
                          "code": true,
                          "text": "useState"
                        },
                        {
                          "text": " 创建了四个状态：用户有关信息（"
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": "），登录弹出层是否打开（"
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": "），是否登录成功（"
                        },
                        {
                          "code": true,
                          "text": "isLogged"
                        },
                        {
                          "text": "），以及相应的更新函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "通过 "
                        },
                        {
                          "code": true,
                          "text": "useEffect"
                        },
                        {
                          "text": " Hook 尝试从本地缓存中获取用户信息（"
                        },
                        {
                          "link": true,
                          "url": "https://nervjs.github.io/taro/docs/apis/storage/getStorage.html#docsNav",
                          "text": "Taro.getStorage"
                        },
                        {
                          "text": "），并用来更新 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现了久违的 "
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": " 函数，其中我们不仅更新了 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 的状态，还把用户数据存入本地缓存（"
                        },
                        {
                          "link": true,
                          "url": "https://nervjs.github.io/taro/docs/apis/storage/setStorage.html#docsNav",
                          "text": "Taro.getStorage"
                        },
                        {
                          "text": "），确保下次打开时保持登录状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现了同样久违的 "
                        },
                        {
                          "code": true,
                          "text": "handleLogout"
                        },
                        {
                          "text": " 函数，其中不仅更新了相关状态，还去掉了本地缓存中的数据（"
                        },
                        {
                          "link": true,
                          "url": "https://nervjs.github.io/taro/docs/apis/storage/removeStorage.html#docsNav",
                          "text": "Taro.removeStorage"
                        },
                        {
                          "text": "）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "实现了用于处理普通登录的 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 函数，内容基本上与 "
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": " 一致"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在返回 JSX 代码时渲染 "
                        },
                        {
                          "code": true,
                          "text": "Header"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "Footer"
                        },
                        {
                          "text": " 组件，传入相应的状态和回调函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/pages/mine/mine.scss",
          "display": true,
          "id": "lX-1vbS9J2",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "调整 "
                    },
                    {
                      "code": true,
                      "text": "Mine"
                    },
                    {
                      "text": " 组件的样式 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/mine/mine.scss"
                    },
                    {
                      "text": " 代码如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.scss",
              "commit": "1da2fee",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/app.scss",
          "display": true,
          "id": "BP2RZB1SA3",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后在 "
                    },
                    {
                      "code": true,
                      "text": "src/app.scss"
                    },
                    {
                      "text": " 中引入相应的 Taro UI 组件的样式："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.scss",
              "commit": "1da2fee",
              "hiddenLines": [
                [
                  0,
                  5
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "id": "N4jjcJz1cV",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "1da2fee",
              "hiddenLines": [
                [
                  0,
                  2648
                ],
                [
                  2662,
                  11153
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "查看效果"
                }
              ],
              "id": "7DSKXWZ86L"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "敲了这么多代码，终于又到了神圣的验收环节。首先是普通登录："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f5182c2510b131.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "而微信和支付宝登录，点击之后就会直接以登录开发者工具所用的帐号登录了。下面贴出我微信和支付宝登录后的界面展示："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16f7866149f1bb27.png",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "登录后点击下方的“退出登录”按钮，就会将当前登录帐户注销哦。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "至此，《Taro 多端小程序开发大型实战》第三篇也就结束啦。在接下来的"
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2019/12/25/5e100f7/",
                  "text": "第四篇"
                },
                {
                  "text": "中，我们将逐步用 Redux 来重构业务数据流，让我们现在略显臃肿的状态管理变得清晰可控。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "a3cf715",
      "id": "DKC32tcmSj",
      "articleId": "5e100f78e51d4541493621cd",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "a3cf715",
          "id": "Zi_Gsn3qfj",
          "fixed": true,
          "children": [
            {
              "text": "双剑合璧：Hooks + Redux"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/34a473b/",
                      "text": "熟悉的 React，熟悉的 Hooks"
                    },
                    {
                      "text": "：我们用 React 和 Hooks 实现了一个非常简单的添加帖子的原型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/af69225/",
                      "text": "多页面跳转和 Taro UI 组件库"
                    },
                    {
                      "text": "：我们用 Taro 自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/5e10118/",
                      "text": "实现微信和支付宝多端登录"
                    },
                    {
                      "text": "：实现了微信、支付宝以及普通登录和退出登录"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你跟着敲到了这里，你一定会发现现在的状态管理和数据流越来越臃肿，组件状态的更新非常复杂。在这一篇中，我们将开始用 Redux 重构。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你不熟悉 Redux，推荐阅读我们的《Redux 包教包会》系列教程："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/1fe175a/",
                      "text": "Redux 包教包会（一）：解救 React 状态危机"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/d129c56/",
                      "text": "Redux 包教包会（二）：趁热打铁，完全重构"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/a3b94eb/",
                      "text": "Redux 包教包会（三）：各司其职，重拾初心"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你希望直接从这一步开始，请运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b redux-start https://github.com/tuture-dev/ultra-club.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd ultra-club"
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一篇的内容很长，要敲的代码很多，建议先收藏，在有空的时候抽出一大块时间去实践哦。相信经过这一篇的洗礼，不仅能对 Redux 的理解更上一层楼，Taro 的开发功力也能大增！"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "写到这一步，我们发现状态已经有点多了，而且 "
                },
                {
                  "code": true,
                  "text": "src/pages/mine/mine.jsx"
                },
                {
                  "text": " 文件是众多状态的顶层组件，比如我们的普通登录按钮 "
                },
                {
                  "code": true,
                  "text": "src/components/LoginButton/index.jsx"
                },
                {
                  "text": " 组件和我们的 "
                },
                {
                  "code": true,
                  "text": "src/components/Footer/index.jsx"
                },
                {
                  "text": " 组件，我们通过点击普通登录按钮打开登录弹窗的状态 "
                },
                {
                  "code": true,
                  "text": "isOpened"
                },
                {
                  "text": " 需要在 "
                },
                {
                  "code": true,
                  "text": "LoginButton"
                },
                {
                  "text": " 里面进行操作，然后进而影响到 "
                },
                {
                  "code": true,
                  "text": "Footer"
                },
                {
                  "text": " 组件内的 "
                },
                {
                  "code": true,
                  "text": "FloatLayout"
                },
                {
                  "text": " 弹窗组件，像这种涉及到多个子组件进行通信，我们将状态保存到公共父组件中的方式在 React 中叫做 ”状态提升“。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "但是随着状态增多，状态提升的状态也随着增多，导致保存这些状态的父组件会臃肿不堪，而且每次状态的改变需要影响很多中间组件，带来极大的性能开销，这种状态管理的难题我们一般交给专门的状态管理容器 Redux 来做，而让 React  专注于渲染用户界面。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "Redux 不仅可以保证状态的可预测性，还能保证状态的变化只和对应的组件相关，不影响到无关的组件，关于 Redux 的详细剖析的实战教程可以参考图雀社区的："
                },
                {
                  "link": true,
                  "url": "https://tuture.co/2019/11/28/1fe175a/",
                  "text": "Redux 包教包会系列文章"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一节中，我们将结合 React Hooks 和 Redux 来重构我们状态管理。"
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "安装依赖"
                    }
                  ],
                  "id": "fryA448cTZ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们先来安装使用 Redux 必要的依赖："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "Bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ yarn add redux @tarojs/redux @tarojs/redux-h5  redux-logger"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "# 或者使用 npm"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install --save redux @tarojs/redux @tarojs/redux-h5 redux-logger"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  0,
                  29
                ],
                [
                  38,
                  45
                ],
                [
                  54,
                  76
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，除了我们熟悉的 "
                    },
                    {
                      "code": true,
                      "text": "redux"
                    },
                    {
                      "text": " 依赖，以及用来打印 Action 的中间件 "
                    },
                    {
                      "code": true,
                      "text": "redux-logger"
                    },
                    {
                      "text": " 外，还有两个额外的包，这是因为在 Taro 中，Redux 原绑定库 "
                    },
                    {
                      "code": true,
                      "text": "react-redux"
                    },
                    {
                      "text": " 被替换成了 "
                    },
                    {
                      "code": true,
                      "text": "@tarojs/redux"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "@tarojs/redux-h5"
                    },
                    {
                      "text": "，前者用在小程序中，后者用在 H5 页面中，Taro 对原 "
                    },
                    {
                      "code": true,
                      "text": "react-redux"
                    },
                    {
                      "text": " 进行了封装并提供了与 react-redux API 几乎一致的包来让开发人员获得更加良好的开发体验。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/store/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 Redux Store"
                    }
                  ],
                  "id": "CCOyltx9Wp"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Redux 的三大核心概念为：Store，Action，Reducers："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "Store：保存着全局的状态，有着 ”数据的唯一真相来源之称“。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "Action：发起修改 Store 中保存状态的动作，是修改状态的唯一手段。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "Reducers：一个个的纯函数，用于响应 Action，对 Store 中的状态进行修改。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，复习了一下 Redux 的概念之后，我们马上来创建 Store，Redux 的最佳实践推荐我们在将 Store 保存在 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 文件夹中，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹下面创建 "
                    },
                    {
                      "code": true,
                      "text": "store"
                    },
                    {
                      "text": " 文件夹，并在其中创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 来编写我们的 Store："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们导出了一个 "
                    },
                    {
                      "code": true,
                      "text": "configureStore"
                    },
                    {
                      "text": " 函数，并在其中创建并返回 Store，这里我们用到了 "
                    },
                    {
                      "code": true,
                      "text": "redux-logger"
                    },
                    {
                      "text": " 中间件，用于在发起 Action 时，在控制台打印 Action 及其前后 Store 中的保存的状态信息。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们的 "
                    },
                    {
                      "code": true,
                      "text": "createstore"
                    },
                    {
                      "text": " 接收两个参数："
                    },
                    {
                      "code": true,
                      "text": "rootReducer"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "applyMiddleware(...middlewares)"
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "rootReducer"
                    },
                    {
                      "text": " 是响应 "
                    },
                    {
                      "code": true,
                      "text": "action"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "code": true,
                      "text": "reducer"
                    },
                    {
                      "text": "，这里我们导出了一个 "
                    },
                    {
                      "code": true,
                      "text": "rootReducer"
                    },
                    {
                      "text": "，代表组合了所有的 "
                    },
                    {
                      "code": true,
                      "text": "reducer"
                    },
                    {
                      "text": " ，我们将在后面 \"组合 User 和 Post Reducer“ 中讲到它。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "createStore"
                    },
                    {
                      "text": " 函数的第二个参数我们使用了 "
                    },
                    {
                      "code": true,
                      "text": "redux"
                    },
                    {
                      "text": " 为我们提供的工具函数 "
                    },
                    {
                      "code": true,
                      "text": "applyMiddleware"
                    },
                    {
                      "text": " 来在 Redux 中注入需要使用的中间件，因为它接收的参数是 "
                    },
                    {
                      "code": true,
                      "text": "(args1, args2, args3, ..., argsn)"
                    },
                    {
                      "text": " 的形式，所以这里我们用了数组展开运算符 "
                    },
                    {
                      "code": true,
                      "text": "..."
                    },
                    {
                      "text": " 来展开 "
                    },
                    {
                      "code": true,
                      "text": "middlewares"
                    },
                    {
                      "text": " 数组。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/reducers/user.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写 User Reducer"
                    }
                  ],
                  "id": "6OJXr3ylac"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建完 Store 之后，我们接在来编写 Reducer。回到我们的页面逻辑，我们在底部有两个 Tab 栏，一个为 “首页”，一个为 “我的”，在 ”首页“ 里面主要是展示一列文章和允许添加文章等，在 ”我的“ 里面主要是允许用户进行登录并展示登录信息，所以整体上我们的逻辑有两类，我们分别将其命名为 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": "，接下来我们将创建处理这两类逻辑的 reducers。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Reducer 的逻辑形如 "
                    },
                    {
                      "code": true,
                      "text": "(state, action) => newState"
                    },
                    {
                      "text": "，即接收上一步 state 以及修改 state 的动作 action，然后返回修改后的新的 state，它是一个纯函数，意味着我们不能突变的修改  state。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "推荐："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "newState = { ...state, prop: newValue }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "不推荐："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "state.prop = newValue"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Redux 推荐的最佳实践是创建独立的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 文件夹，在里面保存我们的一个个 reducer 文件。我们在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 文件夹，在里面创建 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": " 文件，并加入我们的 User Reducer 相应的内容如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/reducers/user.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": "  中申明了 User Reducer 的初始状态 "
                    },
                    {
                      "code": true,
                      "text": "INITIAL_STATE"
                    },
                    {
                      "text": "，并将它赋值给 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 函数 state 的默认值，它接收待响应的 action，在 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 函数内部就是一个 "
                    },
                    {
                      "code": true,
                      "text": "switch"
                    },
                    {
                      "text": " 语句根据 "
                    },
                    {
                      "code": true,
                      "text": "action.type"
                    },
                    {
                      "text": " 进行判断，然后执行相应的逻辑，这里我们主要有两个类型："
                    },
                    {
                      "code": true,
                      "text": "SET_IS_OPENED"
                    },
                    {
                      "text": " 用于修改 "
                    },
                    {
                      "code": true,
                      "text": "isOpened"
                    },
                    {
                      "text": " 属性，"
                    },
                    {
                      "code": true,
                      "text": "SET_LOGIN_INFO"
                    },
                    {
                      "text": " 用于修改 "
                    },
                    {
                      "code": true,
                      "text": "avatar"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "nickName"
                    },
                    {
                      "text": " 属性，当 "
                    },
                    {
                      "code": true,
                      "text": "switch"
                    },
                    {
                      "text": " 语句中没有匹配到任何 "
                    },
                    {
                      "code": true,
                      "text": "action.type"
                    },
                    {
                      "text": " 值时，它返回原 state。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "根据 Redux 最近实践，这里的 "
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 常量一般保存到 "
                        },
                        {
                          "code": true,
                          "text": "constants"
                        },
                        {
                          "text": " 文件夹中，我们将马上创建它。这里使用常量而不是直接硬编码字符串的目的是为了代码的可维护性。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/constants/user.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们来创建 "
                    },
                    {
                      "code": true,
                      "text": "src/reducer/user.js"
                    },
                    {
                      "text": " 中会用到的常量，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": "  文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "constants"
                    },
                    {
                      "text": " 文件夹，并在其中创建 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": " 文件，在其中添加内容如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/constants/user.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/reducers/post.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "编写 Post Reducer"
                    }
                  ],
                  "id": "rTpCFhFIku"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了响应 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 逻辑的状态修改，我们创建在 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers"
                    },
                    {
                      "text": " 下创建 "
                    },
                    {
                      "code": true,
                      "text": "post.js"
                    },
                    {
                      "text": "，并在其中编写相应的内容如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/reducers/post.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到， Post Reducer 的形式和 User Reducer 类似，我们将之前需要多组件中共享的状态 "
                    },
                    {
                      "code": true,
                      "text": "posts"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "isOpened"
                    },
                    {
                      "text": " 提取出来保存在 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 的状态里，这里的 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 函数主要响应 "
                    },
                    {
                      "code": true,
                      "text": "SET_POSTS"
                    },
                    {
                      "text": " 逻辑，用于添加新的 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 到 "
                    },
                    {
                      "code": true,
                      "text": "posts"
                    },
                    {
                      "text": " 状态种，以及 "
                    },
                    {
                      "code": true,
                      "text": "SET_POST_FORM_IS_OPENED"
                    },
                    {
                      "text": " 逻辑，用户设置 "
                    },
                    {
                      "code": true,
                      "text": "isOpened"
                    },
                    {
                      "text": " 状态。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/constants/post.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们来创建 "
                    },
                    {
                      "code": true,
                      "text": "src/reducer/post.js"
                    },
                    {
                      "text": " 中会用到的常量，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/constants"
                    },
                    {
                      "text": "  文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": " 文件，在其中添加内容如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/constants/post.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/constants/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "眼尖的同学可能注意到了，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers/user.js"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers/post.js"
                    },
                    {
                      "text": " 中导入需要使用的常量时都是从 "
                    },
                    {
                      "code": true,
                      "text": "../constants"
                    },
                    {
                      "text": "  的形式，那是因为我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/constants"
                    },
                    {
                      "text": " 文件夹下创建了一个 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 文件，用于统一导出所有的常量，这也是代码可维护性的一种尝试。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/constants/index.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/reducers/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "组合 User 和 Post Reducer"
                    }
                  ],
                  "id": "yN8NsrrCEu"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在之前将整个全局的响应逻辑分别拆分到了 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers/user.js"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers/post.js"
                    },
                    {
                      "text": " 中，这使得我们可以把响应逻辑拆分到很多个很小的函数单元，极大增加了代码的可读性和可维护性。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "但最终我们还是要将这些拆分的逻辑组合成一个逻辑树，并将其作为参数传给 "
                    },
                    {
                      "code": true,
                      "text": "createStore"
                    },
                    {
                      "text": " 函数来使用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Redux 为我们提供了 "
                    },
                    {
                      "code": true,
                      "text": "combineReducers"
                    },
                    {
                      "text": " 来组合这些拆分的逻辑，我们在 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers"
                    },
                    {
                      "text": " 文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 文件，并在其中编写如下内容："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/reducers/index.js",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们导入了 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "post.js"
                    },
                    {
                      "text": "，并使用对象简介写法传给 "
                    },
                    {
                      "code": true,
                      "text": "combineReducers"
                    },
                    {
                      "text": " 函数并导出，通过 "
                    },
                    {
                      "code": true,
                      "text": "combineReducers"
                    },
                    {
                      "text": " 将逻辑进行组合并导出为 "
                    },
                    {
                      "code": true,
                      "text": "rootReducer"
                    },
                    {
                      "text": " 作为参数在我们的 "
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "code": true,
                      "text": "createStore"
                    },
                    {
                      "text": " 函数中使用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里的 "
                    },
                    {
                      "code": true,
                      "text": "combineReducers"
                    },
                    {
                      "text": " 函数主要完成两件事："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "组合 user Reducer 和 post Reducer 中的状态，并将其合并成一颗形如 "
                        },
                        {
                          "code": true,
                          "text": "{ user, post }"
                        },
                        {
                          "text": " 的状态树，其中 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 属性保存这 user Reducer 的状态，"
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 属性保存着 post Reducer 的状态。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "分发 Action，当组件中 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": "  一个 Action， "
                        },
                        {
                          "code": true,
                          "text": "combineReducers"
                        },
                        {
                          "text": " 会遍历 user Reducer 和 post Reducer，当匹配到任一 Reducer 的 "
                        },
                        {
                          "code": true,
                          "text": "switch"
                        },
                        {
                          "text": " 语句时，就会响应这个 Action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们将马上在之后讲解如何在组件中 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " Action。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "project.config.json",
          "display": false,
          "id": "ALiJlUm_K3",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "project.config.json",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/app.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "整合 Redux 和 React"
                    }
                  ],
                  "id": "LY5bYJ1Bkm"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当我们编写了 reducers 创建了 store 之后，下一步要考虑的就是如何将 Redux 整合进 React，我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/app.js"
                    },
                    {
                      "text": "，对其中的内容作出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.jsx",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  9,
                  10
                ],
                [
                  19,
                  42
                ],
                [
                  55,
                  55
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要修改了三部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们导入了 "
                        },
                        {
                          "code": true,
                          "text": "configureStore"
                        },
                        {
                          "text": "，并调用它获取 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们从 Redux 对应的 Taro 绑定库 "
                        },
                        {
                          "code": true,
                          "text": "@tarojs/redux"
                        },
                        {
                          "text": " 中导出 "
                        },
                        {
                          "code": true,
                          "text": "Provider"
                        },
                        {
                          "text": "，它架设起 Redux 和 React 交流的桥梁。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们用 "
                        },
                        {
                          "code": true,
                          "text": "Provider"
                        },
                        {
                          "text": " 包裹我们之前的根组件，并将 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 作为其属性传入，这样后续的组件就可以通过获取到 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 里面保存的状态。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/LoginButton/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "Hooks 版的 Action 初尝鲜"
                    }
                  ],
                  "id": "HiKBFWFwJ0"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "准备好了 Store 和 Reducer，又整合了 Redux 和 React，是时候来体验一下 Redux 状态管理容器的先进性了，不过为了使用 Hooks 版本的 Action，这里我们先来讲一讲会用到的 Hooks。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "useDispatch Hooks"
                    }
                  ],
                  "id": "XAixQ7tDnP"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这个 Hooks 返回 Redux store 的 "
                    },
                    {
                      "code": true,
                      "text": "dispatch"
                    },
                    {
                      "text": " 引用。你可以使用它来 dispatch actions。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "讲完  useDispatch Hooks，我们马上来实践一波，首先搞定我们 ”普通登录“ 的 Redux 化问题，让我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoginButton/index.js"
                    },
                    {
                      "text": "，对其中内容作出相应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginButton/index.js",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  20,
                  20
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要有四块改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们从 "
                        },
                        {
                          "code": true,
                          "text": "@tarojs/redux"
                        },
                        {
                          "text": " 中导出 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " API。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们从之前定义的常量文件中导出 "
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": " 常量。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后，我们在 "
                        },
                        {
                          "code": true,
                          "text": "LoginButton"
                        },
                        {
                          "text": " 函数式组件中调用 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " Hooks 来返回我们的 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 函数，我们可以用它来 dispatch action 来修改 Redux store 的状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们将 "
                        },
                        {
                          "code": true,
                          "text": "AtButton"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " 接收的回调函数进行替换，当按钮点击时，我们发起一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": " 的 action，并传递了一个 "
                        },
                        {
                          "code": true,
                          "text": "payload"
                        },
                        {
                          "text": " 参数，用于将 Redux store 里面对应的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 属性中的 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 修改为 "
                        },
                        {
                          "code": true,
                          "text": "true"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/WeappLoginButton/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "搞定完 ”普通登录“，我们接着来收拾一下 ”微信登录“ 的逻辑，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/WeappLoginButton/index.js"
                    },
                    {
                      "text": " 文件，对文件的内容作出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/WeappLoginButton/index.js",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  34,
                  46
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的改动和之前在 ”普通登录“ 里面的改动类似："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们导出了 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " 钩子"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "导出了 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 常量"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后我们将之前调用父组件传下的 "
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": "  方法改成了 dispatch "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 的 action，因为我们的 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 状态已经在 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 中的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 属性中定义了，所以我们修改也是需要通过 dispatch action 来修改，最后我们将之前定义在父组件中的 "
                        },
                        {
                          "code": true,
                          "text": "Taro.setStorage"
                        },
                        {
                          "text": " 设置缓存的方法移动到了子组件中，以保证相关信息的改动具有一致性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/AlipayLoginButton/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们来搞定 ”支付宝登录“ 的 Redux 逻辑，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/AlipayLoginButton/index.js"
                    },
                    {
                      "text": " 对文件内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/AlipayLoginButton/index.js",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  14,
                  16
                ],
                [
                  36,
                  52
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的改动和之前在 ”微信登录“ 里面的改动几乎一样，所以这里我们就不在重复讲解啦 :)"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/LoggedMine/index.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "useSelector Hooks 来捧场"
                    }
                  ],
                  "id": "FhX8JySO7a"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "一路跟下来的同学可能有点明白我们正在使用 Redux 我们之前的代码，而我们重构的思路也是先从 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/mine/mine.jsx"
                    },
                    {
                      "text": " 中的 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Header/index.jsx"
                    },
                    {
                      "text": " 开始，搞定完 "
                    },
                    {
                      "code": true,
                      "text": "Header.jsx"
                    },
                    {
                      "text": " 里面的所有登录按钮之后，接下来应该就轮到 "
                    },
                    {
                      "code": true,
                      "text": "Header.jsx"
                    },
                    {
                      "text": " 内的最后一个组件 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoggedMine/index.jsx"
                    },
                    {
                      "text": "  了。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为在 "
                    },
                    {
                      "code": true,
                      "text": "LoggedMine"
                    },
                    {
                      "text": " 组件中我们要用到 useSelector Hooks，所以这里我们先来讲一下这个 Hooks。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "useSelector Hooks"
                    }
                  ],
                  "id": "DZ7U4if-8T"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "code": true,
                      "text": "useSelector"
                    },
                    {
                      "text": " 允许你使用 selector 函数从一个 Redux Store 中获取数据。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Selector 函数大致相当于 "
                    },
                    {
                      "code": true,
                      "text": "connect"
                    },
                    {
                      "text": " 函数的 "
                    },
                    {
                      "code": true,
                      "text": "mapStateToProps"
                    },
                    {
                      "text": " 参数。Selector 会在组件每次渲染时调用。"
                    },
                    {
                      "code": true,
                      "text": "useSelector"
                    },
                    {
                      "text": " 同样会订阅 Redux store，在 Redux action 被 dispatch 时调用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "但 "
                    },
                    {
                      "code": true,
                      "text": "useSelector"
                    },
                    {
                      "text": " 还是和 "
                    },
                    {
                      "code": true,
                      "text": "mapStateToProps"
                    },
                    {
                      "text": " 有一些不同："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "不像 "
                        },
                        {
                          "code": true,
                          "text": "mapStateToProps"
                        },
                        {
                          "text": " 只返回对象一样，Selector 可能会返回任何值。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "当一个 action dispatch 时，"
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " 会把 selector 的前后返回值做一次浅对比，如果不同，组件会强制更新。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "Selector 函数不接受 "
                        },
                        {
                          "code": true,
                          "text": "ownProps"
                        },
                        {
                          "text": " 参数。但 selector 可以通过闭包访问函数式组件传递下来的 props。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，了解了 "
                    },
                    {
                      "code": true,
                      "text": "useSelector"
                    },
                    {
                      "text": " 的概念之后，我们马上来实操一下，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoggedMine/index.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出如下的修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoggedMine/index.jsx",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们上面的代码主要有四处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们从 "
                        },
                        {
                          "code": true,
                          "text": "@tarojs/redux"
                        },
                        {
                          "text": " 中导出了  "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了两次 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " 分别从 Redux Store 里面获取了 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": "，它们位于 "
                        },
                        {
                          "code": true,
                          "text": "state.user"
                        },
                        {
                          "text": " 属性下。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将之前从 "
                        },
                        {
                          "code": true,
                          "text": "props"
                        },
                        {
                          "text": " 里面获取到的 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 替换成我们从 Redux store 里面获取到状态，这里我们为了用户体验，从 "
                        },
                        {
                          "code": true,
                          "text": "taro-ui"
                        },
                        {
                          "text": " 中导出了一个 "
                        },
                        {
                          "code": true,
                          "text": "AtAvatar"
                        },
                        {
                          "text": " 组件用于展示在没有 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 时的默认头像。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，在点击头像进行预览的 "
                        },
                        {
                          "code": true,
                          "text": "onImageClick"
                        },
                        {
                          "text": " 方法里面，我们使用从 Redux store 里面获取到的 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/Header/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "是时候收割最后一波 ”韭菜“ 了，让我们彻底完成 "
                    },
                    {
                      "code": true,
                      "text": "Header/index.js"
                    },
                    {
                      "text": " 的 Redux 化，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Header/index.js"
                    },
                    {
                      "text": " ，对其中的内容做出相应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Header/index.js",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  7,
                  9
                ],
                [
                  38,
                  39
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码主要有五处主要的变动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导出了 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " 中取到我们需要的 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 属性，用于进行双取反转换成布尔值 "
                        },
                        {
                          "code": true,
                          "text": "isLogged"
                        },
                        {
                          "text": "，表示是否登录。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将之前从父组件获取的 "
                        },
                        {
                          "code": true,
                          "text": "props.isLogged"
                        },
                        {
                          "text": " 属性替换成新的从 "
                        },
                        {
                          "code": true,
                          "text": "isLogged"
                        },
                        {
                          "text": " 值"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们去掉 ”普通登录” 按钮上不再需要的 "
                        },
                        {
                          "code": true,
                          "text": "handleClick"
                        },
                        {
                          "text": " 属性和 “微信登录”、“支付宝登录” 上面不再需要的 "
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们去掉 "
                        },
                        {
                          "code": true,
                          "text": "LoggedMine"
                        },
                        {
                          "text": " 组件上不再需要的 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": " 属性，因为我们已经在组件内部从使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks 从组件内部获取了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/Logout/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "搞定 Footer 的 Redux 化"
                    }
                  ],
                  "id": "rVNP8ztBim"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "本来这个小标题我是不想起的，但是因为，是吧，大家上面在没有小标题的情况下看了这么久，可能已经废（累）了，所以我就贴心的加上一个小标题，帮助你定位接下来讲解的重心。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "是的接下来，我们要重构 “我的\" tab 页面中的下半部分组件 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Footer/index.js"
                    },
                    {
                      "text": " 我们遵循自顶向下的方式来重构，首先是 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Logout/index.js"
                    },
                    {
                      "text": " 文件，我们打开这个文件，对其中内容作出如下修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Logout/index.js",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  42,
                  42
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一步可能是最能体现引入 Redux 进行状态管理带来好处的一步了 – 我们将之前至上而下的 React 状态管理逻辑压平，使得底层组件可以在自身中就解决响应的状态和逻辑问题。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们上面的文件中主要有五处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们从 "
                        },
                        {
                          "code": true,
                          "text": "@tarojs/taro"
                        },
                        {
                          "text": " 里面导出 "
                        },
                        {
                          "code": true,
                          "text": "useState"
                        },
                        {
                          "text": " Hooks。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将之前在 "
                        },
                        {
                          "code": true,
                          "text": "src/pages/mine/mine.js"
                        },
                        {
                          "text": " 中定义的 "
                        },
                        {
                          "code": true,
                          "text": "isLogout"
                        },
                        {
                          "text": " 状态移动到组件 "
                        },
                        {
                          "code": true,
                          "text": "Logout"
                        },
                        {
                          "text": " 组件内部来，因为它只和此组件有关系。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们用 "
                        },
                        {
                          "code": true,
                          "text": "isLogout"
                        },
                        {
                          "text": " 替换在 "
                        },
                        {
                          "code": true,
                          "text": "AtButton"
                        },
                        {
                          "text": " 里面用到的 "
                        },
                        {
                          "code": true,
                          "text": "props.loading"
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后，我们考虑将之前按钮点击调用 "
                        },
                        {
                          "code": true,
                          "text": "props.handleLogout"
                        },
                        {
                          "text": " Redux 化，我们将这个点击之后的回调函数 "
                        },
                        {
                          "code": true,
                          "text": "handleLogout"
                        },
                        {
                          "text": " 在组件内部定义。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们从 "
                        },
                        {
                          "code": true,
                          "text": "@tarojs/redux"
                        },
                        {
                          "text": " 中导入 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " Hooks，并在组件中调用成我们需要的 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 函数，接着我们在 "
                        },
                        {
                          "code": true,
                          "text": "handleLogout"
                        },
                        {
                          "text": " 函数中去 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " action 来重置 Store 中的 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里我们在组件内定义的 "
                        },
                        {
                          "code": true,
                          "text": "handleLogout"
                        },
                        {
                          "text": " 函数和我们之前在 "
                        },
                        {
                          "code": true,
                          "text": "src/pages/mine/mine.js"
                        },
                        {
                          "text": " 中定义的类似，只是使用  dispatch action 的方式替换了重置 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 的部分。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/LoginForm/index.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "搞定完 "
                    },
                    {
                      "code": true,
                      "text": "Logout"
                    },
                    {
                      "text": " 组件，接着就是 "
                    },
                    {
                      "code": true,
                      "text": "LoginForm"
                    },
                    {
                      "text": " 组件的重构了，让我们快马加鞭，让它也接受 Redux 光环的洗礼吧！"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoginForm/index.jsx"
                    },
                    {
                      "text": " ，对其中的内容作出相应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.jsx",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  28,
                  29
                ],
                [
                  85,
                  87
                ],
                [
                  98,
                  103
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这一步和上一步类似，可能也是最能体现引入 Redux 进行状态管理带来好处的一步了，我们同样将之前在顶层组件中提供的状态压平到了底层组件内部。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们上面的文件中主要有四处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们将 "
                        },
                        {
                          "code": true,
                          "text": "formNickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "files"
                        },
                        {
                          "text": " 等状态放置到 "
                        },
                        {
                          "code": true,
                          "text": "LoginForm"
                        },
                        {
                          "text": " 组件内部，并使用 "
                        },
                        {
                          "code": true,
                          "text": "useState"
                        },
                        {
                          "text": " Hooks 管理起来，因为它们只和此组件有关系。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将 "
                        },
                        {
                          "code": true,
                          "text": "AtImagePicker"
                        },
                        {
                          "text": " 里面的 "
                        },
                        {
                          "code": true,
                          "text": "props.files"
                        },
                        {
                          "text": " 替换成 "
                        },
                        {
                          "code": true,
                          "text": "files"
                        },
                        {
                          "text": "，将它的 "
                        },
                        {
                          "code": true,
                          "text": "onChange"
                        },
                        {
                          "text": " 回调函数内部的设置改变状态的 "
                        },
                        {
                          "code": true,
                          "text": "props.handleFilesSelect(files)"
                        },
                        {
                          "text": " 替换成 "
                        },
                        {
                          "code": true,
                          "text": "setFiles(files)"
                        },
                        {
                          "text": "。可以看到这里我们还对 "
                        },
                        {
                          "code": true,
                          "text": "files.length = 0"
                        },
                        {
                          "text": " 的形式做了一个判断，当没有选择图片时，要把我们选择图片的按钮显示出来。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将 "
                        },
                        {
                          "code": true,
                          "text": "Input"
                        },
                        {
                          "text": " 组件的 "
                        },
                        {
                          "code": true,
                          "text": "props.formNickName"
                        },
                        {
                          "text": " 替换成 "
                        },
                        {
                          "code": true,
                          "text": "formNickName"
                        },
                        {
                          "text": "，将之前 "
                        },
                        {
                          "code": true,
                          "text": "onInput"
                        },
                        {
                          "text": " 接收的回调函数换成了 "
                        },
                        {
                          "code": true,
                          "text": "setFormNickName"
                        },
                        {
                          "text": " 的形式来设置 "
                        },
                        {
                          "code": true,
                          "text": "formNickName"
                        },
                        {
                          "text": " 的变化。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将之前提交表单需要调用的父组件方法 "
                        },
                        {
                          "code": true,
                          "text": "props.handleSubmit"
                        },
                        {
                          "text": " 移动到组件内部来定义，可以看到，这个 "
                        },
                        {
                          "code": true,
                          "text": "hanldeSubmit"
                        },
                        {
                          "text": " 组合了之前在 "
                        },
                        {
                          "code": true,
                          "text": "src/components/Footer/index.jsx"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "src/pages/mine/mine.js"
                        },
                        {
                          "text": " 组件里的 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 逻辑："
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着进行数据验证，不合要求的数据就会被驳回并显示错误（其实这里应该显示警告 "
                        },
                        {
                          "code": true,
                          "text": "warning"
                        },
                        {
                          "text": "，当时写代码时石乐志😅）。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着因为 "
                        },
                        {
                          "code": true,
                          "text": "LoginForm"
                        },
                        {
                          "text": " 表单数据要被清除，所以我们将选中图片的按钮又设置为可显示状态。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着提示登录成功。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "清空表单状态。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将登录数据缓存在 "
                        },
                        {
                          "code": true,
                          "text": "storage"
                        },
                        {
                          "text": " 里面，在 Taro 里面使用 "
                        },
                        {
                          "code": true,
                          "text": "Taro.setStorage({ key, data })"
                        },
                        {
                          "text": " 的形式来缓存，其中 "
                        },
                        {
                          "code": true,
                          "text": "key"
                        },
                        {
                          "text": " 是字符串，"
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": " 是字符串或者对象。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导出了 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " Hooks，使用 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " Hooks 生成的 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 函数的引用来发起更新 Redux store 的 action 来更新本地数据，"
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 的 action 用来更新用户登录信息，"
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": " 的 action 用来更新 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 属性，它将关闭展示登录框的弹出层 "
                        },
                        {
                          "code": true,
                          "text": "FloatLayout"
                        },
                        {
                          "text": " 组件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/Footer/index.js",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "讲到这里，我们的 "
                    },
                    {
                      "code": true,
                      "text": "Footer"
                    },
                    {
                      "text": " 部分的重构大业还剩下临门一脚了。让我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/Footer/index.js"
                    },
                    {
                      "text": " 文件，立马来重构它："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Footer/index.js",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  80,
                  80
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码主要有五处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们已经将 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 抽取到 Redux store 保存的状态中，所以之前从父组件获取的 "
                        },
                        {
                          "code": true,
                          "text": "props.isLogged"
                        },
                        {
                          "text": " 判断是否登录的信息，我们移动到组件内部来，使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks 从 Redux store 从获取 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 属性，进行双取反操作成布尔值来表示是否已经登录的 "
                        },
                        {
                          "code": true,
                          "text": "isLogged"
                        },
                        {
                          "text": " 属性，并使用它来替换之前的 "
                        },
                        {
                          "code": true,
                          "text": "props.isLogged"
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，就是取代之前从父组件获取的 "
                        },
                        {
                          "code": true,
                          "text": "props.isOpened"
                        },
                        {
                          "text": " 属性，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks 从 Redux store 中获取对应的 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 属性，然后替换之前的 "
                        },
                        {
                          "code": true,
                          "text": "props.isOpened"
                        },
                        {
                          "text": "，用户控制登录框窗口的弹出层 "
                        },
                        {
                          "code": true,
                          "text": "AtFloatLayout"
                        },
                        {
                          "text": " 的打开和关闭。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将之前 "
                        },
                        {
                          "code": true,
                          "text": "AtFloatLayout"
                        },
                        {
                          "text": " 关闭时（"
                        },
                        {
                          "code": true,
                          "text": "onClose"
                        },
                        {
                          "text": "）的回调函数替换成 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": " 的 action 来设置 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 属性将 "
                        },
                        {
                          "code": true,
                          "text": "AtFloatLayout"
                        },
                        {
                          "text": " 关闭。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们开始移除 "
                        },
                        {
                          "code": true,
                          "text": "Logout"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "LoginForm"
                        },
                        {
                          "text": " 组件上不再需要传递的属性，因为在对应的组件中我们已经声明了对应的属性了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们删掉之前定义在 "
                        },
                        {
                          "code": true,
                          "text": "Footer"
                        },
                        {
                          "text": " 组件内的 "
                        },
                        {
                          "code": true,
                          "text": "formNickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "files"
                        },
                        {
                          "text": " 等状态，以及不再需要的 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 函数，因为它已经在 "
                        },
                        {
                          "code": true,
                          "text": "LoginForm"
                        },
                        {
                          "text": " 里面定义了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/mine/mine.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "完成 “我的” 页面重构"
                    }
                  ],
                  "id": "IzS-pa93-x"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "熟悉套路的同学可能都知道起这个标题的含义了吧 😏。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们一路打怪重构到这里，相比眼尖的人已经摸清楚 Redux 的套路了，结合 Redux 来写 React 代码，就好比 “千里之堤，始于垒土” 一般，我们先把所有细小的分支组件搞定，进而一步一步向顶层组件进发，以完成所有组件的编写。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "而这个 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/mine/mine.jsx"
                    },
                    {
                      "text": " 组件就是 “我的” 这一 tab 页面的顶层组件了，也是我们在 “我的” 页面需要重构的最后一个页面了，是的，我们马上就要达到第一阶段性胜利了✌️。现在就打开这个文件，对其中的内容作出如下的修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.jsx",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  21,
                  21
                ],
                [
                  33,
                  34
                ],
                [
                  108,
                  111
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码做了一下五处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们导入了 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " Hooks 和 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 常量，并把之前在 "
                        },
                        {
                          "code": true,
                          "text": "getStorage"
                        },
                        {
                          "text": " 方法里面设置 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 的操作替换成了 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 的 action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们删除不再需要的 "
                        },
                        {
                          "code": true,
                          "text": "formNickName"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "files"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "isLogout"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 状态，以及 "
                        },
                        {
                          "code": true,
                          "text": "setLoginInfo"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "handleLogout"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "handleSetIsOpened"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "handleClick"
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 方法。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们删除 "
                        },
                        {
                          "code": true,
                          "text": "Header"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "Footer"
                        },
                        {
                          "text": " 组件上不再不需要的属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大功告成🥈！这里给你颁发一个银牌，以奖励你能一直坚持阅读并跟到这里，我们这一篇教程很长很长，能跟下来的都不容易，希望你能在心里或用实际行动给自己鼓鼓掌👏。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "小憩一下，恢复精力，整装待发！很多同学可能很好奇了，为什么还只能拿一个银牌呢？那是因为我们的重构进程才走了一半呀✌️，但是不要担心，我们所有新的东西都已经讲完了，接下来就只是一些收尾工作了，当你能坚持到终点的时候，会有惊喜等着你哦！加油吧骚年💪。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostForm/index.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "开始重构 “首页” 之旅"
                    }
                  ],
                  "id": "n9yAyh5jhY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们依然按照之前的套路，从最底层的组件开始重构，首先是我们的登录框弹出层 "
                    },
                    {
                      "code": true,
                      "text": "LoginForm"
                    },
                    {
                      "text": " 组件，让我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostForm/index.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出相应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostForm/index.jsx",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  82,
                  87
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这个文件的形式和我们之前的 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoginForm/index.jsx"
                    },
                    {
                      "text": " 文件类似，可以看到，我们上面的文件中主要有四处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们将 "
                        },
                        {
                          "code": true,
                          "text": "formTitle"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "formContent "
                        },
                        {
                          "text": " 等状态放置到 "
                        },
                        {
                          "code": true,
                          "text": "PostForm"
                        },
                        {
                          "text": " 组件内部，并使用 "
                        },
                        {
                          "code": true,
                          "text": "useState"
                        },
                        {
                          "text": " Hooks 管理起来，因为它们只和此组件有关系。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将 "
                        },
                        {
                          "code": true,
                          "text": "Input "
                        },
                        {
                          "text": " 里面的 "
                        },
                        {
                          "code": true,
                          "text": "props.formTitle"
                        },
                        {
                          "text": " 替换成 "
                        },
                        {
                          "code": true,
                          "text": "formTitle"
                        },
                        {
                          "text": "，将它的 "
                        },
                        {
                          "code": true,
                          "text": "onInput "
                        },
                        {
                          "text": " 回调函数内部的设置改变状态的 "
                        },
                        {
                          "code": true,
                          "text": "props. handleTitleInput"
                        },
                        {
                          "text": " 替换成 "
                        },
                        {
                          "code": true,
                          "text": "setFormTitle(e.target.value)"
                        },
                        {
                          "text": " 的回调函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将 "
                        },
                        {
                          "code": true,
                          "text": "Textarea "
                        },
                        {
                          "text": " 组件的 "
                        },
                        {
                          "code": true,
                          "text": "props. formContent "
                        },
                        {
                          "text": " 替换成 "
                        },
                        {
                          "code": true,
                          "text": "formContent "
                        },
                        {
                          "text": "，将之前 "
                        },
                        {
                          "code": true,
                          "text": "onInput"
                        },
                        {
                          "text": " 接收的回调函数换成了 "
                        },
                        {
                          "code": true,
                          "text": "setFormContent "
                        },
                        {
                          "text": " 的形式来设置 "
                        },
                        {
                          "code": true,
                          "text": "formContent"
                        },
                        {
                          "text": " 的变化。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们将之前提交表单需要调用的父组件方法 "
                        },
                        {
                          "code": true,
                          "text": "props.handleSubmit"
                        },
                        {
                          "text": " 移动到组件内部来定义，可以看到，这个 "
                        },
                        {
                          "code": true,
                          "text": "hanldeSubmit"
                        },
                        {
                          "text": " 和我们之前定义在 "
                        },
                        {
                          "code": true,
                          "text": "src/pages/index/index.js"
                        },
                        {
                          "text": " 组件里的 "
                        },
                        {
                          "code": true,
                          "text": "handleSubmit"
                        },
                        {
                          "text": " 逻辑类似："
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着进行数据验证，不合要求的数据就会被驳回并显示警告（这里我们又显示对了😅）。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_POSTS"
                        },
                        {
                          "text": " 的 action，将新发表的 post 添加到 Redux store 对应的 "
                        },
                        {
                          "code": true,
                          "text": "posts"
                        },
                        {
                          "text": " 数组中。我们注意到这里我们使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks 从 Redux store 里面获取了 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 属性，并把它们组合到 "
                        },
                        {
                          "code": true,
                          "text": "post.user"
                        },
                        {
                          "text": " 属性里，随着 action 的 payload 一起被 dispatch，我们用这个 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 属性标志发帖的用户属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "清空表单状态。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_POST_FORM_IS_OPENED "
                        },
                        {
                          "text": " 的 action 用来更新 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 属性，它将关闭展示发表帖子的表单弹出层 "
                        },
                        {
                          "code": true,
                          "text": "FloatLayout"
                        },
                        {
                          "text": " 组件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后提示发帖成功。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着是我们 “首页” 页面组件另外一个底层子组件 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": "，它主要用于展示一个帖子，让我们 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostCard/index.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.jsx",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到这个组件基本不保有自己的状态，它接收来自父组件的状态，我们对它的修改主要有下面五个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将之前的直接获取 "
                        },
                        {
                          "code": true,
                          "text": "props.title"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "props.content"
                        },
                        {
                          "text": " 放到了 "
                        },
                        {
                          "code": true,
                          "text": "props.post"
                        },
                        {
                          "text": " 属性中，我们从 "
                        },
                        {
                          "code": true,
                          "text": "props.post"
                        },
                        {
                          "text": " 属性中导出我们需要展示的 "
                        },
                        {
                          "code": true,
                          "text": "title"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "content"
                        },
                        {
                          "text": "，还要一个额外的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 属性，它应该是一个对象，保存着发帖人的用户属性，我们使用解构的方法获取 "
                        },
                        {
                          "code": true,
                          "text": "user.avatar"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "user.nickName"
                        },
                        {
                          "text": " 的值。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们看到 "
                        },
                        {
                          "code": true,
                          "text": "return"
                        },
                        {
                          "text": " 的组件结构发生了很大的变化，这里我们为了方便，使用了 "
                        },
                        {
                          "code": true,
                          "text": "taro-ui"
                        },
                        {
                          "text": " 提供给我们的 "
                        },
                        {
                          "code": true,
                          "text": "Article"
                        },
                        {
                          "text": " 文章样式组件，用于展示类似微信公众号文章页的一些样式，可供用户快速\b呈现文章内容，可以详情可以查看 "
                        },
                        {
                          "link": true,
                          "url": "https://taro-ui.jd.com/#/docs/article",
                          "text": "taro-ui 链接"
                        },
                        {
                          "text": "，有了 "
                        },
                        {
                          "code": true,
                          "text": "taro-ui"
                        },
                        {
                          "text": " 加持，我们就额外的展示了发表此文章的用户头像（"
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": "）和昵称（"
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": "）。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们还可以看到，这里我们对原 "
                        },
                        {
                          "code": true,
                          "text": "content"
                        },
                        {
                          "text": " 做了一点修改，当 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 组件在文章列表中被引用的时候，我们对内容长度进行截断，当超过 66 字符时，我们就截断它，并加上省略号 "
                        },
                        {
                          "code": true,
                          "text": "..."
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们改动了 "
                        },
                        {
                          "code": true,
                          "text": "handleClick"
                        },
                        {
                          "text": " 方法，之前是在跳转路由的页面路径里直接带上查询参数 "
                        },
                        {
                          "code": true,
                          "text": "title"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "content"
                        },
                        {
                          "text": " ，当我们要传递的内容多了，这个路径就会显得很臃肿，所以这里我们传递此文章对应的 "
                        },
                        {
                          "code": true,
                          "text": "id"
                        },
                        {
                          "text": "，这样可以通过此 "
                        },
                        {
                          "code": true,
                          "text": "id"
                        },
                        {
                          "text": " 取到完整的 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 数据，使路径保持简洁，这也是最佳实践的推荐做法。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/PostCard/index.scss",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们补充一下在 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 组件里面会用到的样式，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostCard/index.scss"
                    },
                    {
                      "text": " 文件，补充和改进对应的样式如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/PostCard/index.scss",
              "commit": "a3cf715",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们更新了一些样式，然后引入了 "
                    },
                    {
                      "code": true,
                      "text": "taro-ui"
                    },
                    {
                      "text": " 提供给我们的 "
                    },
                    {
                      "code": true,
                      "text": "article"
                    },
                    {
                      "text": " 文章样式。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/app.scss",
          "display": false,
          "id": "g_fljSMZgm",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/app.scss",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  0,
                  7
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "重构完 “首页” 页面组件的所有底层组件，我们开始完成最终的顶层组件，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.jsx"
                    },
                    {
                      "text": " 文件，对相应的内容修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  106,
                  112
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们上面的内容有以下五处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导出了 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " 钩子，然后从 Redux store 中获取了 "
                        },
                        {
                          "code": true,
                          "text": "posts"
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 等属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们将之前定义在 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 组件上的属性进行了一次换血，之前是直接传递 "
                        },
                        {
                          "code": true,
                          "text": "title"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "content"
                        },
                        {
                          "text": " 属性，现在我们传递整个 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 属性，并且额外传递了一个 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": " 属性，用于在 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 里面点击跳转路由时进行标注。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们去掉 "
                        },
                        {
                          "code": true,
                          "text": "PostForm"
                        },
                        {
                          "text": " 组件上面的所有属性，因为我们已经在组件内部定义了它们。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "useEffect"
                        },
                        {
                          "text": " Hooks，在里面定义并调用了 "
                        },
                        {
                          "code": true,
                          "text": "getStorage"
                        },
                        {
                          "text": " 方法，获取了我们保存在 "
                        },
                        {
                          "code": true,
                          "text": "storage"
                        },
                        {
                          "text": " 里面的用户登录信息，如果用户登录了，我们 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 的 action，将这份登录信息保存在 Redux store 里面以供后续使用。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们将 "
                        },
                        {
                          "code": true,
                          "text": "AtFab"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "onClick"
                        },
                        {
                          "text": " 回调函数替换成 "
                        },
                        {
                          "code": true,
                          "text": "handleClickEdit"
                        },
                        {
                          "text": "，在其中对用户点击进行判断，如果用户未登录，那么弹出警告，告知用户，如果用户已经登录，那么就 dispatch 一个 "
                        },
                        {
                          "code": true,
                          "text": "type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "SET_POST_FORM_IS_OPENED"
                        },
                        {
                          "text": " 的 action 去设置 "
                        },
                        {
                          "code": true,
                          "text": "isOpened"
                        },
                        {
                          "text": " 属性，打开发帖的弹出层，允许用户进行发帖操作。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/post/post.jsx",
          "display": true,
          "commit": "a3cf715",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "以重构 “文章详情” 页结束"
                    }
                  ],
                  "id": "xAhBRwv5Tq"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，让我们坚持一下，跑赢重构工作的最后一公里💪！完成 “文章详情” 页的重构。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们打开 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/post/post.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出相应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/post/post.jsx",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  25,
                  28
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的文件做了以下四处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们从 "
                        },
                        {
                          "code": true,
                          "text": "router.params"
                        },
                        {
                          "text": " 中导出了 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": "，因为之前我们在 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 里面点击跳转的路径参数使用了 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们导入并使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks 获取了保存在 Redux store 中的 "
                        },
                        {
                          "code": true,
                          "text": "posts"
                        },
                        {
                          "text": " 属性，然后使用上一步获取到的 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": "，来获取我们最终要渲染的 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们将传给 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 的属性改成上一步获取到的 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "warning",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里的 "
                        },
                        {
                          "code": true,
                          "text": "console.log"
                        },
                        {
                          "text": " 是调试时使用的，生产环境中建议删掉。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "查看效果"
                    }
                  ],
                  "id": "1S03Y93kvP"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，在未登录状态下，会提示请登录："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16f5496be4b20794.gif",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在已登录的情况下，发帖子会显示当前登录用户的头像和昵称："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16f5494e116f47f6.gif",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "Qc3uBeZRHn"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "有幸！到这里，我们 Redux 重构之旅的万里长征就跑完了！让我们来回顾一下我们在这一小节中学到了那些东西。"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们讲解了使用 Redux 的初衷，接着我们安装了相关依赖，然后引出了 Redux 三大核心概念：Store、Action、Reducers，接着我们创建了应用需要的两个 Reducer："
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": "；接着我们将将 Redux 和 React 整合起来；因为 Action 是从组件中 dispatch 出来了，所以我们接下来就开始了组件的重构之旅。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在重构 “我的” 页面组件时，我们按照 Redux 的思想，从它的底层组件三个登录按钮重构开始，接着重构了 "
                        },
                        {
                          "code": true,
                          "text": "LoggedMine"
                        },
                        {
                          "text": " 组件，再往上就是 "
                        },
                        {
                          "code": true,
                          "text": "Header"
                        },
                        {
                          "text": " 组件；重构完 "
                        },
                        {
                          "code": true,
                          "text": "Header"
                        },
                        {
                          "text": " 组件之后，我们接着从 "
                        },
                        {
                          "code": true,
                          "text": "Footer"
                        },
                        {
                          "text": " 组件的底层组件 "
                        },
                        {
                          "code": true,
                          "text": "Logout"
                        },
                        {
                          "text": " 组件开始重构，然后重构了 "
                        },
                        {
                          "code": true,
                          "text": "LoginForm"
                        },
                        {
                          "text": " 组件，最后是 "
                        },
                        {
                          "code": true,
                          "text": "Footer"
                        },
                        {
                          "text": " 组件，重构完 "
                        },
                        {
                          "code": true,
                          "text": "Header"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "Footer"
                        },
                        {
                          "text": " 组件，我们开始重构其上层组件 "
                        },
                        {
                          "code": true,
                          "text": "mine"
                        },
                        {
                          "text": " 页面组件，自此我们就完成了 “我的” 页面的重构。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在重构 “首页” 页面组件时，我们同样按照 Redux 的思想，从它的底层组件 "
                        },
                        {
                          "code": true,
                          "text": "PostForm"
                        },
                        {
                          "text": " 组件开始，接着是 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 组件，最后再回到顶层组件 "
                        },
                        {
                          "code": true,
                          "text": "index"
                        },
                        {
                          "text": " 首页页面组件。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在重构 “帖子详情” 页面组件时，因为其底层组件 "
                    },
                    {
                      "code": true,
                      "text": "PostCard"
                    },
                    {
                      "text": " 已经重构过了，所以我们就直接重构了 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 帖子详情页面组件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "能跟着这么长的文章坚持到这里，我想给你鼓个掌，也希望你能给自己鼓个掌，我想，我可以非常肯定且自豪的颁布给你第一名的奖章了🥇。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "id": "Qqq_8NZhq2",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "a3cf715",
              "hiddenLines": [
                [
                  0,
                  994
                ],
                [
                  1019,
                  1132
                ],
                [
                  1146,
                  1175
                ],
                [
                  1187,
                  4003
                ],
                [
                  4015,
                  5579
                ],
                [
                  5591,
                  6799
                ],
                [
                  6808,
                  8821
                ],
                [
                  8843,
                  10115
                ],
                [
                  10127,
                  11214
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "终于，这漫长的第四篇结束了。在接下来的文章中，我们将接触小程序云后台开发，并在前端接入后台数据。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "b32362b",
      "id": "n7VsQGQs6k",
      "articleId": "b32362b",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "b32362b",
          "id": "E24A8O-DC8",
          "fixed": true,
          "children": [
            {
              "text": "微信小程序云初尝鲜"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "欢迎继续阅读《Taro 小程序开发大型实战》系列，前情回顾："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/34a473b/",
                      "text": "熟悉的 React，熟悉的 Hooks"
                    },
                    {
                      "text": "：我们用 React 和 Hooks 实现了一个非常简单的添加帖子的原型"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/af69225/",
                      "text": "多页面跳转和 Taro UI 组件库"
                    },
                    {
                      "text": "：我们用 Taro 自带的路由功能实现了多页面跳转，并用 Taro UI 组件库升级了应用界面"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/5e10118/",
                      "text": "实现微信和支付宝多端登录"
                    },
                    {
                      "text": "：实现了微信、支付宝以及普通登录和退出登录"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/12/25/5e100f7/",
                      "text": "Hooks + Redux 双剑合璧"
                    },
                    {
                      "text": "：使用了 Hooks 版的 Redux 来进行状态管理"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你敲到这里，会发现我们之后的内容都是纯前端（小程序端）的逻辑，一个完整的可上线小程序应用应该还要有后端，在这篇文章中，我们将使用微信小程序云作为我们的后台，接着我们会引进 "
                },
                {
                  "code": true,
                  "text": "redux-saga"
                },
                {
                  "text": " 来帮助 Redux 优雅的处理异步流程，本文最终的实现效果如下："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c39e737b34.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一篇中，我们将开始引入和实践 Redux 异步工作流，如果你不熟悉 Redux，推荐阅读我们的《Redux 包教包会》系列教程："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/1fe175a/",
                      "text": "Redux 包教包会（一）：解救 React 状态危机"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/d129c56/",
                      "text": "Redux 包教包会（二）：趁热打铁，完全重构"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "link": true,
                      "url": "https://tuture.co/2019/11/28/a3b94eb/",
                      "text": "Redux 包教包会（三）：各司其职，重拾初心"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你希望直接从这一步开始，请运行以下命令："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "bash",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b miniprogram-start https://github.com/tuture-dev/ultra-club.git"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "cd ultra-club"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在前面的代码中，我们通过将数据保存在 Storage 里面来完成数据的持久化，这样可以解决小规模数据的存储和查询问题，一旦数据量变大了，那么查询和存储就需要依靠专门的数据库来解决了，一般我们可以通过自建后端和数据库的方式来解决，但当小程序正越来越火的同时，一种被称为 Serverless 的模式被提出并也逐渐火爆起来，通俗意义上来概括就是 “无后端”，即把后端交给云服务厂商（阿里云、腾讯云、京东云等），开发者只需要专注于前端逻辑，快速交付功能。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "一般的小程序 Serverless 服务都包含三大功能："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "数据库：一般是以 JSON 数据格式进行存储，可以将数据存储在云端数据库中。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "存储：支持文本、图片等用户生成内容的存储，可以获取资源的链接进行使用。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "云函数：可以用 Node.js 进行开发，自己编写对应的后端逻辑，并把写好的代码传到云端，然后在小程序前端使用 API 进行调用。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "关于小程序 Serverless 的详细描述，这里推荐一篇文章，有兴趣的同学可以详细了解一下："
                    },
                    {
                      "link": true,
                      "url": "https://help.aliyun.com/document_detail/122371.html",
                      "text": "什么是小程序Serverless？"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一节中，我们使用微信小程序云作为我们的 “后端”，微信小程序云和小程序账号绑定在一起，一个小程序账号可以开通一个小程序云空间，接下来我们来详细讲解如何开通小程序云。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "开通小程序云"
                }
              ],
              "id": "QckpwJMmGY"
            },
            {
              "type": "numbered-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先确保你注册了小程序的微信公众平台账号："
                    },
                    {
                      "link": true,
                      "url": "https://mp.weixin.qq.com/",
                      "text": "注册地址"
                    },
                    {
                      "text": "。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 1
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "登录之后，在菜单栏开发 > 开发设置里面找到 "
                    },
                    {
                      "code": true,
                      "text": "AppID"
                    },
                    {
                      "text": "，他应该是一个18位字符串。"
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 2
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "使用"
                    },
                    {
                      "link": true,
                      "url": "https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html",
                      "text": "微信开发者工具"
                    },
                    {
                      "text": "打开我们的 "
                    },
                    {
                      "code": true,
                      "text": "ultra-club"
                    },
                    {
                      "text": " 项目文件夹，然后在微信开发者工具菜单栏中选择设置 > 项目设置，打开设置栏："
                    }
                  ],
                  "parent": "numbered-list",
                  "level": 0,
                  "number": 3
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c320a67fee.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "4.找到设置栏的基本信息，AppID 栏将其修改为上面的 AppID 如下："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c323d1b5a2.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "5.当设置了 AppID 之后，我们的开发者工具里面的 “云开发” 按钮应该就会变成可点击状态，找到左上角的 “云开发” 的按钮并点击，类似下面这张图："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c326c93e73.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "4.点击 ”云开发“ 按钮之后会弹出确认框，点击同意就会进到小程序云开发控制台："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c32b029583.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进来之后我们首先看到的是云开发控制台的 ”运营分析“ 界面，这是用来可视化云开发各类资源的使用情况的界面，在这篇教程中我们不会讲解这方面内容。我们主要来讲一下图中标红的部分："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "其中序号为 1 的就是我们的云数据库，它是一个 JSON 数据库，里面存储着我们在开发时需要的数据。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号为2的是存储，即我们可以上传一些文本、图片、音/视频，然后返回给我们访问这些资源的链接。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号3是云函数，即我们可以在这里面管理一些我们编写的的后端 Node.js 逻辑，它运行在云中，我们可以在小程序端通过 API 来调用它们。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号4是代表我们此次的云环境的标识符，可以用于在小程序端以 API 调用云开发资源时标志此时的调用的云环境。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在本篇教程中，我们会用到上面提到的数据库和云函数两项功能。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "创建数据库表"
                }
              ],
              "id": "1pRdlQ0eIV"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "介绍完小程序云的界面，我们马上来动手实践，来创建我们需要的数据库表，因为我们前端逻辑主要分为 "
                },
                {
                  "code": true,
                  "text": "user"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "post"
                },
                {
                  "text": " 两类逻辑，所以我们在数据库中创建两张表："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c32da0e2cc.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们具体来解释一下这个数据库操作界面的含义："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "可以看到，点击云开发控制台左上角的第二个按钮，然后点击图中标红序号为1的 “+” 按钮，创建两个集合 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": "，这样我们就创建好了我们的数据库表。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号为2表示我们可以选中某个集合，点击右键进行删除操作。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号为3表示我们可以给某个集合添加记录，因为是 JSON 数据库，集合中每条记录都可以不一样。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号4表示我们可以选中某条记录，点击右键进行删除操作"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号5表示我们可以给单个记录添加字段"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号6表示我们可以选中单个记录进行删/改操作"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "序号7表示我们可以查询这个集合中某条记录"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "创建 "
                },
                {
                  "code": true,
                  "text": "post"
                },
                {
                  "text": " 记录"
                }
              ],
              "id": "_IY7eiIDCj"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们添加了一条默认的 "
                },
                {
                  "code": true,
                  "text": "post"
                },
                {
                  "text": " 记录，表示之前我们之前小程序端的那条默认数据，这条数据记录了 "
                },
                {
                  "code": true,
                  "text": "post"
                },
                {
                  "text": " 的相关信息："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "_id"
                    },
                    {
                      "text": "： 此条数据的唯一标识符"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "title"
                    },
                    {
                      "text": "： 文章标题"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "content"
                    },
                    {
                      "text": "： 文章内容"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": "： 发表此文章的用户，这里我们为了方便起见，直接保存了用户的完整信息，一般的最佳实践建议是保存此用户的 "
                    },
                    {
                      "code": true,
                      "text": "_id"
                    },
                    {
                      "text": " 属性，然后在查询 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 时，取出此用户的 "
                    },
                    {
                      "code": true,
                      "text": "_id"
                    },
                    {
                      "text": " 属性，然后去查 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 得到用户的完整信息。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "updatedAt"
                    },
                    {
                      "text": "：此条记录的上次更新时间"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "createdAt"
                    },
                    {
                      "text": "：此条记录的创建时间"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "创建 "
                },
                {
                  "code": true,
                  "text": "user"
                },
                {
                  "text": " 记录"
                }
              ],
              "id": "tlYaB98tXa"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "上面我们提到了我们在这条文章记录里面保存了发帖作者信息，那么当然我们的 "
                },
                {
                  "code": true,
                  "text": "user"
                },
                {
                  "text": " 集合中就要新建一条此作者的信息如下："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/16fa48c3652e2e18.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们添加了一条用户记录，它的字段如下："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "_id"
                    },
                    {
                      "text": "：此用户在 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 集合中的唯一标识符"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "avatar"
                    },
                    {
                      "text": "：此用户的头像地址"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "nickName"
                    },
                    {
                      "text": "：此用户的昵称，我们将用它来进行登录"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "createdAt"
                    },
                    {
                      "text": "：创建此记录的时间"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "updatedAt"
                    },
                    {
                      "text": "：上次更新此记录的时间"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "在小程序端初始化小程序云环境"
                }
              ],
              "id": "gi9e_rtPV4"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在开通了小程序云之后，我们还需要在小程序前端代码中进行小程序云环境的初始化设置，这样才能在小程序前端调用小程序的 API。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "打开 "
                },
                {
                  "code": true,
                  "text": "src/index/index.jsx"
                },
                {
                  "text": " 文件，在其中添加如下的代码："
                }
              ]
            },
            {
              "type": "code-block",
              "lang": "JavaScript",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "import Taro, { useEffect } from '@tarojs/taro'"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "// ... 其余代码一致"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "export default function Index() {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ... 其余代码一致"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  useEffect(() => {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    const WeappEnv = Taro.getEnv() === Taro.ENV_TYPE.WEAPP"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    if (WeappEnv) {"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      Taro.cloud.init()"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    }"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  // ...其余代码一致"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  return ("
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    <View className=\"index\">"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "      ..."
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "    </View>"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "  )"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "}"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "可以看到，我们增加了微信小程序环境的获取和判断，当当前环境是微信小程序环境时，我们需要调用 "
                },
                {
                  "code": true,
                  "text": "Taro.cloud.init()"
                },
                {
                  "text": " 来进行小程序云环境的初始化。"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "KrXs0sqGuj"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到现在为止，我们讲解了如何开通小程序云，然后讲解了小程序云控制台界面，同时，我们讲解了将会用到的数据库功能界面，在其中创建了我们应用需要的两张表（集合）："
                },
                {
                  "code": true,
                  "text": "post"
                },
                {
                  "text": " 和 "
                },
                {
                  "code": true,
                  "text": "user"
                },
                {
                  "text": "，并且各自初始化了一条记录。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好了，准备好了小程序云，我们开始准备在应用中接入它了，但在此之前，因为我们要接入小程序云，那么势必要发起异步的请求，这就需要了解一下 Redux 的异步处理流程，在下一节中，我们将使用 "
                },
                {
                  "code": true,
                  "text": "redux-saga"
                },
                {
                  "text": " 中间件来简化 Redux 处理异步的流程。"
                }
              ]
            }
          ],
          "flag": "step_start"
        },
        {
          "file": "package.json",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "Redux 异步工作流解析"
                    }
                  ],
                  "id": "Lthog2BfE-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们来看一下 Redux 的数据流动图："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c3636a719e.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上图中灰色的那条路径是我们之前一直在使用的 Redux 的数据流动图，它是 Redux 同步数据流动图："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "view"
                        },
                        {
                          "text": " 中 "
                        },
                        {
                          "code": true,
                          "text": "dispatch(syncAction)"
                        },
                        {
                          "text": " 一个同步 action 来更新 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 中的数据"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "reducer"
                        },
                        {
                          "text": " 响应 action，更新 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "connect"
                        },
                        {
                          "text": " 将更新后的状态传给 "
                        },
                        {
                          "code": true,
                          "text": "view"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "view"
                        },
                        {
                          "text": " 接收新的数据重新渲染"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "对 Redux 还不了解的同学可以学习一下图雀社区的 "
                        },
                        {
                          "link": true,
                          "url": "https://tuture.co/2019/11/28/1fe175a/",
                          "text": "Redux 包教包会系列教程"
                        },
                        {
                          "text": "哦。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "现在我们要去向小程序云发起请求，这个请求是一个异步的请求，它不会立刻得到响应，所以我们需要一个中间状态（这里我们使用 "
                    },
                    {
                      "code": true,
                      "text": "Saga"
                    },
                    {
                      "text": "）来回处理这个异步请求并得到数据，然后再执行和之前同步请求类似的路径，即为我们上图中绿色的部分+剩下灰色的部分，所以异步工作流程就变成了这样："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "view"
                        },
                        {
                          "text": " 中 "
                        },
                        {
                          "code": true,
                          "text": "dispatch(asyncAction)"
                        },
                        {
                          "text": " 一个异步 action 来获取后端（这里是小程序云）的数据"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 处理这个异步 action，并等待数据响应"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 得到响应的数据，"
                        },
                        {
                          "code": true,
                          "text": "dispatch(syncAction)"
                        },
                        {
                          "text": " 一个同步的 action 来更新 store 的状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "reducer"
                        },
                        {
                          "text": " 响应 action，更新 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "connect"
                        },
                        {
                          "text": " 将更新后的状态传给 "
                        },
                        {
                          "code": true,
                          "text": "view"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "view"
                        },
                        {
                          "text": " 接收新的数据重新渲染"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "图雀社区日后会出一篇教程专门讲解 Redux 异步工作流，这里不会细究整个异步流程的原理，只会讲解如何整合这个异步工作流。敬请期待哦✌️~"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "实战 Redux 异步工作流"
                    }
                  ],
                  "id": "V1CZ7bALrr"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "安装"
                    }
                  ],
                  "id": "oyhCWFePWg"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们使用 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 这个中间件来接管 Redux 异步工作流的处理异步请求部分，首先在项目根目录下安装 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 包："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "Bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install redux-saga"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  47
                ],
                [
                  55,
                  77
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "note",
                  "level": "primary",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 是 "
                        },
                        {
                          "code": true,
                          "text": "redux"
                        },
                        {
                          "text": " 的一个处理异步流程的中间件，那么 Saga 是什么？Saga的定义是“长时间活动的事务”(Long Lived Transaction，后文简称为LLT)。他是普林斯顿大学HECTOR GARCIA-MOLINA教授在1987年的一篇关于分布式数据库的论文中提出来的概念。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "官方把一个 saga 比喻为应用程序中的一个单独的线程，它负责独立的处理副作用，在 JavaScript 中，副作用就是指异步网络请求、本地读取 localStorage/Cookie 等外界操作。"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/store/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "配置 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 中间件"
                    }
                  ],
                  "id": "EUMWOqNIp5"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "安装完之后，我们接着要先配置 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 才能使用它，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/store/index.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/store/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们上面的文件作出以下四处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导出了 "
                        },
                        {
                          "code": true,
                          "text": "createSagaMiddleware"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们从 "
                        },
                        {
                          "code": true,
                          "text": "src/store/sagas"
                        },
                        {
                          "text": " 文件夹下导出了一个 "
                        },
                        {
                          "code": true,
                          "text": "rootSaga"
                        },
                        {
                          "text": "，它组合了所有的 "
                        },
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 文件，这类似组合 "
                        },
                        {
                          "code": true,
                          "text": "reducer"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "combineReducers"
                        },
                        {
                          "text": "，我们将在后续的步骤中编写这些 "
                        },
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们调用 "
                        },
                        {
                          "code": true,
                          "text": "createSagaMiddleware"
                        },
                        {
                          "text": " 生成 "
                        },
                        {
                          "code": true,
                          "text": "sagaMiddleware"
                        },
                        {
                          "text": " 中间件，并将其放置在 "
                        },
                        {
                          "code": true,
                          "text": "middleware"
                        },
                        {
                          "text": " 数组中，这样 Redux 就会注册这个中间件，在响应异步 action 时，"
                        },
                        {
                          "code": true,
                          "text": "sagaMiddleware"
                        },
                        {
                          "text": " 会介入，并将其转交给我们定义的 "
                        },
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 函数来处理。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后在 "
                        },
                        {
                          "code": true,
                          "text": "createStore"
                        },
                        {
                          "text": " 函数里面，当创建 "
                        },
                        {
                          "code": true,
                          "text": "store"
                        },
                        {
                          "text": " 之后，我们调用 "
                        },
                        {
                          "code": true,
                          "text": "sagaMiddleware.run(rootSaga)"
                        },
                        {
                          "text": " 来将所有的 "
                        },
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 跑起来开始监听并响应异步 action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/components/LoginForm/index.jsx",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "View 中发起异步请求"
                    }
                  ],
                  "id": "wQckLpoPaf"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "配置使用 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 中间件，并将 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 跑起来之后，我们可以开始在 React 中 dispatch 异步的 action 了。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "让我们遵照之前的重构顺序，先来搞定登录的异步数据流处理，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/LoginForm/index.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.jsx",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  1
                ],
                [
                  10,
                  57
                ],
                [
                  73,
                  101
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们对上面的代码做出了以下三处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们将之前设置用户登录信息的 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 和设置登录框弹出层的 "
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": " 换成了 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " 常量，代表我们要先向小程序云发起登录请求，然后获取到登录的数据再设置登录信息和关闭登录框弹出层（其实这里也可以直接关闭弹出层，有点失策(⊙o⊙)…）。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们将之前的设置登录信息和关闭登录框弹出层的操作删除掉。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们将 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 一个 "
                        },
                        {
                          "code": true,
                          "text": "action.type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " 的 action，带上我们的需要进行登录的信息 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "增加 Action 常量"
                    }
                  ],
                  "id": "FYJLph2TGJ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在上一步中使用到了 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " 常量，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/constants/user.js"
                    },
                    {
                      "text": "，在其中增加 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " 常量："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const SET_IS_OPENED = 'MODIFY_IS_OPENED'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const SET_LOGIN_INFO = 'SET_LOGIN_INFO'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const LOGIN = 'LOGIN'"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/sagas/user.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "Saga 处理异步请求"
                    }
                  ],
                  "id": "dUE2R3Z0Ig"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Saga 在处理异步请求时有很多种方式，因项目不同，可以采用不同的方式，这里我们选用了官方推荐的最佳实践："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "watcherSaga 监听异步的 action"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "handlerSaga 处理异步的 action"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 同步的 action，更新异步 action 成功/失败的状态"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "运用最近实践之后，之前的 Redux 数据流动图就变成了下面这样子："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c367959787.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了，讲解了 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 处理异步 Action 的最佳实践之后，我们马上来运用最佳实践来编写处理异步 Action 的 Saga 文件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在我们的应用中可能涉及到多个异步请求，所以 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga"
                    },
                    {
                      "text": " 推荐的最佳实践是单独创建一个 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件夹，来存放所有处理异步请求的 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件，以及可能用到的辅助文件。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上一步中，我们从 view 中发出了 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " 异步登录请求，接下来我们要编写对应处理这个 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " 请求的 "
                    },
                    {
                      "code": true,
                      "text": "saga"
                    },
                    {
                      "text": " 文件，在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件夹，并在其中创建 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": "，在其中编写如下内容："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/sagas/user.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的改动主要是创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "watcherSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了登录的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "： "
                        },
                        {
                          "code": true,
                          "text": "watchLogin"
                        },
                        {
                          "text": "，它用来监听 "
                        },
                        {
                          "code": true,
                          "text": "action.type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " 的 action，并且当监听到 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " action 之后，从这个 action 中获取必要的 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": " 数组，然后激活 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": " 去处理对应的登录逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "这里的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "watchLogin"
                        },
                        {
                          "text": " 是一个生成器函数，它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "while"
                        },
                        {
                          "text": " 无限循环，表示在内部持续监听 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在循环内部，我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "take"
                        },
                        {
                          "text": "，它用于监听 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " action，获取 action 中携带的数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了另外一个 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": "，它表示非阻塞的执行 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": "，并将 "
                        },
                        {
                          "code": true,
                          "text": "payload.userInfo"
                        },
                        {
                          "text": " 作为参数传给 "
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "handlerSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了登录的 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": "，它用来处理登录逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": " 也是一个生成器函数，在它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句，用于处理登录请求可能存在的错误情况。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句中，首先是使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供给我们的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "call"
                        },
                        {
                          "text": " 来调用登录的 API："
                        },
                        {
                          "code": true,
                          "text": "userApi.login"
                        },
                        {
                          "text": "，并把 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": " 作为参数传给这个 API。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供的 "
                        },
                        {
                          "code": true,
                          "text": "effects helpers"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "put"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "put"
                        },
                        {
                          "text": " 类似之前在 "
                        },
                        {
                          "code": true,
                          "text": "view"
                        },
                        {
                          "text": " 中的 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 操作，，来 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 了三个 action："
                        },
                        {
                          "code": true,
                          "text": "LOGIN_SUCCESS"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": "，代表更新登录成功的状态，关闭登录框，设置登录信息到 Redux Store 中。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们使用了 Taro UI 提供给我们的消息框，来显示一个 "
                        },
                        {
                          "code": true,
                          "text": "success"
                        },
                        {
                          "text": " 消息。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果登录失败，我们则使用 "
                    },
                    {
                      "code": true,
                      "text": "put"
                    },
                    {
                      "text": " 发起一个 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN_ERROR"
                    },
                    {
                      "text": " 的 action 来更新登录失败的信息到 Redux Store，接着使用了 Taro UI 提供给我们的消息框，来显示一个 "
                    },
                    {
                      "code": true,
                      "text": "error"
                    },
                    {
                      "text": " 消息。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "对生成器函数不了解的同学可以看一下这篇文档："
                        },
                        {
                          "link": true,
                          "url": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Iterators_and_generators",
                          "text": "迭代器和生成器"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "一些额外的工作"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": "，我们还导入了 "
                    },
                    {
                      "code": true,
                      "text": "userApi"
                    },
                    {
                      "text": "，我们将在后面来创建这个 API。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外我们还导入了需要使用的 action 常量："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": "：设置登录信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "LOGIN_SUCCESS"
                        },
                        {
                          "text": "：更新登录成功信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": "：监听登录动作"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "LOGIN_ERROR"
                        },
                        {
                          "text": "：更新登录失败信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "SET_IS_OPENED"
                        },
                        {
                          "text": "：设置登录框开启/关闭的信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们还从 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga/effects"
                    },
                    {
                      "text": " 包中导入了必要的函数："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "call"
                        },
                        {
                          "text": "：在 "
                        },
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 函数中调用其他异步/同步函数，获取结果"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "put"
                        },
                        {
                          "text": "：类似 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": "，用于在 "
                        },
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 函数中发起 action"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "take"
                        },
                        {
                          "text": "：在 "
                        },
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 函数中监听 action，并获取对应 action 所携带的数据"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": "：在 "
                        },
                        {
                          "code": true,
                          "text": "saga"
                        },
                        {
                          "text": " 函数中无阻塞的调用 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "，即调用之后，不会阻塞后续的执行逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们导出了 "
                    },
                    {
                      "code": true,
                      "text": "watchLogin"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 "
                    },
                    {
                      "code": true,
                      "text": "saga"
                    },
                    {
                      "text": " 中心调度文件"
                    }
                  ],
                  "id": "CyVVgYonhI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在上一步中导出了 "
                    },
                    {
                      "code": true,
                      "text": "watchLogin"
                    },
                    {
                      "text": "，它类似 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 里面的单个 "
                    },
                    {
                      "code": true,
                      "text": "reducer"
                    },
                    {
                      "text": " 函数，我们还需要有类似 "
                    },
                    {
                      "code": true,
                      "text": "combineReducers"
                    },
                    {
                      "text": " 组合 "
                    },
                    {
                      "code": true,
                      "text": "reducer"
                    },
                    {
                      "text": " 一样来组合所以的 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "src/sagas"
                    },
                    {
                      "text": " 文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 文件，并在其中编写如下的内容："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import { fork, all } from 'redux-saga/effects'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": " "
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import { watchLogin } from './user'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": " "
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default function* rootSaga() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  yield all(["
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    fork(watchLogin)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  ])"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的文件主要有三处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们从 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga/effects"
                        },
                        {
                          "text": " 导出了 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数 "
                        },
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "all"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们从 "
                        },
                        {
                          "code": true,
                          "text": "user.js"
                        },
                        {
                          "text": " saga 中导入了 "
                        },
                        {
                          "code": true,
                          "text": "watchLogin"
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导出了一个  "
                        },
                        {
                          "code": true,
                          "text": "rootSaga"
                        },
                        {
                          "text": "，它是调度所有 sagas 函数的中心，通过在 "
                        },
                        {
                          "code": true,
                          "text": "all"
                        },
                        {
                          "text": " 函数中传入一个数组，并且 "
                        },
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": " 非阻塞的执行 "
                        },
                        {
                          "code": true,
                          "text": "watchLogin"
                        },
                        {
                          "text": "，进而开始监听和分发异步的 Action，一旦监听到 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " action，则激活 "
                        },
                        {
                          "code": true,
                          "text": "watchLogin"
                        },
                        {
                          "text": " 里面的处理逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "目前 "
                        },
                        {
                          "code": true,
                          "text": "all"
                        },
                        {
                          "text": " 函数接收的数组还只有 "
                        },
                        {
                          "code": true,
                          "text": "fork(watchLogin)"
                        },
                        {
                          "text": "，等到后续加入 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 的异步逻辑时，还会给数组增加多个 "
                        },
                        {
                          "code": true,
                          "text": "fork(watcherSaga)"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/constants/user.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "添加 action 常量"
                    }
                  ],
                  "id": "tUoHoBPK1D"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为在上一步的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " saga 文件中，我们使用到了一些还未定义的常量，所以接下来我们马上来定义它们，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/constants/user.js"
                    },
                    {
                      "text": "，在其中添加对应的常量如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/constants/user.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面除了我们在  “saga 处理异步请求” 中使用到的常量之外，还多了一个 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN_NORMAL"
                    },
                    {
                      "text": " 常量，它主要是用于设置登录状态的默认状态的常量。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/api/user.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "实现请求 login API"
                    }
                  ],
                  "id": "lIdYoiRHQg"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在之前的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " saga 文件里面，我们使用到了 "
                    },
                    {
                      "code": true,
                      "text": "userApi"
                    },
                    {
                      "text": "，它里面封装了用于向后端（这里我们是小程序云）发起请求的逻辑，让我们马上来实现它吧。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们统一将所有的 API 文件放到 "
                    },
                    {
                      "code": true,
                      "text": "api"
                    },
                    {
                      "text": " 文件夹里面，这便于我们日后的代码维护工作，在 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "api"
                    },
                    {
                      "text": " 文件夹，在其中添加 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": " 文件，并在文件中编写内容如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/api/user.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上面的代码中，我们定义了 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 函数，它是一个 "
                    },
                    {
                      "code": true,
                      "text": "async"
                    },
                    {
                      "text": " 函数，用来处理异步逻辑，在 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 函数中，我们对当前的环境进行了判断，且只在微信小程序，即 "
                    },
                    {
                      "code": true,
                      "text": "isWeapp"
                    },
                    {
                      "text": " 的条件下执行登录的操作，对于支付宝小程序和 H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "登录逻辑是一个 "
                    },
                    {
                      "code": true,
                      "text": "try/catch"
                    },
                    {
                      "text": " 语句，用于捕捉可能存在的请求错误，在 "
                    },
                    {
                      "code": true,
                      "text": "try"
                    },
                    {
                      "text": " 代码块中，我们使用了 "
                    },
                    {
                      "code": true,
                      "text": "Taro"
                    },
                    {
                      "text": " 为我们提供的微信小程序云的云函数 API "
                    },
                    {
                      "code": true,
                      "text": "Taro.cloud.callFunction"
                    },
                    {
                      "text": " 来便捷的向小程序云发起云函数调用请求，它的调用体是一个类似下面结构的对象："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "{"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  name: '', // 需要调用的云函数名"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  data: {} // 需要传递给云函数的数据"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们调用了一个 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 云函数，并将 "
                    },
                    {
                      "code": true,
                      "text": "userInfo"
                    },
                    {
                      "text": " 作为参数传给云函数，用于在云函数中使用用户信息来注册用户并保存到数据库，我们将在下一节中实现这个云函数。"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "想了解更多关于微信小程序云函数的内容，可以查阅微信小程序云函数文档："
                        },
                        {
                          "link": true,
                          "url": "https://developers.weixin.qq.com/miniprogram/dev/wxcloud/basis/capabilities.html#%E4%BA%91%E5%87%BD%E6%95%B0",
                          "text": "文档地址"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们使用解构的方法，从返回体里面拿到了 "
                    },
                    {
                      "code": true,
                      "text": "result"
                    },
                    {
                      "text": " 对象，然后取出其中的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 对象并作为 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " API 函数的返回值。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果调用失败，则打印错误。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们定义了一个 "
                    },
                    {
                      "code": true,
                      "text": "userApi"
                    },
                    {
                      "text": " 对象，用于存放所有和用户逻辑有个的函数，并添加 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " API 属性然后将其导出，这样在 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " saga 函数里面就可以导入 "
                    },
                    {
                      "code": true,
                      "text": "userApi"
                    },
                    {
                      "text": " 然后通过 "
                    },
                    {
                      "code": true,
                      "text": "userApi.login"
                    },
                    {
                      "text": " 的方式来调用 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " API 处理登录逻辑了。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 API 默认导出文件"
                    }
                  ],
                  "id": "gACyRgWkgV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们创建了 "
                    },
                    {
                      "code": true,
                      "text": "src/api/user.js"
                    },
                    {
                      "text": " 文件，我们需要建立一个统一的导出所有 API 文件的默认文件，方便统一分发所有的 API，在 "
                    },
                    {
                      "code": true,
                      "text": "src/api"
                    },
                    {
                      "text": " 文件夹下建立 "
                    },
                    {
                      "code": true,
                      "text": "index.js"
                    },
                    {
                      "text": " 文件，并在其中编写如下内容："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import userApi from './user'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export { userApi }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们从 "
                    },
                    {
                      "code": true,
                      "text": "user.js"
                    },
                    {
                      "text": " 里面默认导出了 "
                    },
                    {
                      "code": true,
                      "text": "userApi"
                    },
                    {
                      "text": "，并将其加为 "
                    },
                    {
                      "code": true,
                      "text": "export"
                    },
                    {
                      "text": " 导出的对象的属性。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "project.config.json",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "配置云函数开发环境"
                    }
                  ],
                  "id": "RasznhKhkY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在上一小节中使用 Taro 为我们提供的云函数 API 调用了一个 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 云函数，现在我们马上来实现这个云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "微信小程序文档中要求我们在项目根目录下面建立一个一个存储云函数的文件夹，然后在 "
                    },
                    {
                      "code": true,
                      "text": "project.config.json"
                    },
                    {
                      "text": " 的 "
                    },
                    {
                      "code": true,
                      "text": "cloudfunctionRoot"
                    },
                    {
                      "text": " 字段的值指定为这个目录，这样小程序开发者工具就可以识别此目录为存放云函数的目录，并做特殊的标志处理。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在项目根目录下创建了一个 "
                    },
                    {
                      "code": true,
                      "text": "functions"
                    },
                    {
                      "text": " 文件夹，它与 "
                    },
                    {
                      "code": true,
                      "text": "src"
                    },
                    {
                      "text": " 文件夹是同级的："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "."
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── LICENSE"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── README.md"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── config"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── dist"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── functions"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── node_modules"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── package.json"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── project.config.json"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── src"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── tuture-assets"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── tuture-build"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── tuture.yml"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "└── yarn.lock"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着我们在根目录的 "
                    },
                    {
                      "code": true,
                      "text": "project.config.json"
                    },
                    {
                      "text": " 文件中添加 "
                    },
                    {
                      "code": true,
                      "text": "cloudfunctionRoot"
                    },
                    {
                      "text": " 字段，并将其设置为 "
                    },
                    {
                      "code": true,
                      "text": "'functions/'"
                    },
                    {
                      "text": " 如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "project.config.json",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，当我们创建了上面的文件夹并设置了 "
                    },
                    {
                      "code": true,
                      "text": "project.config.json"
                    },
                    {
                      "text": " 之后，我们的小程序开发者工具会变成下面这个样子："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c3678dd1f3.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们创建的那个 "
                    },
                    {
                      "code": true,
                      "text": "functions"
                    },
                    {
                      "text": " 文件夹多了一个额外的云图标，并且文件夹的命名从 "
                    },
                    {
                      "code": true,
                      "text": "functions"
                    },
                    {
                      "text": " 变成了 "
                    },
                    {
                      "code": true,
                      "text": "functions | ultra-club"
                    },
                    {
                      "text": "，竖杠右边的是我们当前的小程序环境。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "并且当我们在小程序开发者工具里面右键点击这个 "
                    },
                    {
                      "code": true,
                      "text": "functions"
                    },
                    {
                      "text": " 文件夹时，会出现菜单弹框，允许我们进行云函数相关的操作："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c36eec1ed2.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们可以看到有很多操作，这里我们主要会用到如下几个操作："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "新建 Node.js 云函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "开启云函数本地调试"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "其它的操作等你走完整个小程序云开发的流程之后，当需要编写更加复杂的业务逻辑时都会遇到，具体可以参考小程序云的文档："
                        },
                        {
                          "link": true,
                          "url": "https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/functions.html",
                          "text": "文档地址"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "必须先开通小程序云开发环境才能使用云函数。具体步骤可以参考我们在 “开通小程序云” 这一节中的讲解。"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/login/package.json",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 login 云函数"
                    }
                  ],
                  "id": "GZuurGeyAu"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "讲解了微信小程序云函数的配置，终于到了创建云函数的阶段了，我们在小程序开发者工具中右键点击 "
                    },
                    {
                      "code": true,
                      "text": "functions"
                    },
                    {
                      "text": " 文件夹，然后选择新建 Node.js 云函数，输入 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": "，然后回车创建，会看到小程序开发者工具自动帮我们创建了如下的代码文件："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c373575d07.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，一个云函数是一个独立的 Node.js 模块，它处理一类逻辑。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们先来看一下 "
                    },
                    {
                      "code": true,
                      "text": "package.json"
                    },
                    {
                      "text": " 文件如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/login/package.json",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，在添加云函数时，小程序开发者工具默认为我们添加了一项 "
                    },
                    {
                      "code": true,
                      "text": "wx-server-sdk"
                    },
                    {
                      "text": " 依赖，我们在云函数中需要用到它内置的相关 API 来操作小程序云。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了使这个 Node.js 云函数/项目跑起来，我们需要安装依赖，进入 "
                    },
                    {
                      "code": true,
                      "text": "functions/login"
                    },
                    {
                      "text": " 目录，在目录下运行 "
                    },
                    {
                      "code": true,
                      "text": "npm install"
                    },
                    {
                      "text": " 命令来安装依赖。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/login/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "了解默认生成的云函数"
                    }
                  ],
                  "id": "YTooaQj3vd"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当创建了云函数，并安装了依赖之后，我们马上来揭开云函数的神秘面纱，打开 "
                    },
                    {
                      "code": true,
                      "text": "functions/login/index.js"
                    },
                    {
                      "text": "，可以看到如下代码："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// 云函数入口文件"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const cloud = require('wx-server-sdk')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "cloud.init()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// 云函数入口函数"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "exports.main = async (event, context) => {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const wxContext = cloud.getWXContext()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  return {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    event,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    openid: wxContext.OPENID,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    appid: wxContext.APPID,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    unionid: wxContext.UNIONID,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，默认生成的代码主要做了下面几项工作："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "导入 "
                        },
                        {
                          "code": true,
                          "text": "wx-server-sdk"
                        },
                        {
                          "text": " 包，并命名为 "
                        },
                        {
                          "code": true,
                          "text": "cloud"
                        },
                        {
                          "text": "，所有我们需要操作小程序云的方法都绑定在 "
                        },
                        {
                          "code": true,
                          "text": "cloud"
                        },
                        {
                          "text": " 对象上。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着调用 "
                        },
                        {
                          "code": true,
                          "text": "cloud.init()"
                        },
                        {
                          "text": " 来初始化云函数的云开发环境，我们将在后续实现 "
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": " 逻辑时设置环境。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后是云函数的入口函数，它默认以 "
                        },
                        {
                          "code": true,
                          "text": "main"
                        },
                        {
                          "text": " 函数作为导出函数，是一个 "
                        },
                        {
                          "code": true,
                          "text": "async"
                        },
                        {
                          "text": " 函数，我们可以在函数内部以同步的方式处理异步逻辑，可以看到，这个函数接收两个参数："
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "context"
                        },
                        {
                          "text": "，"
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": " 指的是触发云函数的事件，当小程序端调用云函数时，event 就是小程序端调用云函数时传入的参数，外加后端自动注入的小程序用户的 "
                        },
                        {
                          "code": true,
                          "text": "openid"
                        },
                        {
                          "text": " 和小程序的 "
                        },
                        {
                          "code": true,
                          "text": "appid"
                        },
                        {
                          "text": "。"
                        },
                        {
                          "code": true,
                          "text": "context"
                        },
                        {
                          "text": " 对象包含了此处调用的调用信息和运行状态，可以用它来了解服务运行的情况。默认生成的函数内部代码主要是获取了此时微信上下文信息，然后与 "
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": " 对象一同返回，这样当我们在小程序端以 "
                        },
                        {
                          "code": true,
                          "text": "Taro.cloud.callFunction"
                        },
                        {
                          "text": " 调用这个函数获得的返回值就是包含微信上下文信息和 "
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": " 的对象。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "编写 login 云函数"
                    }
                  ],
                  "id": "HoxURoZU8F"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "了解了云函数的具体逻辑，我们马上在云函数中来实现我们具体的登录逻辑，打开 "
                    },
                    {
                      "code": true,
                      "text": "functions/login/index.js"
                    },
                    {
                      "text": "，对其中的代码做出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/login/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码改动主要有以下六处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们给 "
                        },
                        {
                          "code": true,
                          "text": "cloud.init()"
                        },
                        {
                          "text": " 传入了环境参数，我们使用了内置的 "
                        },
                        {
                          "code": true,
                          "text": "cloud.DYNAMIC_CURRENT_ENV"
                        },
                        {
                          "text": "，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里 "
                        },
                        {
                          "code": true,
                          "text": "functions"
                        },
                        {
                          "text": " 文件夹时选择的环境。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们通过 "
                        },
                        {
                          "code": true,
                          "text": "cloud.database()"
                        },
                        {
                          "text": " 生成了数据实例 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": "，用于之后在函数体中便捷的操作云数据库。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着就是 "
                        },
                        {
                          "code": true,
                          "text": "main"
                        },
                        {
                          "text": " 函数体，我们首先从 "
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": " 对象中取到了在小程序的调用 "
                        },
                        {
                          "code": true,
                          "text": "Taro.cloud.callFunction"
                        },
                        {
                          "text": " 传过来的 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": " 数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后，跟着取数据的是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句块，用于捕获错误，在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句块中，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": " 的查询操作："
                        },
                        {
                          "code": true,
                          "text": "db.collection('user').where().get()"
                        },
                        {
                          "text": "，表示查询 "
                        },
                        {
                          "code": true,
                          "text": "where"
                        },
                        {
                          "text": " 条件的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 表数据，它查出来应该是个数组，如果不存在满足 "
                        },
                        {
                          "code": true,
                          "text": "where"
                        },
                        {
                          "text": " 条件的，那么是一个空数组，如果存在满足 "
                        },
                        {
                          "code": true,
                          "text": "where"
                        },
                        {
                          "text": " 条件的，那么返回一个 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 数组。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们判断是否查询出来的用户数组为空，如果为空表示用户还未注册过，则创建一个新用户，如果不为空，那么返回查询到的第一个元素。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "这里我们使用的 "
                        },
                        {
                          "code": true,
                          "text": "db.collection('user').add()"
                        },
                        {
                          "text": "，用于添加一个 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 数据，然后在 "
                        },
                        {
                          "code": true,
                          "text": "add"
                        },
                        {
                          "text": " 方法中传入 "
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": " 字段，表示设置此用户的初始值，这里我们额外使用了 "
                        },
                        {
                          "code": true,
                          "text": "db.serverDate()"
                        },
                        {
                          "text": " 用于记录创建此用户的时间和更新此用户的时间，方便之后做条件查询；因为向数据库添加一个记录之后只会返回此记录的 "
                        },
                        {
                          "code": true,
                          "text": "_id"
                        },
                        {
                          "text": "，所以我们需要一个额外的操作 "
                        },
                        {
                          "code": true,
                          "text": "db.collection('user').doc()"
                        },
                        {
                          "text": " 来获取此条记录，这个 "
                        },
                        {
                          "code": true,
                          "text": "doc"
                        },
                        {
                          "text": " 用于获取指定的记录引用，返回的是这条数据，而不是一个数组。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里关于云数据库的相关操作，可以查阅微信小程序云文档，在文档里提供了详尽的实例："
                        },
                        {
                          "link": true,
                          "url": "https://developers.weixin.qq.com/miniprogram/dev/wxcloud/guide/database.html#%E6%95%B0%E6%8D%AE%E5%BA%93",
                          "text": "数据库文档"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/reducers/user.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "适配异步 action 的 reducer"
                    }
                  ],
                  "id": "DS0pDbhpVS"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在前面处理登录时，在组件内部 "
                    },
                    {
                      "code": true,
                      "text": "dispatch"
                    },
                    {
                      "text": " 了 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " action，在处理异步 action 的 saga 函数中，使用 "
                    },
                    {
                      "code": true,
                      "text": "put"
                    },
                    {
                      "text": " 发起了一系列更新 store 中登录状态的 action，现在我们马上来实现响应这些 action 的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": "，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers/user.js"
                    },
                    {
                      "text": "，对其中的代码做出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/reducers/user.js",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  20,
                  24
                ],
                [
                  48,
                  50
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "看一看到上面的代码主要有三处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导入了必要的 action 常量"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们给 "
                        },
                        {
                          "code": true,
                          "text": "INITIAL_STATE"
                        },
                        {
                          "text": " 增加了几个字段："
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "isLogin"
                        },
                        {
                          "text": "：用于标志登录过程中是否在执行登录逻辑，"
                        },
                        {
                          "code": true,
                          "text": "true"
                        },
                        {
                          "text": " 表示正在执行登录中，"
                        },
                        {
                          "code": true,
                          "text": "false"
                        },
                        {
                          "text": " 表示登录逻辑执行完毕"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "loginStatus"
                        },
                        {
                          "text": "：用于标志登录过程中的状态：开始登录（"
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": "）、登录成功（"
                        },
                        {
                          "code": true,
                          "text": "LOGIN_SUCCESS"
                        },
                        {
                          "text": "）、登录失败（"
                        },
                        {
                          "code": true,
                          "text": "LOGIN_ERROR"
                        },
                        {
                          "text": "）"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后就是 "
                    },
                    {
                      "code": true,
                      "text": "switch"
                    },
                    {
                      "text": " 语句中响应 action，更新相应的状态。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/components/WeappLoginButton/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "收尾 User 剩下的异步逻辑"
                    }
                  ],
                  "id": "3q6yEUrkFX"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "微信登录"
                    }
                  ],
                  "id": "hMJ4uadXWI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在上一节 “实现 Redux 异步逻辑” 中，着重实现了普通登录按钮的异步逻辑，现在我们来收尾一下使用微信登录的逻辑。打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/WeappLoginButton/index.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/components/WeappLoginButton/index.js",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  1
                ],
                [
                  10,
                  13
                ],
                [
                  34,
                  48
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码主要有一下三处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们删掉了之前直接设置登录信息的 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 常量，取而代之的是 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " 常量。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们删掉了直接设置 "
                        },
                        {
                          "code": true,
                          "text": "storage"
                        },
                        {
                          "text": " 缓存的代码逻辑"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们将之前发起 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " action 的逻辑改为了发起 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " 异步 action，来处理登录，并且组装了 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": " 对象作为 "
                        },
                        {
                          "code": true,
                          "text": "payload"
                        },
                        {
                          "text": " 对象的属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为我们在上一节 “实现 Redux 异步逻辑” 中已经处理了 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " 的整个异步数据流逻辑，所以这里只需要 "
                    },
                    {
                      "code": true,
                      "text": "dispatch"
                    },
                    {
                      "text": " 对应的 "
                    },
                    {
                      "code": true,
                      "text": "LOGIN"
                    },
                    {
                      "text": " action 就可以处理微信登录的异步逻辑了。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/pages/mine/mine.jsx",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "优化 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 逻辑顶层组件"
                    }
                  ],
                  "id": "YmrKxSp5on"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们来收尾一下 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 逻辑的顶层组件，"
                    },
                    {
                      "code": true,
                      "text": "mine"
                    },
                    {
                      "text": " 页面，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/mine/mine.jsx"
                    },
                    {
                      "text": "，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.jsx",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  7,
                  7
                ],
                [
                  41,
                  50
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们对上面的代码做出了三处修改如下："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导出了 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks，从 Redux Store 里获取到了 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，因为我们在 “实现 Redux 异步逻辑” 一节中，保存了 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 到 Redux Store 的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 逻辑部分，所以这里我们从 "
                        },
                        {
                          "code": true,
                          "text": "storage"
                        },
                        {
                          "text": " 获取到了 "
                        },
                        {
                          "code": true,
                          "text": "_id"
                        },
                        {
                          "text": "，然后给之前的 "
                        },
                        {
                          "code": true,
                          "text": "SET_LOGIN_INFO"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "payload"
                        },
                        {
                          "text": " 带上了 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 属性。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们判断一下 "
                        },
                        {
                          "code": true,
                          "text": "getStorage"
                        },
                        {
                          "text": " 的逻辑，只有当此时 Redux Store 里面没有数据时，我们才去获取 storage 里面的数据来更新 Redux Store。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/components/Logout/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "扩充 Logout 的清空数据范围"
                    }
                  ],
                  "id": "uB9z47yNqy"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为在 Redux Store 里面的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 属性中多出了一个 "
                    },
                    {
                      "code": true,
                      "text": "userId"
                    },
                    {
                      "text": " 属性，所以我们在  "
                    },
                    {
                      "code": true,
                      "text": "Logout"
                    },
                    {
                      "text": " 组件里 "
                    },
                    {
                      "code": true,
                      "text": "dispatch"
                    },
                    {
                      "text": " action 时，要清空 "
                    },
                    {
                      "code": true,
                      "text": "userId"
                    },
                    {
                      "text": " 如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/components/Logout/index.js",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  17
                ],
                [
                  25,
                  36
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "小结"
                    }
                  ],
                  "id": "ReLf3AX-y3"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "大功告成！到这里我们就把  "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 逻辑接入了小程序云，并能成功实现微信小程序端的小程序云登录，让我们马上来尝试一下预览本地调试时的效果预览图："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c39e737b34.gif",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们在本地调试云函数，以及小程序端接入云函数的步骤如下："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们首先右键点击 "
                        },
                        {
                          "code": true,
                          "text": "functions"
                        },
                        {
                          "text": " 文件夹，开启了 “云函数本地调试”。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着选中我们的 "
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": " 云函数，然后点击开启本地调试，这样我们就可以在本地调试云函数了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们在小程序端点击微信登录，然后我们会看到小程序开发者工具控制台和云函数调试控制台都会答应此时云函数的运行情况。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后，我们登陆成功，成功在小程序端显示了登录的昵称和头像，并且检查云开发 > 数据库 > user 表，它确实增加了一个对应的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 记录，说明我们成功接通了小程序端和小程序云。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "一般在本地调试完后，我们就可以将云函数上传到云端，这样，我们就可以不用开启本地调试才能使用云函数了，这对于发布上线的小程序是必须的，具体上传云函数可以在小程序开发者工具中右键点击 "
                    },
                    {
                      "code": true,
                      "text": "functions"
                    },
                    {
                      "text": " 文件夹下对应的云函数，然后选择 “上传并部署：云端安装所以依赖”："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/16fa48c39e00680f.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在这篇教程中，我们实现了 User 逻辑的异步流程，在下一篇教程中，我们将实现 Post 逻辑的异步流程，敬请期待！"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/components/PostForm/index.jsx",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-two",
                  "children": [
                    {
                      "text": "“六脉神剑” 搞定 createPost 异步逻辑"
                    }
                  ],
                  "id": "myaxHuFDVV"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上一篇文章中，我们将我们两大逻辑之一 User 部分接入了 Redux 异步处理流程，接着接入了微信小程序云，使得 User 逻辑可以在云端永久保存，好不自在：），两兄弟一个得了好处，另外一个不能干瞪眼对吧？在这一篇教程中，我们想办法把 User 另外一个兄弟 Post 捞上来，也把 Redux 异步流程和微信小程序给它整上，这样就齐活了😆"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们首先来看一看最终的完成效果："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705ae77228e6165.gif",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "不知道看到这里的读者有没有发现上篇文章其实打造了一套讲解模式，即按照如下的 “六步流程” 来讲解，我们也称为 “六脉神剑” 讲解法："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "将组件中的同步逻辑重构到异步逻辑"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "声明和补充对应需要的异步 "
                        },
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 文件"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "定义 "
                        },
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 需要的常量文件"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "定义 "
                        },
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 涉及到的前端 API 文件"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "创建对于的微信小程序云函数，并编写对应的 Node.js 处理逻辑"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "定义对应的 "
                        },
                        {
                          "code": true,
                          "text": "reducers"
                        },
                        {
                          "text": " 文件"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "如此往复"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们上面的讲解顺序实际上是按照前端数据流的流动来进行的，我们对标上面的讲解逻辑来看一下前端数据流是如何流动的："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "从组件中通过对应的常量发起异步请求"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 监听到对应的异步请求，开始处理流程"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 调用对应的前端 API 文件向微信小程序云发起请求"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "微信小程序云函数处理对应的 API 请求，返回数据"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "sagas"
                        },
                        {
                          "text": " 中获取到对应的数据，"
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " action 到对应的 "
                        },
                        {
                          "code": true,
                          "text": "reducers"
                        },
                        {
                          "text": " 处理逻辑"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "reducers"
                        },
                        {
                          "text": " 接收数据，开始更新本地 Redux Store 中的 "
                        },
                        {
                          "code": true,
                          "text": "state"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "组件中重新渲染"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，了解了讲解逻辑和对应前端数据流动逻辑之后，我们马上来实践这套逻辑，把 User 逻辑的好兄弟 Post 逻辑搞定。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第一剑："
                    },
                    {
                      "code": true,
                      "text": "PostForm"
                    },
                    {
                      "text": " 组件中发起异步请求"
                    }
                  ],
                  "id": "ZEpEEPPD-e"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先从创建帖子逻辑动刀子，我们将创建帖子接入异步逻辑并接通小程序云，让文章上云。打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/PostForm/index.jsx"
                    },
                    {
                      "text": " ，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/components/PostForm/index.jsx",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  2
                ],
                [
                  20,
                  29
                ],
                [
                  61,
                  86
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容做了如下四处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们现在是接收用户的文章输入数据然后向小程序云发起创建文章的请求，所以我们将之前的 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " SET_POSTS Action 改为 CREATE_POST Action，并且将之前的 action payload 简化为 "
                        },
                        {
                          "code": true,
                          "text": "postData"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": "，因为我们可以通过小程序云数据库查询 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 得到创建文章的用户信息，所以不需要再携带用户的数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，因为我们不再需要用户的 "
                        },
                        {
                          "code": true,
                          "text": "avatar"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 数据，所以我们删掉了对应的 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " 语句。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，因为请求是异步的，所以需要等待请求完成之后再设置对应的发表文章的状态以及发表文章弹出层状态，所以我们删掉了对应的 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " SET_POST_FORM_IS_OPENED Action 逻辑以及 "
                        },
                        {
                          "code": true,
                          "text": " Taro.atMessage"
                        },
                        {
                          "text": " 逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们删掉不需要的常量 "
                        },
                        {
                          "code": true,
                          "text": "SET_POSTS"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "SET_POST_FORM_IS_OPENED"
                        },
                        {
                          "text": "，然后导入异步创建文章的常量 "
                        },
                        {
                          "code": true,
                          "text": "CREATE_POST"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "增加 Action 常量"
                    }
                  ],
                  "id": "NuHCTgKtRJ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在上一步中使用到了 "
                    },
                    {
                      "code": true,
                      "text": "CREATE_POST"
                    },
                    {
                      "text": " 常量，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/constants/post.js"
                    },
                    {
                      "text": "，在其中增加 "
                    },
                    {
                      "code": true,
                      "text": "CREATE_POST"
                    },
                    {
                      "text": " 常量："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const CREATE_POST = 'CREATE_POST'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "到这里，我们的 “六步流程” 讲解法就走完了第一步，即从组件中发起对应的异步请求，这里我们是发出的 "
                    },
                    {
                      "code": true,
                      "text": "action.type"
                    },
                    {
                      "text": " 为 "
                    },
                    {
                      "code": true,
                      "text": "CREATE_POST"
                    },
                    {
                      "text": " 的异步请求。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第二剑： 声明和补充对应需要的异步 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "id": "HelMkqdrQ4"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 “第一剑” 中，我们从组件中 dispatch 了 action.type 为 "
                    },
                    {
                      "code": true,
                      "text": "CREATE_POST"
                    },
                    {
                      "text": " 的异步 Action，接下来我们要做的就是在对应的 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件中补齐响应这个异步 action 的 sagas。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "src/sagas/"
                    },
                    {
                      "text": " 文件夹下面创建 "
                    },
                    {
                      "code": true,
                      "text": "post.js"
                    },
                    {
                      "text": " 文件，并在其中编写如下创建文章的逻辑："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import Taro from '@tarojs/taro'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import { call, put, take, fork } from 'redux-saga/effects'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import { postApi } from '../api'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  CREATE_POST,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  POST_SUCCESS,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  POST_ERROR,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  SET_POSTS,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  SET_POST_FORM_IS_OPENED,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "} from '../constants'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function* createPost(postData, userId) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  try {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const post = yield call(postApi.createPost, postData, userId)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 其实以下三步可以合成一步，但是这里为了讲解清晰，将它们拆分成独立的单元"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 发起发帖成功的 action"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: POST_SUCCESS })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 关闭发帖框弹出层"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: SET_POST_FORM_IS_OPENED, payload: { isOpened: false } })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 更新 Redux store 数据"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      type: SET_POSTS,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      payload: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        posts: [post],"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 提示发帖成功"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    Taro.atMessage({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      message: '发表文章成功',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      type: 'success',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  } catch (err) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('createPost ERR: ', err)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 发帖失败，发起失败的 action"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: POST_ERROR })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 提示发帖失败"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    Taro.atMessage({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      message: '发表文章失败',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      type: 'error',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function* watchCreatePost() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  while (true) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const { payload } = yield take(CREATE_POST)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('payload', payload)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield fork(createPost, payload.postData, payload.userId)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export { watchCreatePost }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的改动主要是创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "watcherSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了登录的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "： "
                        },
                        {
                          "code": true,
                          "text": "watchCreatePost "
                        },
                        {
                          "text": "，它用来监听 "
                        },
                        {
                          "code": true,
                          "text": "action.type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "CREATE_POST "
                        },
                        {
                          "text": " 的 action，并且当监听到 "
                        },
                        {
                          "code": true,
                          "text": "CREATE_POST "
                        },
                        {
                          "text": " action 之后，从这个 action 中获取必要的 "
                        },
                        {
                          "code": true,
                          "text": "postData "
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 数据，然后激活 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "createPost "
                        },
                        {
                          "text": " 去处理对应的创建帖子的逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "这里的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "watchCreatePost"
                        },
                        {
                          "text": " 是一个生成器函数，它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "while"
                        },
                        {
                          "text": " 无限循环，表示在内部持续监听 "
                        },
                        {
                          "code": true,
                          "text": "CREATE_POST"
                        },
                        {
                          "text": " action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在循环内部，我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "take"
                        },
                        {
                          "text": "，它用于监听 "
                        },
                        {
                          "code": true,
                          "text": "CREATE_POST"
                        },
                        {
                          "text": " action，获取 action 中携带的数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了另外一个 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": "，它表示非阻塞的执行 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "createPost"
                        },
                        {
                          "text": "，并将 "
                        },
                        {
                          "code": true,
                          "text": "payload.postData"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "payload.userId"
                        },
                        {
                          "text": " 作为参数传给 "
                        },
                        {
                          "code": true,
                          "text": "createPost"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "handlerSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了创建帖子的 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "createPost"
                        },
                        {
                          "text": "，它用来处理创建逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "createPost"
                        },
                        {
                          "text": " 也是一个生成器函数，在它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句，用于处理创建帖子请求可能存在的错误情况。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句中，首先是使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供给我们的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "call"
                        },
                        {
                          "text": " 来调用登录的 API："
                        },
                        {
                          "code": true,
                          "text": "postApi.createPost"
                        },
                        {
                          "text": "，并把 "
                        },
                        {
                          "code": true,
                          "text": "postData"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 作为参数传给这个 API。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们使用了 Taro UI 提供给我们的消息框，来显示一个 "
                        },
                        {
                          "code": true,
                          "text": "success"
                        },
                        {
                          "text": " 消息。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果发帖失败，我们则使用 "
                    },
                    {
                      "code": true,
                      "text": "put"
                    },
                    {
                      "text": " 发起一个 "
                    },
                    {
                      "code": true,
                      "text": "POST_ERROR "
                    },
                    {
                      "text": " 的 action 来更新创建帖子失败的信息到 Redux Store，接着使用了 Taro UI 提供给我们的消息框，来显示一个 "
                    },
                    {
                      "code": true,
                      "text": "error"
                    },
                    {
                      "text": " 消息。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "一些额外的工作"
                    }
                  ],
                  "id": "YWqeny6nI5"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": "，我们还导入了 "
                    },
                    {
                      "code": true,
                      "text": "postApi"
                    },
                    {
                      "text": "，我们将在后面来创建这个 API。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外我们还导入了需要使用的 action 常量："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "POST_SUCCESS "
                        },
                        {
                          "text": "：设置处理帖子逻辑成功信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "POST_ERROR "
                        },
                        {
                          "text": "：设置处理帖子逻辑失败信息"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "SET_POSTS"
                        },
                        {
                          "text": "：将新帖子添加到 Redux Store"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "CREATE_POST"
                        },
                        {
                          "text": "： 相应创建帖子的常量"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "SET_POST_FORM_IS_OPENED"
                        },
                        {
                          "text": "：更新发帖框的开闭逻辑"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里的 "
                    },
                    {
                      "code": true,
                      "text": "POST_SUCCESS"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "POST_ERROR"
                    },
                    {
                      "text": " 我们还没有创建，我们将马上在 “下一剑” 中创建它。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "以及一些 "
                    },
                    {
                      "code": true,
                      "text": "redux-saga/effects"
                    },
                    {
                      "text": " 相关的 helper 函数，我们已经在之前的内容中详细讲过了，这里就不再赘述了。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "加入 saga 中心调度文件"
                    }
                  ],
                  "id": "xR6XwmEmbO"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们像之前将 "
                    },
                    {
                      "code": true,
                      "text": "watchLogin"
                    },
                    {
                      "text": " 等加入到 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 中心调度文件一样，将我们创建好的 "
                    },
                    {
                      "code": true,
                      "text": "watchCreatePost"
                    },
                    {
                      "text": " 也加入进去："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// ...之前的逻辑"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import { watchCreatePost } from './post'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default function* rootSaga() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  yield all(["
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "   // ... 之前的逻辑"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    fork(watchCreatePost)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  ])"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第三剑：定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 需要的常量文件"
                    }
                  ],
                  "id": "gjCEz7Y1C9"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/constants/post.js"
                    },
                    {
                      "text": " 文件，定义我们之前创建的常量文件如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const POST_SUCCESS = 'POST_SUCCESS'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const POST_ERROR = 'POST_ERROR'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第四剑：定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 涉及到的前端 API 文件"
                    }
                  ],
                  "id": "yJYbSW8ej6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在之前的 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " saga 文件里面，我们使用到了 "
                    },
                    {
                      "code": true,
                      "text": "postApi"
                    },
                    {
                      "text": "，它里面封装了用于向后端（这里我们是小程序云）发起和帖子有关请求的逻辑，让我们马上来实现它吧。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "src/api/"
                    },
                    {
                      "text": " 文件夹下添加 "
                    },
                    {
                      "code": true,
                      "text": "post.js"
                    },
                    {
                      "text": " 文件，并在文件中编写内容如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import Taro from '@tarojs/taro'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "async function createPost(postData, userId) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const isAlipay = Taro.getEnv() === Taro.ENV_TYPE.ALIPAY"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  console.log('postData', postData, userId)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 针对微信小程序使用小程序云函数，其他使用小程序 RESTful API"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  try {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    if (isWeapp) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      const { result } = await Taro.cloud.callFunction({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        name: 'createPost',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        data: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          postData,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          userId,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      return result.post"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  } catch (err) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.error('createPost ERR: ', err)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const postApi = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  createPost,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default postApi;"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上面的代码中，我们定义了 "
                    },
                    {
                      "code": true,
                      "text": "createPost "
                    },
                    {
                      "text": " 函数，它是一个 "
                    },
                    {
                      "code": true,
                      "text": "async"
                    },
                    {
                      "text": " 函数，用来处理异步逻辑，在 "
                    },
                    {
                      "code": true,
                      "text": "createPost "
                    },
                    {
                      "text": " 函数中，我们对当前的环境进行了判断，且只在微信小程序，即 "
                    },
                    {
                      "code": true,
                      "text": "isWeapp"
                    },
                    {
                      "text": " 的条件下执行创建帖子的操作，对于支付宝小程序和 H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建帖子逻辑是一个 "
                    },
                    {
                      "code": true,
                      "text": "try/catch"
                    },
                    {
                      "text": " 语句，用于捕捉可能存在的请求错误，在 "
                    },
                    {
                      "code": true,
                      "text": "try"
                    },
                    {
                      "text": " 代码块中，我们使用了 "
                    },
                    {
                      "code": true,
                      "text": "Taro"
                    },
                    {
                      "text": " 为我们提供的微信小程序云的云函数 API "
                    },
                    {
                      "code": true,
                      "text": "Taro.cloud.callFunction"
                    },
                    {
                      "text": " 来便捷的向小程序云发起云函数调用请求。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们调用了一个 "
                    },
                    {
                      "code": true,
                      "text": "createPost "
                    },
                    {
                      "text": " 云函数，并将 "
                    },
                    {
                      "code": true,
                      "text": "postData "
                    },
                    {
                      "text": "  和 "
                    },
                    {
                      "code": true,
                      "text": "userId"
                    },
                    {
                      "text": " 作为参数传给云函数，用于在云函数中使用用户 Id 和帖子数据来创建一个属于此用户的帖子并保存到数据库，我们将在下一节中实现这个云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们返回了 "
                    },
                    {
                      "code": true,
                      "text": "result.post"
                    },
                    {
                      "text": " 数据。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果调用失败，则打印错误。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们定义了一个 "
                    },
                    {
                      "code": true,
                      "text": "postApi "
                    },
                    {
                      "text": " 对象，用于存放所有和用户逻辑有个的函数，并添加 "
                    },
                    {
                      "code": true,
                      "text": "createPost "
                    },
                    {
                      "text": " API 属性然后将其导出，这样在 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " saga 函数里面就可以导入 "
                    },
                    {
                      "code": true,
                      "text": "postApi"
                    },
                    {
                      "text": " 然后通过 "
                    },
                    {
                      "code": true,
                      "text": "postApi.createPost"
                    },
                    {
                      "text": " 的方式来调用 "
                    },
                    {
                      "code": true,
                      "text": "createPost"
                    },
                    {
                      "text": " API 处理创建帖子的逻辑了。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "在 API 默认文件统一导出"
                    }
                  ],
                  "id": "lSGcyzBVK6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 "
                    },
                    {
                      "code": true,
                      "text": "src/api/index.js"
                    },
                    {
                      "text": " 文件中导入上面创建的 "
                    },
                    {
                      "code": true,
                      "text": "postApi"
                    },
                    {
                      "text": " 并进行统一导出如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import postApi from './post'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export { postApi }"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/createPost/package.json",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第五剑：创建对应的微信小程序云函数"
                    }
                  ],
                  "id": "vcX__Jvjgf"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 createPost 云函数"
                    }
                  ],
                  "id": "D_CM5JRI3M"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照和之前创建 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 云函数类似，我们创建 "
                    },
                    {
                      "code": true,
                      "text": "createPost"
                    },
                    {
                      "text": " 云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/170589aeef144fe8.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建成功之后，我们可以得到两个文件，一个是 "
                    },
                    {
                      "code": true,
                      "text": "functions/createPost/package.json"
                    },
                    {
                      "text": " 文件，它和之前的类似。"
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/createPost/package.json",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/createPost/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第二个文件就是我们需要编写创建帖子逻辑的 "
                    },
                    {
                      "code": true,
                      "text": "functions/createPost/index.js"
                    },
                    {
                      "text": " 文件，微信小程序开发者工具会默认为我们生成一段样板代码。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "code": true,
                      "text": "function/createPost"
                    },
                    {
                      "text": " 文件夹下同样运行 "
                    },
                    {
                      "code": true,
                      "text": "npm install"
                    },
                    {
                      "text": " 安装对应的云函数依赖，这样我们才能运行它。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "编写 createPost 云函数"
                    }
                  ],
                  "id": "RO0SI6QhVM"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "functions/createPost/index.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/createPost/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码改动主要有以下七处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们给 "
                        },
                        {
                          "code": true,
                          "text": "cloud.init()"
                        },
                        {
                          "text": " 传入了环境参数，我们使用了内置的 "
                        },
                        {
                          "code": true,
                          "text": "cloud.DYNAMIC_CURRENT_ENV"
                        },
                        {
                          "text": "，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里 "
                        },
                        {
                          "code": true,
                          "text": "functions"
                        },
                        {
                          "text": " 文件夹时选择的环境。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们通过 "
                        },
                        {
                          "code": true,
                          "text": "cloud.database()"
                        },
                        {
                          "text": " 生成了数据实例 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": "，用于之后在函数体中便捷的操作云数据库。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着就是 "
                        },
                        {
                          "code": true,
                          "text": "main"
                        },
                        {
                          "text": " 函数体，我们首先从 "
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": " 对象中取到了在小程序的调用 "
                        },
                        {
                          "code": true,
                          "text": "Taro.cloud.callFunction"
                        },
                        {
                          "text": " 传过来的 "
                        },
                        {
                          "code": true,
                          "text": "postData "
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后，跟着取数据的是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句块，用于捕获错误，在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句块中，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": " 的查询操作："
                        },
                        {
                          "code": true,
                          "text": "db.collection('user').doc(userId).get()"
                        },
                        {
                          "text": "，表示查询 "
                        },
                        {
                          "code": true,
                          "text": "id"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 表数据，它查出来应该是个唯一值，如果不存在满足 "
                        },
                        {
                          "code": true,
                          "text": "where"
                        },
                        {
                          "text": " 条件的，那么是一个 "
                        },
                        {
                          "code": true,
                          "text": "null"
                        },
                        {
                          "text": " 值，如果存在满足 条件的，那么返回一个 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 对象。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们使用的 "
                        },
                        {
                          "code": true,
                          "text": "db.collection('post').add()"
                        },
                        {
                          "text": " 添加一个 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 数据，然后在 "
                        },
                        {
                          "code": true,
                          "text": "add"
                        },
                        {
                          "text": " 方法中传入 "
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": " 字段，这里我们不仅传入了 "
                        },
                        {
                          "code": true,
                          "text": "postData"
                        },
                        {
                          "text": " ，还将 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 也一同传入了，原因我们将在之后来讲解。除此之外，这里我们额外使用了 "
                        },
                        {
                          "code": true,
                          "text": "db.serverDate()"
                        },
                        {
                          "text": " 用于记录创建此帖子的时间和更新此帖子的时间，方便之后做条件查询。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，因为向数据库添加一个记录之后只会返回此记录的 "
                        },
                        {
                          "code": true,
                          "text": "_id"
                        },
                        {
                          "text": "，所以我们需要一个额外的操作 "
                        },
                        {
                          "code": true,
                          "text": "db.collection('post').doc()"
                        },
                        {
                          "text": " 来获取此条记录，这个 "
                        },
                        {
                          "code": true,
                          "text": "doc"
                        },
                        {
                          "text": " 用于获取指定的记录引用，返回的是这条数据，而不是一个数组。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们返回新创建的 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们在上面创建 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 的时候，将 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 对象也添加到了 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 数据中，这里是因为小程序云数据库是 JSON 数据库,所以没有关系数据库的外键概念,导致建关系困难,所以为了之后查询 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 的时候方便展示 "
                        },
                        {
                          "code": true,
                          "text": "user"
                        },
                        {
                          "text": " 数据，我们才这样保存的. 当然更加科学的做法是在 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 里面保存 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": "，这样能减少数据冗余，但是因为做教学用，所以这些我们偷了一点懒。"
                        }
                      ]
                    },
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "所以我们这里强烈建议,在正规的环境下，关系型数据库应该建外键，JSON 数据库也至少应该保存 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/reducers/post.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第六剑： 定义对应的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "id": "rZOLzn7XLr"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在前面处理创建帖子时，在组件内部 "
                    },
                    {
                      "code": true,
                      "text": "dispatch"
                    },
                    {
                      "text": " 了 "
                    },
                    {
                      "code": true,
                      "text": "CREATE_POST"
                    },
                    {
                      "text": " action，在处理异步 action 的 saga 函数中，使用 "
                    },
                    {
                      "code": true,
                      "text": "put"
                    },
                    {
                      "text": " 发起了一系列更新 store 中帖子状态的 action，现在我们马上来实现响应这些 action 的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": "，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/reducers/post.js"
                    },
                    {
                      "text": "，对其中的代码做出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/reducers/post.js",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  46,
                  47
                ],
                [
                  66,
                  66
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "看一看到上面的代码主要有三处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导入了必要的 action 常量"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们给 "
                        },
                        {
                          "code": true,
                          "text": "INITIAL_STATE"
                        },
                        {
                          "text": " 增加了几个字段："
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "post "
                        },
                        {
                          "text": "：保存单个帖子，我们将在之后讲解用于在获取帖子详情时保存数据用。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "code": true,
                      "text": "isPost "
                    },
                    {
                      "text": "：用于标志帖子逻辑过程中是否在执行创帖逻辑，"
                    },
                    {
                      "code": true,
                      "text": "true"
                    },
                    {
                      "text": " 表示正在执行创帖中，"
                    },
                    {
                      "code": true,
                      "text": "false"
                    },
                    {
                      "text": " 表示登录逻辑执行完毕"
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后就是 "
                    },
                    {
                      "code": true,
                      "text": "switch"
                    },
                    {
                      "text": " 语句中响应 action，更新相应的状态。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-two",
                  "children": [
                    {
                      "text": "“六脉神剑” 搞定 getPosts 异步逻辑"
                    }
                  ],
                  "id": "cB9u9-dvMP"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上一 “大” 节中，我们使用了图雀社区不传之术：“六脉神剑” 搞定了 "
                    },
                    {
                      "code": true,
                      "text": "createPost"
                    },
                    {
                      "text": " 的异步逻辑，现在我们马上趁热打铁来巩固我们的武功，搞定 getPosts 异步逻辑，它对应着我们小程序底部两个 tab 栏的第一个，也就是我们打开小程序的首屏渲染逻辑，也就是一个帖子列表。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第一剑："
                    },
                    {
                      "code": true,
                      "text": "index"
                    },
                    {
                      "text": " 组件中发起异步请求"
                    }
                  ],
                  "id": "Kv3YW_zAGE"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/index/index.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  3
                ],
                [
                  16,
                  20
                ],
                [
                  72,
                  86
                ],
                [
                  97,
                  113
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容做了如下四处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们对当前的开发环境做了判断，如果是微信小程序环境，我们就使用  "
                        },
                        {
                          "code": true,
                          "text": "Taro.cloud.init()"
                        },
                        {
                          "text": " 进行小程序环境的初始化。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们在 "
                        },
                        {
                          "code": true,
                          "text": "useEffects"
                        },
                        {
                          "text": " Hooks 里面定义了 "
                        },
                        {
                          "code": true,
                          "text": "getPosts"
                        },
                        {
                          "text": " 函数，它是一个异步函数，用于 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " GET_POSTS 的异步请求，并且我们进行了判断，当此时 Redux Store 内部没有文章时，才进行数据的获取。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们改进了 "
                        },
                        {
                          "code": true,
                          "text": "getStorage"
                        },
                        {
                          "text": " 获取缓存的函数，将其移动到 "
                        },
                        {
                          "code": true,
                          "text": "useEffects"
                        },
                        {
                          "text": "  Hooks 里面，并额外增加了 "
                        },
                        {
                          "code": true,
                          "text": "_id"
                        },
                        {
                          "text": " 属性，它被赋值给 "
                        },
                        {
                          "code": true,
                          "text": "userId"
                        },
                        {
                          "text": " 一起设置 Redux Store 中关于用户的属性，这样做的目的主要是为了之后发帖标志用户，或者获取用户的个人信息用。并且，加了一层 "
                        },
                        {
                          "code": true,
                          "text": "if"
                        },
                        {
                          "text": " 判断，只有当没有登录时，即 "
                        },
                        {
                          "code": true,
                          "text": "isLogged"
                        },
                        {
                          "text": " 为 false 的时候，才进行获取缓存操作。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导入了必要的 "
                        },
                        {
                          "code": true,
                          "text": "GET_POSTS"
                        },
                        {
                          "text": " 常量，并且将 "
                        },
                        {
                          "code": true,
                          "text": "return"
                        },
                        {
                          "text": " 语句里的 "
                        },
                        {
                          "code": true,
                          "text": "PostCard"
                        },
                        {
                          "text": " 接收的 "
                        },
                        {
                          "code": true,
                          "text": "key"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": " 属性变成了真实的帖子 "
                        },
                        {
                          "code": true,
                          "text": "_id"
                        },
                        {
                          "text": "。这样我们在帖子详情时可以直接拿 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": " 向小程序云发起异步请求。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "在上一篇教程中，有同学提到没有使用 "
                        },
                        {
                          "code": true,
                          "text": "Taro.cloud.init()"
                        },
                        {
                          "text": " 初始化的问题，是因为分成了两篇文章，在这篇文章才初始化。要使用小程序云，初始化环境是必要的。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第二剑：声明和补充对应需要的异步 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "id": "NwyTa3l83Z"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 “第一剑” 中，我们从组件中 dispatch 了 action.type 为 "
                    },
                    {
                      "code": true,
                      "text": "GET_POSTS"
                    },
                    {
                      "text": " 的异步 Action，接下来我们要做的就是在对应的 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件中补齐响应这个异步 action 的 sagas。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/sagas/post.js"
                    },
                    {
                      "text": " 文件，在其中定义 "
                    },
                    {
                      "code": true,
                      "text": "getPosts"
                    },
                    {
                      "text": " sagas 逻辑如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  GET_POSTS,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "} from '../constants'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function* getPosts() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  try {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const posts = yield call(postApi.getPosts)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 其实以下三步可以合成一步，但是这里为了讲解清晰，将它们拆分成独立的单元"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 发起获取帖子成功的 action"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: POST_SUCCESS })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 更新 Redux store 数据"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      type: SET_POSTS,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      payload: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        posts,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  } catch (err) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('getPosts ERR: ', err)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 获取帖子失败，发起失败的 action"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: POST_ERROR })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function* watchGetPosts() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  while (true) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield take(GET_POSTS)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield fork(getPosts)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export { watchGetPosts }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的改动主要是创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "watcherSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了登录的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "： "
                        },
                        {
                          "code": true,
                          "text": "watchGetPosts "
                        },
                        {
                          "text": "，它用来监听 "
                        },
                        {
                          "code": true,
                          "text": "action.type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "GET_POSTS "
                        },
                        {
                          "text": " 的 action，并且当监听到 "
                        },
                        {
                          "code": true,
                          "text": "GET_POSTS "
                        },
                        {
                          "text": " action 之后，然后激活 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "getPosts "
                        },
                        {
                          "text": " 去处理对应的获取帖子列表的逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "这里的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "watchGetPosts "
                        },
                        {
                          "text": " 是一个生成器函数，它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "while"
                        },
                        {
                          "text": " 无限循环，表示在内部持续监听 "
                        },
                        {
                          "code": true,
                          "text": "GET_POSTS "
                        },
                        {
                          "text": " action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在循环内部，我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "take"
                        },
                        {
                          "text": "，它用于监听 "
                        },
                        {
                          "code": true,
                          "text": "GET_POSTS "
                        },
                        {
                          "text": " action，获取 action 中携带的数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了另外一个 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": "，它表示非阻塞的执行 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "getPosts "
                        },
                        {
                          "text": "，因为这里获取帖子列表不需要传数据，所以这里没有额外的数据传递逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "handlerSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了创建帖子的 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "getPosts "
                        },
                        {
                          "text": "，它用来处理创建逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "getPosts "
                        },
                        {
                          "text": " 也是一个生成器函数，在它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句，用于处理获取帖子列表请求可能存在的错误情况。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句中，首先是使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供给我们的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "call"
                        },
                        {
                          "text": " 来调用登录的 API："
                        },
                        {
                          "code": true,
                          "text": "postApi. getPosts "
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果获取帖子列表失败，我们则使用 "
                    },
                    {
                      "code": true,
                      "text": "put"
                    },
                    {
                      "text": " 发起一个 "
                    },
                    {
                      "code": true,
                      "text": "POST_ERROR "
                    },
                    {
                      "text": " 的 action 来更新获取帖子列表失败的信息到 Redux Store"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "一些额外的工作"
                    }
                  ],
                  "id": "rAIfUO29O-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": "，我们还导入了 "
                    },
                    {
                      "code": true,
                      "text": "postApi. getPosts "
                    },
                    {
                      "text": "，我们将在后面来创建这个 API。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外我们还导入了需要使用的 action 常量："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "GET_POSTS "
                        },
                        {
                          "text": "：响应获取帖子列表的 ACTION 常量，我们将在 “第三剑” 中创建它。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "加入 saga 中心调度文件"
                    }
                  ],
                  "id": "zQFP7zXJp-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们像之前将 "
                    },
                    {
                      "code": true,
                      "text": "watchCreatePost"
                    },
                    {
                      "text": " 等加入到 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 中心调度文件一样，将我们创建好的 "
                    },
                    {
                      "code": true,
                      "text": "watchGetPosts "
                    },
                    {
                      "text": " 也加入进去："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// ...之前的逻辑"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import { watchGetPosts } from './post'"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default function* rootSaga() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  yield all(["
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "   // ... 之前的逻辑"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    fork(watchGetPosts)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  ])"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第三剑：定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 需要的常量文件"
                    }
                  ],
                  "id": "yxiChXXsvW"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/constants/post.js"
                    },
                    {
                      "text": " 文件，定义我们之前创建的常量文件如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const GET_POSTS = 'GET_POSTS'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第四剑：定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 涉及到的前端 API 文件"
                    }
                  ],
                  "id": "EiwTGHVpVO"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在之前的 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " saga 文件里面，我们使用到了 "
                    },
                    {
                      "code": true,
                      "text": "postApi.getPosts"
                    },
                    {
                      "text": "，它里面封装了用于向后端（这里我们是小程序云）发起和获取帖子列表有关请求的逻辑，让我们马上来实现它吧。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/api/post.js"
                    },
                    {
                      "text": " 文件，并在其中编写内容如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// ... 其余逻辑一样"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "async function getPosts() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const isAlipay = Taro.getEnv() === Taro.ENV_TYPE.ALIPAY"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 针对微信小程序使用小程序云函数，其他使用小程序 RESTful API"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  try {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    if (isWeapp) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      const { result } = await Taro.cloud.callFunction({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        name: 'getPosts',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      return result.posts"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  } catch (err) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.error('getPosts ERR: ', err)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const postApi = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 之前的 API"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  getPosts,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// ... 其余逻辑一样"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上面的代码中，我们定义了 "
                    },
                    {
                      "code": true,
                      "text": "getPosts "
                    },
                    {
                      "text": " 函数，它是一个 "
                    },
                    {
                      "code": true,
                      "text": "async"
                    },
                    {
                      "text": " 函数，用来处理异步逻辑，在 "
                    },
                    {
                      "code": true,
                      "text": "getPosts "
                    },
                    {
                      "text": " 函数中，我们对当前的环境进行了判断，且只在微信小程序，即 "
                    },
                    {
                      "code": true,
                      "text": "isWeapp"
                    },
                    {
                      "text": " 的条件下执行获取帖子列表的操作，对于支付宝小程序和 H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建帖子逻辑是一个 "
                    },
                    {
                      "code": true,
                      "text": "try/catch"
                    },
                    {
                      "text": " 语句，用于捕捉可能存在的请求错误，在 "
                    },
                    {
                      "code": true,
                      "text": "try"
                    },
                    {
                      "text": " 代码块中，我们使用了 "
                    },
                    {
                      "code": true,
                      "text": "Taro"
                    },
                    {
                      "text": " 为我们提供的微信小程序云的云函数 API "
                    },
                    {
                      "code": true,
                      "text": "Taro.cloud.callFunction"
                    },
                    {
                      "text": " 来便捷的向小程序云发起云函数调用请求。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们调用了一个 "
                    },
                    {
                      "code": true,
                      "text": "getPosts "
                    },
                    {
                      "text": " 云函数，我们将在下一节中实现这个云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们返回了 "
                    },
                    {
                      "code": true,
                      "text": "result.posts"
                    },
                    {
                      "text": " 数据，即从小程序云返回的帖子列表。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果调用失败，则打印错误。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后我们在已经定义好的 "
                    },
                    {
                      "code": true,
                      "text": "postApi "
                    },
                    {
                      "text": " 对象里，添加 "
                    },
                    {
                      "code": true,
                      "text": "getPosts "
                    },
                    {
                      "text": " API 属性然后将其导出，这样在 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " saga 函数里面就可以导入 "
                    },
                    {
                      "code": true,
                      "text": "postApi"
                    },
                    {
                      "text": " 然后通过 "
                    },
                    {
                      "code": true,
                      "text": "postApi. getPosts "
                    },
                    {
                      "text": " 的方式来调用 "
                    },
                    {
                      "code": true,
                      "text": "getPosts "
                    },
                    {
                      "text": " API 处理获取帖子列表的逻辑了。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/getPosts/package.json",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第五剑：创建对应的微信小程序云函数"
                    }
                  ],
                  "id": "TttTHPAzu9"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 getPosts 云函数"
                    }
                  ],
                  "id": "StHvcXNjTX"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照和之前创建 "
                    },
                    {
                      "code": true,
                      "text": "createPost"
                    },
                    {
                      "text": " 云函数类似，我们创建 "
                    },
                    {
                      "code": true,
                      "text": "getPosts "
                    },
                    {
                      "text": " 云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/170589aeef2ce745.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建成功之后，我们可以得到两个文件，一个是 "
                    },
                    {
                      "code": true,
                      "text": "functions/getPosts/package.json"
                    },
                    {
                      "text": " 文件，它和之前的类似。"
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/getPosts/package.json",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/getPosts/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第二个文件就是我们需要编写创建帖子逻辑的 "
                    },
                    {
                      "code": true,
                      "text": "functions/getPosts/index.js"
                    },
                    {
                      "text": " 文件，微信小程序开发者工具会默认为我们生成一段样板代码。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "code": true,
                      "text": "function/getPosts "
                    },
                    {
                      "text": " 文件夹下同样运行 "
                    },
                    {
                      "code": true,
                      "text": "npm install"
                    },
                    {
                      "text": " 安装对应的云函数依赖，这样我们才能运行它。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "编写 getPosts 云函数"
                    }
                  ],
                  "id": "MurJw5mUuP"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "functions/getPosts/index.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/getPosts/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码改动主要有以下处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们给 "
                        },
                        {
                          "code": true,
                          "text": "cloud.init()"
                        },
                        {
                          "text": " 传入了环境参数，我们使用了内置的 "
                        },
                        {
                          "code": true,
                          "text": "cloud.DYNAMIC_CURRENT_ENV"
                        },
                        {
                          "text": "，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里 "
                        },
                        {
                          "code": true,
                          "text": "functions"
                        },
                        {
                          "text": " 文件夹时选择的环境。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们通过 "
                        },
                        {
                          "code": true,
                          "text": "cloud.database()"
                        },
                        {
                          "text": " 生成了数据实例 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": "，用于之后在函数体中便捷的操作云数据库。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着就是 "
                        },
                        {
                          "code": true,
                          "text": "main"
                        },
                        {
                          "text": " 函数体，里面是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句块，用于捕获错误，在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句块中，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": " 的查询操作："
                        },
                        {
                          "code": true,
                          "text": "db.collection('post').get()"
                        },
                        {
                          "text": "，表示查询所有的 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们返回查询到的  "
                        },
                        {
                          "code": true,
                          "text": "posts"
                        },
                        {
                          "text": " 数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第六剑： 定义对应的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "id": "O6o6wORqEk"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为这里 "
                    },
                    {
                      "code": true,
                      "text": "SET_POSTS"
                    },
                    {
                      "text": " 的 Action 我们在上一 “大” 节中创建帖子时已经定义了，所有在 “这一剑” 中我们无需添加额外的代码，复用之前的逻辑就好。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/pages/post/post.jsx",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-two",
                  "children": [
                    {
                      "text": "“六脉神剑” 搞定 getPost 异步逻辑"
                    }
                  ],
                  "id": "JO2_4U8mg1"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上面两 “大” 节中，我们连续用了两次 “六脉神剑”，相信跟到这里的同学应该对我们接下来要做的事情已经轻车熟路了吧😁。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来，我们将收尾 Post 逻辑的最后一公里，即帖子详情的异步逻辑 “getPost” 接入，话不多说就是干！"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第一剑："
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 组件中发起异步请求"
                    }
                  ],
                  "id": "nG-XmMIrAI"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/pages/post/post.jsx"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/pages/post/post.jsx",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  35,
                  42
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容做了如下四处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们使用 "
                        },
                        {
                          "code": true,
                          "text": "useDispatch"
                        },
                        {
                          "text": " Hooks 获取到了 "
                        },
                        {
                          "code": true,
                          "text": "dispatch"
                        },
                        {
                          "text": " 函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，在 "
                        },
                        {
                          "code": true,
                          "text": "useEffects"
                        },
                        {
                          "text": " Hooks 里面定义了 dispatch 了 action.type 为 GET_POST 的 action，它是一个异步 Action，并且我们在 Hooks 最后返回了一个函数，其中的内容为将 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 设置为空对象，这里用到的 "
                        },
                        {
                          "code": true,
                          "text": "SET_POST"
                        },
                        {
                          "text": " 常量我们将在后面定义它。这个返回函数主要用于 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 组件卸载之后，Redux Store 数据的重置，避免下次打开帖子详情还会渲染之前获取到的帖子数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们使用 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks 来获取异步请求到的 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 数据，并用于 "
                        },
                        {
                          "code": true,
                          "text": "return"
                        },
                        {
                          "text": " 语句中的数据渲染。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们删除了不必要的获取 "
                        },
                        {
                          "code": true,
                          "text": "posts"
                        },
                        {
                          "text": " 数据的 "
                        },
                        {
                          "code": true,
                          "text": "useSelector"
                        },
                        {
                          "text": " Hooks，以及删掉了不必要的调试 "
                        },
                        {
                          "code": true,
                          "text": "console.log"
                        },
                        {
                          "text": " 语句。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第二剑： 声明和补充对应需要的异步 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "id": "SuImrH_V3p"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 “第一剑” 中，我们从组件中 dispatch 了 action.type 为 "
                    },
                    {
                      "code": true,
                      "text": "GET_POST"
                    },
                    {
                      "text": " 的异步 Action，接下来我们要做的就是在对应的 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件中补齐响应这个异步 action 的 sagas。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/sagas/post.js"
                    },
                    {
                      "text": " 文件，在其中定义 "
                    },
                    {
                      "code": true,
                      "text": "getPosts"
                    },
                    {
                      "text": " sagas 逻辑如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// ... 和之前的逻辑一样"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "import {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 和之前的逻辑一样"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  SET_POST,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "} from '../constants';"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // ... 和之前的逻辑一样"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function* getPost(postId) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  try {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const post = yield call(postApi.getPost, postId)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 其实以下三步可以合成一步，但是这里为了讲解清晰，将它们拆分成独立的单元"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 发起获取帖子成功的 action"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: POST_SUCCESS })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 更新 Redux store 数据"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      type: SET_POST,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      payload: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        post,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  } catch (err) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.log('getPost ERR: ', err)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    // 获取帖子失败，发起失败的 action"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield put({ type: POST_ERROR })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "function* watchGetPost() {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  while (true) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const { payload } = yield take(GET_POST)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    yield fork(getPost, payload.postId)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export { watchGetPost }"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的改动主要是创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "watcherSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了登录的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "： "
                        },
                        {
                          "code": true,
                          "text": "watchGetPost "
                        },
                        {
                          "text": "，它用来监听 "
                        },
                        {
                          "code": true,
                          "text": "action.type"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "GET_POST "
                        },
                        {
                          "text": " 的 action，并且当监听到 "
                        },
                        {
                          "code": true,
                          "text": "GET_POST "
                        },
                        {
                          "text": " action 之后，然后激活 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": " 去处理对应的获取单个帖子的逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "这里的 "
                        },
                        {
                          "code": true,
                          "text": "watcherSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "watchGetPost "
                        },
                        {
                          "text": " 是一个生成器函数，它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "while"
                        },
                        {
                          "text": " 无限循环，表示在内部持续监听 "
                        },
                        {
                          "code": true,
                          "text": "GET_POST "
                        },
                        {
                          "text": " action。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在循环内部，我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "take"
                        },
                        {
                          "text": "，它用于监听 "
                        },
                        {
                          "code": true,
                          "text": "GET_POST "
                        },
                        {
                          "text": " action，获取 action 中携带的数据，这里我们拿到了传过来的 "
                        },
                        {
                          "code": true,
                          "text": "payload"
                        },
                        {
                          "text": " 数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了另外一个 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "fork"
                        },
                        {
                          "text": "，它表示非阻塞的执行 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": "，并传入了获取到 "
                        },
                        {
                          "code": true,
                          "text": "payload.postId"
                        },
                        {
                          "text": " 参数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "bold": true,
                      "text": "创建 "
                    },
                    {
                      "bold": true,
                      "code": true,
                      "text": "handlerSaga"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们创建了获取单个帖子的 "
                        },
                        {
                          "code": true,
                          "text": "handlerSaga"
                        },
                        {
                          "text": "："
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": "，它用来处理获取帖子逻辑。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": " 也是一个生成器函数，在它内部是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句，用于处理获取单个帖子请求可能存在的错误情况。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句中，首先是使用了 "
                        },
                        {
                          "code": true,
                          "text": "redux-saga"
                        },
                        {
                          "text": " 提供给我们的 "
                        },
                        {
                          "code": true,
                          "text": "effects helper"
                        },
                        {
                          "text": " 函数："
                        },
                        {
                          "code": true,
                          "text": "call"
                        },
                        {
                          "text": " 来调用登录的 API："
                        },
                        {
                          "code": true,
                          "text": "postApi. getPost "
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "如果获取单个帖子失败，我们则使用 "
                    },
                    {
                      "code": true,
                      "text": "put"
                    },
                    {
                      "text": " 发起一个 "
                    },
                    {
                      "code": true,
                      "text": "POST_ERROR "
                    },
                    {
                      "text": " 的 action 来更新获取单个帖子失败的信息到 Redux Store"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "一些额外的工作"
                    }
                  ],
                  "id": "eV78-s6RWk"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了创建 "
                    },
                    {
                      "code": true,
                      "text": "watcherSaga"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "handlerSaga"
                    },
                    {
                      "text": "，我们还导入了 "
                    },
                    {
                      "code": true,
                      "text": "postApi.getPost "
                    },
                    {
                      "text": "，我们将在后面来创建这个 API。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除此之外我们还导入了需要使用的 action 常量："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "SET_POST "
                        },
                        {
                          "text": "：响应获取帖子列表的 ACTION 常量，我们将在 “第三剑” 中创建它"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "src/sagas/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "加入 saga 中心调度文件"
                    }
                  ],
                  "id": "9gZK_Tgq1N"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们像之前将 "
                    },
                    {
                      "code": true,
                      "text": "watchGetPosts"
                    },
                    {
                      "text": " 等加入到 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 中心调度文件一样，将我们创建好的 "
                    },
                    {
                      "code": true,
                      "text": "watchGetPost "
                    },
                    {
                      "text": " 也加入进去："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/sagas/index.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出如下的修改："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "src/sagas/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第三剑：定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 需要的常量文件"
                    }
                  ],
                  "id": "MO0Ez1DzpW"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/constants/post.js"
                    },
                    {
                      "text": " 文件，定义我们之前创建的常量文件 "
                    },
                    {
                      "code": true,
                      "text": "GET_POST"
                    },
                    {
                      "text": "："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export const SET_POST = 'SET_POST'"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第四剑：定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 涉及到的前端 API 文件"
                    }
                  ],
                  "id": "xS2qvEk0Mb"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在之前的 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " saga 文件里面，我们使用到了 "
                    },
                    {
                      "code": true,
                      "text": "postApi.getPost"
                    },
                    {
                      "text": "，它里面封装了用于向后端（这里我们是小程序云）发起和获取单个帖子有关请求的逻辑，让我们马上来实现它吧。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/api/post.js"
                    },
                    {
                      "text": " 文件，并在其中编写内容如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "// ... 其他内容和之前一致"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "async function getPost(postId) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const isWeapp = Taro.getEnv() === Taro.ENV_TYPE.WEAPP"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  const isAlipay = Taro.getEnv() === Taro.ENV_TYPE.ALIPAY"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  // 针对微信小程序使用小程序云函数，其他使用小程序 RESTful API"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  try {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    if (isWeapp) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      const { result } = await Taro.cloud.callFunction({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        name: 'getPost',"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        data: {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "          postId,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      })"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "      return result.post"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  } catch (err) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    console.error('getPost ERR: ', err)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const postApi = {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  getPost,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "export default postApi"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码有如下六处改动："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在上面的代码中，我们定义了 "
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": " 函数，它是一个 "
                        },
                        {
                          "code": true,
                          "text": "async"
                        },
                        {
                          "text": " 函数，用来处理异步逻辑，在 "
                        },
                        {
                          "code": true,
                          "text": "getPost"
                        },
                        {
                          "text": " 函数中，我们对当前的环境进行了判断，且只在微信小程序，即 "
                        },
                        {
                          "code": true,
                          "text": "isWeapp"
                        },
                        {
                          "text": " 的条件下执行获取单个帖子的操作，对于支付宝小程序和 H5，我们则放在下一节使用 LeanCloud 的 Serverless 来解决。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "创建帖子逻辑是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句，用于捕捉可能存在的请求错误，在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 代码块中，我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "Taro"
                        },
                        {
                          "text": " 为我们提供的微信小程序云的云函数 API "
                        },
                        {
                          "code": true,
                          "text": "Taro.cloud.callFunction"
                        },
                        {
                          "text": " 来便捷的向小程序云发起云函数调用请求。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "这里我们调用了一个 "
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": " 云函数，并给它传递了对应要获取的帖子的 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": " 我们将在下一节中实现这个云函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "如果调用成功，我们可以接收返回值，用于从后端返回数据，这里我们返回了 "
                        },
                        {
                          "code": true,
                          "text": "result.post"
                        },
                        {
                          "text": " 数据，即从小程序云返回的单个帖子。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "如果调用失败，则打印错误。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们在已经定义好的 "
                        },
                        {
                          "code": true,
                          "text": "postApi "
                        },
                        {
                          "text": " 对象里，添加 "
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": " API 属性然后将其导出，这样在 "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " saga 函数里面就可以导入 "
                        },
                        {
                          "code": true,
                          "text": "postApi"
                        },
                        {
                          "text": " 然后通过 "
                        },
                        {
                          "code": true,
                          "text": "postApi. getPost "
                        },
                        {
                          "text": " 的方式来调用 "
                        },
                        {
                          "code": true,
                          "text": "getPost "
                        },
                        {
                          "text": " API 处理获取单个帖子的逻辑了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "file",
          "file": "src/constants/post.js",
          "display": false,
          "id": "6P_hNzNZc_",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/constants/post.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/sagas/post.js",
          "display": false,
          "id": "rZY0ty4OZ-",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/sagas/post.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/api/post.js",
          "display": false,
          "id": "lICnWIiYIb",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/api/post.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "src/api/index.js",
          "display": false,
          "id": "eGb9vxvr6C",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/api/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "functions/getPost/package.json",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第五剑：创建对应的微信小程序云函数"
                    }
                  ],
                  "id": "pNh7cLFmWU"
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建 getPost 云函数"
                    }
                  ],
                  "id": "Y9YDB39YC4"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照和之前创建 "
                    },
                    {
                      "code": true,
                      "text": "getPosts"
                    },
                    {
                      "text": " 云函数类似，我们创建 "
                    },
                    {
                      "code": true,
                      "text": "getPost "
                    },
                    {
                      "text": " 云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/170589aeef13f8ad.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "创建成功之后，我们可以得到两个文件，一个是 "
                    },
                    {
                      "code": true,
                      "text": "functions/getPost/package.json"
                    },
                    {
                      "text": " 文件，它和之前的类似。"
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/getPost/package.json",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "file": "functions/getPost/index.js",
          "display": true,
          "commit": "b32362b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "第二个文件就是我们需要编写创建帖子逻辑的 "
                    },
                    {
                      "code": true,
                      "text": "functions/getPost/index.js"
                    },
                    {
                      "text": " 文件，微信小程序开发者工具会默认为我们生成一段样板代码。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们在 "
                    },
                    {
                      "code": true,
                      "text": "function/getPost "
                    },
                    {
                      "text": " 文件夹下同样运行 "
                    },
                    {
                      "code": true,
                      "text": "npm install"
                    },
                    {
                      "text": " 安装对应的云函数依赖，这样我们才能运行它。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "编写 getPost 云函数"
                    }
                  ],
                  "id": "Mmi7e1QSch"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "functions/getPost/index.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ],
              "flag": "file_start"
            },
            {
              "type": "diff-block",
              "file": "functions/getPost/index.js",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的代码改动主要有以下处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们给 "
                        },
                        {
                          "code": true,
                          "text": "cloud.init()"
                        },
                        {
                          "text": " 传入了环境参数，我们使用了内置的 "
                        },
                        {
                          "code": true,
                          "text": "cloud.DYNAMIC_CURRENT_ENV"
                        },
                        {
                          "text": "，表示自动设置为当前的云环境，即在右键点击小程序开发者工具里 "
                        },
                        {
                          "code": true,
                          "text": "functions"
                        },
                        {
                          "text": " 文件夹时选择的环境。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们通过 "
                        },
                        {
                          "code": true,
                          "text": "cloud.database()"
                        },
                        {
                          "text": " 生成了数据实例 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": "，用于之后在函数体中便捷的操作云数据库。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着就是 "
                        },
                        {
                          "code": true,
                          "text": "main"
                        },
                        {
                          "text": " 函数体，里面是一个 "
                        },
                        {
                          "code": true,
                          "text": "try/catch"
                        },
                        {
                          "text": " 语句块，用于捕获错误，在 "
                        },
                        {
                          "code": true,
                          "text": "try"
                        },
                        {
                          "text": " 语句块中，我们首先从 "
                        },
                        {
                          "code": true,
                          "text": "event"
                        },
                        {
                          "text": "  对象里面获取到了 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": "，接着我们使用 "
                        },
                        {
                          "code": true,
                          "text": "db"
                        },
                        {
                          "text": " 的查询操作："
                        },
                        {
                          "code": true,
                          "text": "db.collection('post').doc(postId).get()"
                        },
                        {
                          "text": "，表示查询所有的对应 "
                        },
                        {
                          "code": true,
                          "text": "_id"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "postId"
                        },
                        {
                          "text": " 的单个帖子数据"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们返回查询到的  "
                        },
                        {
                          "code": true,
                          "text": "post"
                        },
                        {
                          "text": " 数据。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "第六剑： 定义对应的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "id": "A1ocuDVKoR"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为这里 "
                    },
                    {
                      "code": true,
                      "text": "SET_POST"
                    },
                    {
                      "text": " 的 Action 我们在上上 “大” 节中创建帖子时已经定义了，所有在 “这一剑” 中我们无需添加额外的代码，复用之前的逻辑就好。"
                    }
                  ]
                }
              ],
              "flag": "file_end"
            }
          ]
        },
        {
          "type": "file",
          "file": "functions/createPost/yarn.lock",
          "display": false,
          "id": "gP4beaD8Sj",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/createPost/yarn.lock",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "functions/getPost/yarn.lock",
          "display": false,
          "id": "6VWmszWGlg",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/getPost/yarn.lock",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "functions/getPosts/yarn.lock",
          "display": false,
          "id": "Q_lhFeh2EJ",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/getPosts/yarn.lock",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "functions/login/yarn.lock",
          "display": false,
          "id": "SXcKfenbKN",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/login/yarn.lock",
              "commit": "b32362b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "file",
          "file": "yarn.lock",
          "id": "fAY5_lF3qB",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "b32362b",
              "hiddenLines": [
                [
                  0,
                  921
                ],
                [
                  972,
                  8871
                ],
                [
                  8887,
                  10439
                ],
                [
                  10465,
                  11284
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ],
          "display": false
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "Sa0fZZc9UTd"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这篇教程中，我们连续使用了三次 “六脉神剑” 讲完了我们的 Post 逻辑的异步流程，让我们再来复习一下我们开头提到的 “六脉神剑”："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "将组件中的同步逻辑重构到异步逻辑"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "声明和补充对应需要的异步 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 需要的常量文件"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "定义 "
                    },
                    {
                      "code": true,
                      "text": "sagas"
                    },
                    {
                      "text": " 涉及到的前端 API 文件"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "创建对于的微信小程序云函数，并编写对应的 Node.js 处理逻辑"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "定义对应的 "
                    },
                    {
                      "code": true,
                      "text": "reducers"
                    },
                    {
                      "text": " 文件"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这是一套讲解模式，也是一套写代码的最佳实践方式之一，希望你能受用。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "一点遗憾"
                }
              ],
              "id": "uFXELrQyH8N"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这两篇讲解微信小程序云的文章有一个小小的遗憾，我们也在之前的文章中提到过了，就是微信小程序云仅限于微信小程序内的使用，如果我们想做多端应用，比如支付宝小程序云，H5 网站，那么单单使用微信小程序就显得无能为力了，我们将在下一篇文章中引入 LeanCloud Serverless 服务，并使用它来补齐我们跨端小程序开发的短板，敬请期待！✌️"
                }
              ]
            }
          ],
          "flag": "step_end"
        }
      ]
    },
    {
      "commit": "abfd872",
      "id": "eihk6xix3e9",
      "articleId": "abfd872",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "abfd872",
          "id": "3QwjrmD14f0",
          "fixed": true,
          "children": [
            {
              "text": "LeanCloud,一统江湖"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上两篇文章中，我们讲解了使用微信小程序云作为我们的小程序后台，然后我们跑通了我们的注册登录、创建帖子、获取帖子列表、获取帖子详情的全栈流程，如果只想了解微信小程序的全栈开发流程的话，之前的文章已经足够了，如果还想了解跨端开发全栈开发流程的话（当然用 Taro 的同学估计也比较期待跨端的全栈开发流程，手动滑稽）接下来这篇文章就是你的菜了😆"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们先来看一下最终的运行效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4e9b0b79869.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一篇文章中，我们将接入 LeanCloud Serverless 服务，它类似微信小程序云，只不过它没有平台属性，所有的端都可以便捷访问，相信你已经迫不及待了，让我们马上开始吧💪！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小程序接入外网的流程"
                }
              ],
              "id": "0bO1PU9CMdF"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为小程序是封装在一些巨型 App 应用里的沙盒环境之内，所以对于接入外站的服务需要一些特殊的流程，我们在这里总结一下："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "注册外站服务的账号"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "找到对应的小程序开发接入指南"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "获取对应的接入地址，将接入地址填入小程序后台的白名单列表"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "在小程序实际接入，并进行测试"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这篇文章中，我们的外站特指 LeanCloud Serverless 云服务，小程序特指微信小程序和支付宝小程序。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好的，了解了流程之后，我们现在来走一遍流程来将我们的 LeanCloud 接入到微信/支付宝小程序。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "注册外站服务的账号"
                }
              ],
              "id": "CgHb25_Xgpj"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "访问 LeanCloud 网址："
                },
                {
                  "link": true,
                  "url": "https://www.leancloud.cn/",
                  "text": "点我访问"
                },
                {
                  "text": "，完成注册登录流程。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "找到对应的小程序开发接入指南"
                }
              ],
              "id": "LVD3xmiLfzQ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "这里我们找到 LeanCloud 微信/QQ 小程序接入指南："
                },
                {
                  "link": true,
                  "url": "https://leancloud.cn/docs/weapp.html",
                  "text": "点我访问"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "LeanCloud 没有提供支付宝的接入指南，但是小程序接入指南都基本类似，我们会一一讲解这一流程。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "获取对应的接入地址"
                }
              ],
              "id": "0k10fDcb2sE"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "LeanCloud 已经有详细的链接提示如何接入："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4b3d3c87988.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "对于支付宝小程序的白名单配置地址如下："
                },
                {
                  "link": true,
                  "url": "https://mini.open.alipay.com/channel/miniIndex.htm",
                  "text": "点我访问"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "在小程序实际接入，并进行测试"
                }
              ],
              "id": "eM7dmbrDdCZ"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后我们需要进行小程序的实际接入，因为 LeanCloud 并没有提供支付宝小程序的 SDK 包，这里对于支付宝小程序我们使用 LeanCloud 提供的 REST 接口进行访问，具体地址如下："
                },
                {
                  "link": true,
                  "url": "https://leancloud.cn/docs/leanengine-rest-api.html#hash20005220",
                  "text": "点我访问"
                },
                {
                  "text": "。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/api/utils.js",
          "display": true,
          "commit": "abfd872",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "定义 LeanCloud 相关的辅助函数"
                    }
                  ],
                  "id": "wtXnj83UWSJ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "对于接入 LeanCloud，我们需要在应用中做一系列初始化环境的准备，在 "
                    },
                    {
                      "code": true,
                      "text": "src/api/"
                    },
                    {
                      "text": " 文件夹下创建 "
                    },
                    {
                      "code": true,
                      "text": "utils.js"
                    },
                    {
                      "text": " 文件，并在其中编写内容如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/api/utils.js",
              "commit": "abfd872",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码主要分为四个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "定义云函数的 REST URL，LeanCloud 的云函数 REST URL 的格式类似这样："
                        },
                        {
                          "code": true,
                          "text": "https://API_BASE_URL/1.1/functions/functionName"
                        },
                        {
                          "text": "，其中 "
                        },
                        {
                          "code": true,
                          "text": "API_BASE_URL"
                        },
                        {
                          "text": " 可以通过文档获取："
                        },
                        {
                          "link": true,
                          "url": "https://leancloud.cn/docs/leanengine-rest-api.html#hash-1722650509",
                          "text": "点我访问"
                        },
                        {
                          "text": "；而 "
                        },
                        {
                          "code": true,
                          "text": "functionName"
                        },
                        {
                          "text": " 即为我们需要调用的云函数名字。这里我们定义了 "
                        },
                        {
                          "code": true,
                          "text": "API_BASE_URL"
                        },
                        {
                          "text": " ，我们给了空字符串，读者可以根据 LeanCloud 给与的 "
                        },
                        {
                          "code": true,
                          "text": "Base URL"
                        },
                        {
                          "text": " 替代空字符串；同样我们定义了四个云函数，分别代表登录、创帖、查询帖子列表、查询单个帖子，具体的云端云函数我们将在后面定义。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "第二个部分即为向 LeanCloud 服务器发送 REST 请求时需要携带的请求头部，这个也可以在文档里给出："
                        },
                        {
                          "link": true,
                          "url": "https://leancloud.cn/docs/leanengine-rest-api.html#hash20005220",
                          "text": "点我访问"
                        },
                        {
                          "text": "；这里也需要用户用自己的内容来替换上面的空字符串。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "第三个部分则为两个辅助转换格式的函数，主要用于将 LeanCloud 数据库格式的数据与现有的微信小程序数据库格式的数据兼容。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "第四个部分为导出这些定义的内容，供其它模块使用。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "上面的 "
                        },
                        {
                          "code": true,
                          "text": "API_BASE_URL"
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "code": true,
                          "text": "HEADER"
                        },
                        {
                          "text": " 都需要用户在登录的情况下访问给出的地址才能获取到。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在 LeanCloud 上面创建数据库表"
                    }
                  ],
                  "id": "jhEeA7997s6"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "登录 LeanCloud 控制台，在左边栏的 "
                    },
                    {
                      "bold": true,
                      "text": "存储 > 结构化数据"
                    },
                    {
                      "text": " 可以看到创建 Class 的按钮，我们可以通过创建一个 Class 来创建一张数据库表："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705b4b3d457d461.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们创建了两张表："
                    },
                    {
                      "code": true,
                      "text": "Post"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "MyUser"
                    },
                    {
                      "text": "，一个存放和帖子相关的数据，一个存放和用户相关的数据。其中 "
                    },
                    {
                      "code": true,
                      "text": "MyUser"
                    },
                    {
                      "text": " 类似之前我们在微信小程序数据库表时的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 表。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "定义 MyUser 字段"
                    }
                  ],
                  "id": "ldBwCNIsJsL"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如图之前在微信小程序数据库表创建时一样，我们同样为 "
                    },
                    {
                      "code": true,
                      "text": "MyUser"
                    },
                    {
                      "text": " 定义如下的字段："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "avatar"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "nickName"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "至于读者看到的其它字段都是 LeanCloud 默认创建且自动更新的字段，用户不可以操作。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "定义 Post 字段"
                    }
                  ],
                  "id": "kmS0WS-3obc"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样和之前在微信小程序里面创建 "
                    },
                    {
                      "code": true,
                      "text": "post"
                    },
                    {
                      "text": " 一样，我们给 Post 定义如下字段:"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "content"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "title"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "user"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "眼尖的同学可能注意到了，这里的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 字段是一个 "
                    },
                    {
                      "code": true,
                      "text": "Pointer"
                    },
                    {
                      "text": " 类型，它是 LeanCloud 数据表独有的引用类型，类似关系数据库里面的外键，即存一个指针，之后获取数据的时候可以便捷的获取对应的 "
                    },
                    {
                      "code": true,
                      "text": "user"
                    },
                    {
                      "text": " 数据。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "关于默认 Class 的解释"
                    }
                  ],
                  "id": "E5m1No345km"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里有些读者可能有疑问，为什么还有一些多余的表了？这些以下划线开头的 Class 其实是 LeanCloud 默认创建的，不允许删除，用于 LeanCloud SDK 封装一系列常用且复杂的应用功能，供用户快速搭建 App/网站/小程序原型，比如类似微信的朋友圈功能，LeanCloud 提供开箱即用的逻辑，你可以直接调用。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "并且，类似 "
                    },
                    {
                      "code": true,
                      "text": "_User"
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "code": true,
                      "text": "User"
                    },
                    {
                      "text": " Class 其实是引用自同一个 Class，所以不能创建和 LeanCloud 默认的类具有同名且不带前缀下划线的类，比如 "
                    },
                    {
                      "code": true,
                      "text": "User"
                    },
                    {
                      "text": " ，"
                    },
                    {
                      "code": true,
                      "text": "File"
                    },
                    {
                      "text": " 类就不能创建，所以这里我们创建了 "
                    },
                    {
                      "code": true,
                      "text": "MyUser"
                    },
                    {
                      "text": " 类，这样不用去考虑 "
                    },
                    {
                      "code": true,
                      "text": "_User"
                    },
                    {
                      "text": " 类本身存在的一些细节限制。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/AlipayLoginButton/index.js",
          "display": true,
          "commit": "abfd872",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "在 LeanCloud 上创建云函数"
                    }
                  ],
                  "id": "uTlYEt6xD0i"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上一步里面，我们在小程序代码里创建了和 LeanCloud 有关的逻辑代码，其中我们创建了四个云函数，现在我们要创建对应这四个云函数的实际云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注册并登陆 LeanCloud 之后，点击左边栏的 "
                    },
                    {
                      "bold": true,
                      "text": "云引擎 > 部署"
                    },
                    {
                      "text": " 可以看到类似下面的界面："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705b4b3d8296a49.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "LeanCloud 提供给我们在线创建和编写云函数的方便界面，使得我们不用自己创建本地服务器代码和配置部署和运维过程，大大加速了程序的开发过程。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来，我们将遵循以下三步走的方式来进行 LeanCloud 云函数的开发："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "创建云函数"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "部署"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在小程序端进行调试"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 User 逻辑 云函数"
                    }
                  ],
                  "id": "PW2YpXMGgZ4"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "点击界面里面的创建按钮，会看到如下的界面："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705b4b3da0b73ca.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上图分为如下几个部分："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "选择我们要创建的函数类型，主要有三类，这里我们选择 "
                        },
                        {
                          "code": true,
                          "text": "Function"
                        },
                        {
                          "text": " ，这也是默认选择的类型，其余两类读者有兴趣可以自行探索，这里我们不展开讲。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着就是定义你的函数名，这里我们填入 "
                        },
                        {
                          "code": true,
                          "text": "login"
                        },
                        {
                          "text": "。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着就是编写函数体，它是一个 Node.js 函数，我们只需要编写对应的 Node.js 处理逻辑就可以了。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们可以对这个函数写一点注释，方便日后回顾，这里我们选择不填入。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，了解了创建函数的弹出层之后，我们填入我们需要创建的 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 函数体如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const { userInfo } = request.params"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const query = new AV.Query('MyUser')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "query.equalTo('nickName', userInfo.nickName)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const users = await query.find()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "if (users.length > 0) {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return users[0]"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "} else {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const MyUser = AV.Object.extend('MyUser')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const myUser = new MyUser()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const { nickName, avatar } = userInfo"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    myUser.set('nickName', nickName)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    myUser.set('avatar', avatar)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    const user = await myUser.save()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    return user"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到我们上面的内容主要改动有四处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "从 "
                        },
                        {
                          "code": true,
                          "text": "request.params"
                        },
                        {
                          "text": " 取到对应的请求体数据 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": "，这决定了我们之后在小程序端调用 LeanCloud 云函数时，要使用 "
                        },
                        {
                          "code": true,
                          "text": "POST"
                        },
                        {
                          "text": " 的方式。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用了 LeanCloud 的查询 SDK 操作"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着通过 "
                        },
                        {
                          "code": true,
                          "text": "equalTo"
                        },
                        {
                          "text": " 进行条件过滤，这里我们查询 "
                        },
                        {
                          "code": true,
                          "text": "nickName"
                        },
                        {
                          "text": " 为 "
                        },
                        {
                          "code": true,
                          "text": "userInfo.nickName"
                        },
                        {
                          "text": " 的用户。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "通过 "
                        },
                        {
                          "code": true,
                          "text": "query.find()"
                        },
                        {
                          "text": " 来提交查询操作，注意到这里我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "await"
                        },
                        {
                          "text": " 关键字，那是因为默认包裹云函数提的是一个 "
                        },
                        {
                          "code": true,
                          "text": "async"
                        },
                        {
                          "text": " 函数，允许我们方便的执行异步流程。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着我们对查询到的数据进行判断，如果 "
                    },
                    {
                      "code": true,
                      "text": "users.length > 0 "
                    },
                    {
                      "text": " 表示存在用户，那么我们返回查询到的第一个用户；如果不存在，我们执行创建用户操作，再返回创建的用户。"
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "创建用户的操作主要是如下几个步骤："
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "实例化这个类获取一个对象"
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "设置这个对象的属性，这里通过 "
                    },
                    {
                      "code": true,
                      "text": "set(key, value)"
                    },
                    {
                      "text": " 的方式设置"
                    }
                  ]
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "通过对象的 "
                    },
                    {
                      "code": true,
                      "text": "save"
                    },
                    {
                      "text": " 方法进行保存，保存到 LeanCloud 数据库"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里我们只用到了 LeanCloud 的一些简单操作，具体的详情可以查看官方文档，官方文档撰写了非常完备的操作指南："
                        },
                        {
                          "link": true,
                          "url": "https://leancloud.cn/docs/leanstorage_guide-js.html",
                          "text": "点我查看"
                        },
                        {
                          "text": "。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "部署"
                    }
                  ],
                  "id": "qpWfixcntvX"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "按照上面的步骤编写完 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 云函数之后，点击保存，此时我们的云函数就编写好了，但是我们目前在小程序端还无法调用它，因为我们还需要一个部署的操作。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在 LeanCloud 上面进行云函数的部署也同样简单，只需要点击一个按钮："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705b4b43e869c59.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "点我之后，等待部署提示，过一会应该就会提示部署成功，这个时候我们就可以在小程序端通过 REST API 访问了。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "在小程序端进行调试"
                    }
                  ],
                  "id": "JOkKafe1TYu"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们这里使用 LeanCloud 主要是让支付宝小程序也可以成为全栈应用，对应我们之前提到的 H5，因为 Taro 目前对 H5 的支持还不完善，我们决定放弃对 H5 的讲解, 但是这并不代表 Taro 存在缺陷，只能说它是一个很有潜力的框架，成长还需要实践，并且跨端小程序是它诞生的重点，将精力放在主要的路径上是值得提倡的，Taro 在近期发布了 Taro Next，支持使用 Vue/React/Nerve 开发跨端小程序，笔者这里推荐读者可以尝试一波："
                    },
                    {
                      "link": true,
                      "url": "https://taro.jd.com/",
                      "text": "点我跳转"
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为我们首先创建了 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 的云函数，所以我们需要改进一下我们的支付宝登录的按钮逻辑，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/components/AlipayLoginButton/index.js"
                    },
                    {
                      "text": " 对其中的内容作出如下的修改:"
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/AlipayLoginButton/index.js",
              "commit": "abfd872",
              "hiddenLines": [
                [
                  0,
                  1
                ],
                [
                  10,
                  16
                ],
                [
                  38,
                  56
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容改动主要有三处："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们删掉了使用支付宝获取登录信息之后存缓存的逻辑"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们 dispatch 了一个 "
                        },
                        {
                          "code": true,
                          "text": "action.type"
                        },
                        {
                          "text": " 为 LOGIN 的异步 ACTION，并传递了 "
                        },
                        {
                          "code": true,
                          "text": "userInfo"
                        },
                        {
                          "text": " 数据"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们导入了需要的 "
                        },
                        {
                          "code": true,
                          "text": "LOGIN"
                        },
                        {
                          "text": " 常量。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/api/user.js",
          "display": true,
          "commit": "abfd872",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "除了支付宝登录按钮的逻辑改进之外，我们还要改进我们的 api 逻辑，加上对支付宝环境的判断和调用对应的 LeanCloud 云函数。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "code": true,
                      "text": "src/api/user.js"
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/api/user.js",
              "commit": "abfd872",
              "hiddenLines": [
                [
                  11,
                  16
                ],
                [
                  34,
                  41
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面主要做了四处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导入了之前定义的和 LeanCloud 有个的 "
                        },
                        {
                          "code": true,
                          "text": "utils"
                        },
                        {
                          "text": " 函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们加入了对 H5 环境的判断。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们增加了一个 "
                        },
                        {
                          "code": true,
                          "text": "else if"
                        },
                        {
                          "text": " 流程，用于判断在支付宝小程序或者 H5 环境下需要执行发起 REST 请求的逻辑，这里我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "Taro.request"
                        },
                        {
                          "text": " 进行网络请求，并传入了对应的 "
                        },
                        {
                          "code": true,
                          "text": "url"
                        },
                        {
                          "text": " 、"
                        },
                        {
                          "code": true,
                          "text": "header"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": "，以及将请求的类型设置为 "
                        },
                        {
                          "code": true,
                          "text": "POST"
                        },
                        {
                          "text": "，之前我们提到过，对 LeanCloud 云函数发起请求都需要使用 "
                        },
                        {
                          "code": true,
                          "text": "POST"
                        },
                        {
                          "text": " 方法。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们将从 LeanCloud 拿到的请求结果使用 "
                        },
                        {
                          "code": true,
                          "text": "convertUserFormat "
                        },
                        {
                          "text": " 做了一次格式的转换，以适应现有的微信小程序数据类型。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了，通过以上三步流程，我们就跑通了小程序类请求 LeanCloud 的流程，保存修改的代码，让我们马上打开支付宝小程序试一下吧！"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705b4b43fe789ae.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/api/post.js",
          "display": true,
          "commit": "abfd872",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "创建 Post 逻辑云函数"
                    }
                  ],
                  "id": "vzoDgOmYQBN"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在上一节中，我们创建了 User 逻辑的 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 云函数，在这一节中，我们来收尾 Post 逻辑的三个云函数："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "createPost"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "getPosts"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "code": true,
                          "text": "getPost"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为创建的逻辑和方式和之前的 "
                    },
                    {
                      "code": true,
                      "text": "login"
                    },
                    {
                      "text": " 云函数类似，我们这里不再赘述，会简单的贴一下代码，但我们同样按照之前的三步流程来讲解。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "创建云函数"
                    }
                  ],
                  "id": "l0a_J-_fGUm"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先创建我们的 "
                    },
                    {
                      "code": true,
                      "text": "createPost"
                    },
                    {
                      "text": " 云函数，其代码如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const { postData, userId } = request.params"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const Post = AV.Object.extend('Post')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const post = new Post();"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const myUser = AV.Object.createWithoutData('MyUser', userId)"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const newPost = await post.save({"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    ...postData,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    user: myUser"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "});"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const query = new AV.Query('Post')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const postWithUser = await query.equalTo('objectId', newPost.get('objectId')).include('user').first()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "return postWithUser"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着来创建我们的获取帖子列表的云函数 "
                    },
                    {
                      "code": true,
                      "text": "getPosts"
                    },
                    {
                      "text": "，其代码如下："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const query = new AV.Query('Post')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const posts = await query.include('user').find()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "return posts"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后是我们的获取帖子详情的云函数 "
                    },
                    {
                      "code": true,
                      "text": "getPost"
                    },
                    {
                      "text": "："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "JavaScript",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const { postId } = request.params"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const query = new AV.Query('Post')"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "const post = await query.equalTo('objectId', postId).include('user').first()"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "return post"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "部署"
                    }
                  ],
                  "id": "lcKXJKikptY"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，三个和 Post 逻辑有关的云函数创建好了，我们马上点击部署按钮来将它们部署上线。"
                    }
                  ]
                },
                {
                  "type": "heading-four",
                  "children": [
                    {
                      "text": "在小程序端测试"
                    }
                  ],
                  "id": "fWx3tZ7w-vL"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当创建好云函数，并部署好之后，我们就可以在小程序端编写对应的代码进行测试了，打开 "
                    },
                    {
                      "code": true,
                      "text": "src/api/post.js"
                    },
                    {
                      "text": " 文件，对其中的代码做出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/api/post.js",
              "commit": "abfd872",
              "hiddenLines": [
                [
                  20,
                  26
                ],
                [
                  45,
                  47
                ],
                [
                  55,
                  57
                ],
                [
                  72,
                  74
                ],
                [
                  82,
                  87
                ],
                [
                  105,
                  114
                ]
              ],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面主要做了四处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "首先我们导入了之前定义的和 LeanCloud 有关的 "
                        },
                        {
                          "code": true,
                          "text": "utils"
                        },
                        {
                          "text": " 函数。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们加入了对 H5 环境的判断。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们增加了一个 "
                        },
                        {
                          "code": true,
                          "text": "else if"
                        },
                        {
                          "text": " 流程，用于判断在支付宝小程序或者 H5 环境下需要执行发起 REST 请求的逻辑，这里我们使用了 "
                        },
                        {
                          "code": true,
                          "text": "Taro.request"
                        },
                        {
                          "text": " 进行网络请求，并传入了对应三个和 Post 逻辑有关的 "
                        },
                        {
                          "code": true,
                          "text": "url"
                        },
                        {
                          "text": " 、以及对应的 "
                        },
                        {
                          "code": true,
                          "text": "header"
                        },
                        {
                          "text": "、"
                        },
                        {
                          "code": true,
                          "text": "data"
                        },
                        {
                          "text": "，以及将请求的类型设置为 "
                        },
                        {
                          "code": true,
                          "text": "POST"
                        },
                        {
                          "text": "，之前我们提到过，对 LeanCloud 云函数发起请求都需要使用 "
                        },
                        {
                          "code": true,
                          "text": "POST"
                        },
                        {
                          "text": " 方法。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们将从 LeanCloud 拿到的请求结果使用 "
                        },
                        {
                          "code": true,
                          "text": "convertPostFormat "
                        },
                        {
                          "text": " 做了一次格式的转换，以适应现有的微信小程序数据类型。"
                        }
                      ],
                      "parent": "bulleted-list",
                      "level": 0
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好了，通过以上三步流程，我们就跑通了小程序类请求 LeanCloud 的流程，保存修改的代码，让我们马上打开支付宝小程序试一下吧！"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "type": "image",
                      "url": "https://static.tuture.co/c/34a473b/1705b4b44d2d0cc8.jpeg",
                      "children": [
                        {
                          "text": ""
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "u8Yyw_jX8N7"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这篇文章中，我们讲解了支付宝小程序接入 LeanCloud Serverless 云服务的过程，我们再来复习一下整个流程："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "首先我们讲解了微信小程序云的不足，然后引出了 LeanCloud 来实现跨端小程序开发"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着我们介绍了 LeanCloud 服务的配置过程，具体包含 1）注册登录 LeanCloud 2）配置对应的小程序后台的白名单。且因为 LeanCloud 没有支付宝小程序的 SDK，所以我们采用 REST 请求的方式来获取和修改对应的数据"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着我们讲解了如何在 LeanCloud 上面创建数据表。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "接着，我们介绍了如何在 LeanCloud 创建云函数。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "最后我们通过三步走流程：1）创建云函数 2）部署 3）在小程序端测试，创建了我们需要的四个云函数。"
                    }
                  ],
                  "parent": "bulleted-list",
                  "level": 0
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们再来看一下整体的接入效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4e9b0b79869.gif",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "到这里我们的 "
                },
                {
                  "bold": true,
                  "text": "Taro 多端小程序开发大型实战"
                },
                {
                  "text": " 就基本告一段落了，整个教程内容想当长，涵盖的内容也相当多，这也是图雀社区最长的一个系列教程。最后希望 Taro 社区越来越好，也希望能帮到您！"
                }
              ]
            },
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "One More Thing"
                }
              ],
              "id": "MrqZVklX9ib"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们在之前的教程中花了8篇文章的篇幅讲解了小程序从0到开发完成的过程，但是我们还没将如何将小程序上线，这里我们再额外花一点笔墨讲一下如何上线你的小程序，因为小程序的上线很容易，所以内容不会很长，有兴趣的读者可以继续读下去ღ( ´･ᴗ･` )比心。"
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "微信小程序上线"
                }
              ],
              "id": "GdDTIImxh1y"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先点击小程序开发者工具的右上角的上传按钮："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4c4db32af08.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接着去微信小程序网站后台："
                },
                {
                  "link": true,
                  "url": "https://mp.weixin.qq.com/wxamp/home/guide?lang=zh_CN&token=160873486",
                  "text": "点我前往"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进行登录之后，在进来的第一个页面的第二步可以看见版本发布的信息，安装微信官方的流程进行即可。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4b456f9d5c4.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "heading-four",
              "children": [
                {
                  "text": "支付宝小程序上线"
                }
              ],
              "id": "-ZB1G_XHJQn"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先点击支付宝小程序开发者工具的右上角上传按钮："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4b49d020734.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "接着去支付宝小程序后台："
                },
                {
                  "link": true,
                  "url": "https://mini.open.alipay.com/channel/miniIndex.htm",
                  "text": "点我前往"
                },
                {
                  "text": "。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "进行登录之后，点击顶部的 开发中心，选择小程序应用，选择你的小程序应用，然后同样可以看到类似发布上线的栏目，安装支付宝官方的流程进行发布就可以了。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "type": "image",
                  "url": "https://static.tuture.co/c/34a473b/1705b4c4e4d77b6d.jpeg",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "微信/支付宝小程序对于有社交、社区性质的小程序是需要企业认证的，所以有类似需求的需要做一下准备。"
                    }
                  ]
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "好了，到这里我们的要说再见了 👋！希望你们学得开心！"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
      "id": "9615525d",
      "articleId": "2b5a9f18",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
          "id": "5ef4af80",
          "fixed": true,
          "children": [
            {
              "text": "准备新版登录逻辑"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "之前我们的小程序具有了一个简单博客必备的一些功能："
                }
              ]
            },
            {
              "type": "bulleted-list",
              "children": [
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "权限管理：发帖之前需要登录"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "登录：普通登录和微信登录等"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "发帖：帖子会自动带上用户信息"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                },
                {
                  "type": "list-item",
                  "children": [
                    {
                      "text": "获取所有帖子和单个帖子"
                    }
                  ],
                  "level": 0,
                  "parent": "bulleted-list"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "乍一看这个博客有点小完整了，但是一路跟下来的同学应该知道，我们之前的登录都是通过传入用户的 "
                },
                {
                  "text": "nickName",
                  "code": true
                },
                {
                  "text": " 和 "
                },
                {
                  "text": "photo",
                  "code": true
                },
                {
                  "text": " 来登录的，但是我们一般在生活中看到的一些比较正规的网站或者小程序，它们的登录一般都有类似手机+验证码登录，并且在一个标准的博客里面，可能还会涉及到诸如用户权限管理，用户登录状态查询等，刚刚我提到的种种关于用户的场景一般会被抽象为一个应用里的一个核心模块 -- 用户系统，即所有和用户注册/登录、信息更新、权限管理、鉴权等相关的内容。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "为了让我们的博客看起来更加专业，我们打算给它也加上整上一个专业的用户系统，有了最为核心的用户系统在，我们博客之后的扩展都可以游刃有余，但是据统计，一个应用要想打造一个比较专业的用户系统，至少需要花费几个月时间，还需要花大量的精力去维护打造出来的用户系统，所在在做了一番调研之后，我们将目标放在了一个叫做 Authing 的通用云身份平台，它提供的服务就是帮应用快速集成一个高效、安全的用户系统，而我们这篇教程将会讲解如何借助 Authing 来给我们的之前的小程序博客武装一个专业的用户系统。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "首先我们先来看一看完成的效果："
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": "\n"
                }
              ],
              "url": "https://static.tuture.co/c/34a473b/172281ab2f4dfe98.gif"
            },
            {
              "type": "image",
              "url": "https://cdn.nlark.com/yuque/0/2020/gif/123790/1588231679722-a000569d-8acf-4e8c-be6d-e7288dadacb2.gif",
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "如果你希望直接从这篇开始，那么可以 Clone 我们为你准备的代码，然后跟着教程补充剩下的部分："
                }
              ]
            },
            {
              "type": "code-block",
              "children": [
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b authing-start https://github.com/tuture-dev/ultra-club.git\n"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "# 或者下载 Gitee 上的仓库"
                    }
                  ]
                },
                {
                  "type": "code-line",
                  "children": [
                    {
                      "text": "git clone -b authing-start https://gitee.com/tuture/ultra-club.git"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/LoginForm/index.jsx",
          "display": true,
          "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "改进普通登录"
                    }
                  ],
                  "id": "DribpXYIQ"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "首先我们来将之前普通登录的专业性提升一个档次，之前我们是让用户输入昵称和上传头像然后进行登录，现在我们打算切换到手机号+验证码的形式，立马现代化。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "text": "src/components/LoginForm/index.jsx",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.jsx",
              "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的代码主要有如下几处更改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "删除了处理 "
                        },
                        {
                          "text": "avatar",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "nickName",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "useState",
                          "code": true
                        },
                        {
                          "text": " 逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "删除了之前用于处理上传头像的 "
                        },
                        {
                          "text": "onImageClick",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "onChange",
                          "code": true
                        },
                        {
                          "text": " 函数，以及 "
                        },
                        {
                          "text": "AtImagePicker",
                          "code": true
                        },
                        {
                          "text": " 组件"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "改进和增加了两个输入框，一个用于输入手机号，一个用于输入验证码，同是增加了 "
                        },
                        {
                          "text": "phone",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "phoneCode",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "useState",
                          "code": true
                        },
                        {
                          "text": " 逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "改进 "
                        },
                        {
                          "text": "handleSubmit",
                          "code": true
                        },
                        {
                          "text": " ，删除了原处理 "
                        },
                        {
                          "text": "nickName",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "files",
                          "code": true
                        },
                        {
                          "text": " 的逻辑，以及删除了之前发起登录的 "
                        },
                        {
                          "text": "dispatch",
                          "code": true
                        },
                        {
                          "text": " 逻辑"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们增加了一个用于倒计时的 "
                        },
                        {
                          "text": "CountDownButton",
                          "code": true
                        },
                        {
                          "text": " 组件，以及获取 "
                        },
                        {
                          "text": "ref",
                          "code": true
                        },
                        {
                          "text": " 的 "
                        },
                        {
                          "text": "countDownButtonRef",
                          "code": true
                        },
                        {
                          "text": " 和处理按钮点击事件的 "
                        },
                        {
                          "text": "countDownButtonPressed",
                          "code": true
                        },
                        {
                          "text": " 函数，在函数里面我们会做数据验证，如果用户填写了手机号，才允许执行倒计时逻辑，在接下来我们将在这个函数里面处理手机验证码发送逻辑。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们添加了提示用户使用手机和验证码登录的文案。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "这里的 CountDownButton 是 Taro 官方物料市场提供的物料，可以访问 "
                        },
                        {
                          "text": "这个地址",
                          "link": true,
                          "url": ""
                        },
                        {
                          "text": "，下载物料，然后将 CountDownButton 的文件夹放到 "
                        },
                        {
                          "text": "src/compontents",
                          "code": true
                        },
                        {
                          "text": " 文件夹下面。我们还需要对这个组件的样式做一点修改，以适应我们现在的 UI 风格，我们将马上来讲解如何修改，读者先可以下载这个物料，然后放置到刚刚提到的项目目录下。"
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/LoginForm/index.scss",
          "display": true,
          "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "样式改进"
                    }
                  ],
                  "id": "VcTHgR1mi"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "上面我们改进了组件，为了让我们的新版登录样子看起来更加专业、统一，我们加点样式，打开 "
                    },
                    {
                      "text": "src/components/LoginForm/index.scss",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.scss",
              "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "package.json",
          "display": false,
          "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "package.json",
              "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountDownButton/index.js",
          "display": false,
          "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountDownButton/index.js",
              "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/CountDownButton/index.scss",
          "display": true,
          "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "使用 Taro 物料"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们上面用到的 "
                    },
                    {
                      "text": "CountDownButton",
                      "code": true
                    },
                    {
                      "text": " 组件，就是 Taro 物料市场的一个物料, 简单的说物料就是一个能某方面功能完善的包或组件,帮助开发者快速完成某个逻辑而不需要重复造轮子,正如 Taro 物料市场官方的标语："
                    }
                  ]
                },
                {
                  "type": "block-quote",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "让每一个让每一个轮子产生价值"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们通过之前的步骤，应该已经下载好了物料，并放在了 "
                    },
                    {
                      "text": "src/components",
                      "code": true
                    },
                    {
                      "text": " 文件夹下面了，可以看到组件中主要就是两个文件，一个逻辑文件 "
                    },
                    {
                      "text": "src/components/CountDownButton/index.js",
                      "code": true
                    },
                    {
                      "text": " ，还有一个样式文件 "
                    },
                    {
                      "text": "src/components/CountDownButton/index.css",
                      "code": true
                    },
                    {
                      "text": "是，这里我们要做个小修改就是逻辑文件里面引用的是 "
                    },
                    {
                      "text": "index.scss",
                      "code": true
                    },
                    {
                      "text": " 文件，我们需要一下这个样式文件的后缀为 "
                    },
                    {
                      "text": "index.scss",
                      "code": true
                    },
                    {
                      "text": " 。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着为了和我们的现有的 UI 统一，我们还改了 "
                    },
                    {
                      "text": "src/components/CountDownButton/index.scss",
                      "code": true
                    },
                    {
                      "text": "文件的 "
                    },
                    {
                      "text": "activeButtonStyle",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "buttonCommonStyle",
                      "code": true
                    },
                    {
                      "text": " 样式，最后的文件内容如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/CountDownButton/index.scss",
              "commit": "4a85cd005d8be613d08c18c25ea1633703e30eba",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "大功告成！🥳，我们成功的完成了新版普通登录的界面，当你保存代码，并在根目录下通过 "
                },
                {
                  "text": "npm run dev:weapp",
                  "code": true
                },
                {
                  "text": " 开启微信小程序，并使用开发者工具打开我们的项目时，它的效果应该类型下面这样："
                }
              ]
            },
            {
              "type": "image",
              "children": [
                {
                  "text": ""
                }
              ],
              "url": "https://static.tuture.co/c/34a473b/172281ab2f71d1d2.png"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "怎么样，是不是和你之前体验的各种专业 App 或者网站、小程序的登录注册界面和逻辑类似了呢？😆，有了这样一个专业的登录界面之后，我们接下来将要把它整个从前端到后端的逻辑跑通，下一步我们将跑通这个登录和注册逻辑。"
                }
              ]
            },
            {
              "type": "note",
              "level": "info",
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这里我们将登录和注册页面整合在了一起，通过在登录按钮下方的小文字提示，如果用户没有账号，那么通过手机号和验证码登录之后，我们会为用户直接注册一个账号，而简化界面逻辑的背后通常需要在代码逻辑上做出大量的改进、优化等，然而我们在下一步即将接入的通用的身份云平台 -- Authing 则将这一逻辑简化到了几行代码。"
                    }
                  ]
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
      "id": "4a56dd05",
      "articleId": "2b5a9f18",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "id": "3b86945e",
          "fixed": true,
          "children": [
            {
              "text": "使用 Authing 接入完整的用户系统"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在文章开头和上一小结末尾买了那么多关子，说 Authing 如何简化我们的开发成本，有些读者估计都有点急不可耐了，这个 Authing 有这么方便嘛？，我们这一节就来开始深入使用它。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/LoginForm/index.jsx",
          "display": true,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "为了将 Authing 接入我们的博客小程序，我们需要做以下几点准备："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "注册 Authing 账号并创建一个 “小程序” 类型的用户池"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "通过官方文档，找到小程序 SDK，并下载对于的文件放置到项目目录下"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在项目代码中导入 Authing 小程序 SDK，并开始使用"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "注册 Authing 账号"
                    }
                  ],
                  "id": "TmUqHchUx"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开"
                    },
                    {
                      "text": " Authing 官网",
                      "link": true,
                      "url": "https://authing.cn/?utm_source=tuture"
                    },
                    {
                      "text": "，我们会看到如下界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab2faef61e.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们点击右上角的登录，可以看到，它会弹出如下界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab31cb9682.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们这时候可以慢下脚步，好好看一下提供通用身份云平台的公司，他们的登录界面是怎么样的呢？可以看到，我们熟悉的微信登录、邮箱+密码登录、手机号+验证码登录、还有技术开发者常用的 Github 登录，甚至还有一个比较特殊的小程序扫码登录，基本将互联网上我们可能用到的最高效率的用户登录、注册功能逻辑都集成进了一个小小的表单里面。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "读者可以自行选择自己喜欢的登录方式😋，这里图雀酱选择了微信登录，然后在弹出的扫码界面，使用微信扫码二维码登录。登录之后，会弹出一个界面让你绑定手机号，读者这里可以自行选择是否绑定。当完成了这一步操作之后，界面会导航带你来到一个创建应用的界面，我们选择小程序，然后点击下一步："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab328a8600.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着，会问你的应用是干什么的，我们填入：“图雀社区博客小程序”（读者这里可以自行脑补），然后我们点击下一步："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab6a4f7cf8.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着会让你设置一个二级域名，我们输入 tuture-blog-miniprogram，然后我们点击完成："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab5e1312d8.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们回来到一个快速体验 Authing 功能的界面，系统为你默认创建了一个账号："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "账号："
                        },
                        {
                          "text": "test@test.com",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "密码："
                        },
                        {
                          "text": "123456a!",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "你可以在右边的界面里面体验是否可以登录，当然你也可以注册一个用户，注册的用户稍后我们可以在控制台我们创建的 “图雀社区博客小程序” 用户池里面看到这个注册的用户："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab6fdfbb33.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "并且上面的界面还讲解了如何快速集成  Authing 的登录功能和检查登录状态，并给出了 JS 实现代码，以及左下角的 Guard ，这个 Guard 简单来说就是一个集合了我们之前看到的 Authing 那个注册、登录表单的功能，并且提供一个专业的界面给你，使得你可以几行代码就实现一个类似 Authing 官方注册登录的那个样子。也就是我们刚刚看到的这个界面："
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab31cb9682.png"
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "paragraph",
                      "children": [
                        {
                          "text": "我们在图雀社区的全栈电商系列文章的番外篇里面集成用户系统有讲到如何使用，感兴趣的读者可以阅读此篇文章。"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "好的，我们点击左下角的 “知道了，进入控制台”，开始进入我们的 Authing 用户池管理控制台，在此之前还会让你填写一个回调地址，这个我们暂时用不到，你可以跳过，或者可以随便填写一个，比如 "
                    },
                    {
                      "text": "http://localhost:3000",
                      "code": true
                    },
                    {
                      "text": "。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们来到了这样一个界面："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab67e5569b.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到这个界面左侧就是我们之前一直提到的 “用户池” 管理界面，默认选中了我们刚刚创建的 “图雀社区博客小程序”，一个用户池就是一整套用户以及和用户登录、注册、鉴权、登录状态、活跃、权限等有关的逻辑。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "中间就是单个用户池里面的一些介绍，比如我们现在看到的是一个类似 Github 那个热力图一样的用户登录热力图，你可以方便的看到那天有多少次用户登录，往下滑可以看到更多用户数据分析方面的图表和内容。"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "下载和配置 SDK"
                    }
                  ],
                  "id": "NXyVRzo2v"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "注册完账号、建立了用户池，我们需要下载 Authing 为我们提供的微信小程序 SDK 来集成用户系统，点击"
                    },
                    {
                      "text": "这个链接",
                      "link": true,
                      "url": "https://docs.authing.cn/authing/sdk/authing-sdk-for-wxapp?utm_source=tuture"
                    },
                    {
                      "text": "去往小程序开发文档。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "根据文档，我们需要在微信小程序后台配置两个域名白名单："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "https://oauth.authing.cn",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "https://users.authing.cn",
                          "code": true
                        },
                        {
                          "text": " "
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后将微信小程序的 "
                    },
                    {
                      "text": "AppId",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "AppSecret",
                      "code": true
                    },
                    {
                      "text": " 填入 Authing 对应的地址："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab696b133d.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "这个界面，然后滑动到底部，选择小程序内登陆："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab9666de85.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "在弹出的框里面填入对应的微信小程序的 "
                    },
                    {
                      "text": "AppId",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "AppSecret",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab9903fdd9.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "配置好之后，我们接下来可以将 SDK 代码下载，并放进我们的项目里，找一个地方（非现有项目中），运行如下脚本，Clone 小程序 SDK："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ git clone https://github.com/Authing/authing-wxapp-sdk"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "然后打开此项目，将其中的 "
                    },
                    {
                      "text": "authing",
                      "code": true
                    },
                    {
                      "text": " 文件夹拷贝进我们 "
                    },
                    {
                      "text": "ultra-club",
                      "code": true
                    },
                    {
                      "text": " 小程序的 "
                    },
                    {
                      "text": "src/utils",
                      "code": true
                    },
                    {
                      "text": " 目录下，最后的目录结构看起来应该是这样："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "src"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "├── store"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "│   └── index.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "└── utils"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    └── authing"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        ├── authing.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        ├── configs.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        ├── graphql"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        │   └── wxgql.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        └── utils"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "            ├── qiniuUploader.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "            ├── util.js"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "            └── wxapp_rsa.min.js"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "SDK 开发环境准备就绪✌️，我们接下来马上来集成手机号+验证码登录的身份逻辑！"
                    }
                  ]
                },
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "开始集成"
                    }
                  ],
                  "id": "1H5Tqr4Cw"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "text": "src/components/LoginForm/index.jsx",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/LoginForm/index.jsx",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要有如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们首先引入了上一步里面下载的 Authing  SDK"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们定义了一个 "
                        },
                        {
                          "text": "userPoolId",
                          "code": true
                        },
                        {
                          "text": " ，这就是我们前面创建 “图雀社区博客小程序” 用户池的标志 ID，这里读者需要前往 Authing 控制台界面，获取用户池 ID，并替换上面的空字符串："
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281ab9d8b1772.png"
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们在 "
                        },
                        {
                          "text": "countDownButtonPressed",
                          "code": true
                        },
                        {
                          "text": " 函数内进行发起手机验证码操作，我们首先使用 "
                        },
                        {
                          "text": "new Authing",
                          "code": true
                        },
                        {
                          "text": " 传入用户池 ID "
                        },
                        {
                          "text": "userPoolId",
                          "code": true
                        },
                        {
                          "text": " 初始化一个一个实例并命名为 "
                        },
                        {
                          "text": "authing",
                          "code": true
                        },
                        {
                          "text": " ，这一步代表我们拿到了此页用户池的操作权，接下来我们就可以进行用户有关的操作了。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用 "
                        },
                        {
                          "text": "authing.getVerificationCode",
                          "code": true
                        },
                        {
                          "text": " 方法，传入填写的手机号 "
                        },
                        {
                          "text": "phone",
                          "code": true
                        },
                        {
                          "text": " ，它是一个异步 Promise 对象，所以我们用 "
                        },
                        {
                          "text": "await",
                          "code": true
                        },
                        {
                          "text": " 关键字获取其结果，当结果 "
                        },
                        {
                          "text": "res.code",
                          "code": true
                        },
                        {
                          "text": " 为 200，代表发送验证码成功，我们提示用户发送验证码成功，否则提醒发送验证码失败，当编写了上面的代码并保存之后，我们可以打开小程序尝试一下效果，输入手机号，并点击发送验证码："
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281aba373023a.gif"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "当然上面的手机号我瞎输入的，读者请自行输入自己的手机号尝试，接着应该可以在手机上收到验证码短信："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281aba386117a.jpeg"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "Boom💥！可以看到简单几行代码，我们就搞定了手机验证码的发送。"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接下来我们需要完善一下使用手机+验证码登录的逻辑，我们在 "
                        },
                        {
                          "text": "handleSubmit",
                          "code": true
                        },
                        {
                          "text": " 里面编写了一个 "
                        },
                        {
                          "text": "try/catch",
                          "code": true
                        },
                        {
                          "text": " 语句，然后初始化 Authing 对象，并调用方法 "
                        },
                        {
                          "text": "authing.loginByPhoneCode",
                          "code": true
                        },
                        {
                          "text": " 传入我们的手机号（"
                        },
                        {
                          "text": "phone",
                          "code": true
                        },
                        {
                          "text": " ）和验证码 "
                        },
                        {
                          "text": "phoneCode",
                          "code": true
                        },
                        {
                          "text": " ，进行调用之后，我们就完成了手机号+验证码登录，这个方法默认会对未登录用户进行创建账号操作，不需要用户额外处理其他逻辑。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着，我们通过登录成功返回的 "
                        },
                        {
                          "text": "userInfo",
                          "code": true
                        },
                        {
                          "text": " 拿到内容，做出修改并设置到 "
                        },
                        {
                          "text": "storage",
                          "code": true
                        },
                        {
                          "text": " 里，以及存在  Redux Store 里面，并提示用户登录成功。当然如果登录失败，我们还会提示用户登录失败。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "note",
                  "level": "info",
                  "children": [
                    {
                      "type": "numbered-list",
                      "children": [
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "这里我们做了数据格式的适应，如将 Authing 登录返回的用户信息 "
                            },
                            {
                              "text": "userInfo.nickname",
                              "code": true
                            },
                            {
                              "text": " 适应成 "
                            },
                            {
                              "text": "nickName",
                              "code": true
                            },
                            {
                              "text": " ，是为了匹配之前的小程序系统的数据格式。"
                            }
                          ],
                          "level": 0,
                          "parent": "numbered-list",
                          "number": 1
                        },
                        {
                          "type": "list-item",
                          "children": [
                            {
                              "text": "可以看到我们额外存了一个 "
                            },
                            {
                              "text": "userInfo.token",
                              "code": true
                            },
                            {
                              "text": " 到 "
                            },
                            {
                              "text": "storage",
                              "code": true
                            },
                            {
                              "text": " 里面，这个 "
                            },
                            {
                              "text": "token",
                              "code": true
                            },
                            {
                              "text": " 就是我们用户系统里面用于用户鉴权的标志，之后我们将用这个 token 来检查用户的登录状态并进行用户登录态的保持。"
                            }
                          ],
                          "level": 0,
                          "parent": "numbered-list",
                          "number": 2
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "一切准备就绪，接下来我们填入手机号，点击获取验证码，并将验证码填入小程序的输入框，点击登录应该就可以登录成功："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281abae530ec7.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们收获了一个默认的 “酷酷的头像”，并且提示了登录成功。大功告成，一个专业的只需要手机号+验证码的登录界面+逻辑我们就完整实现了，可以看到我们主要在界面的调整和 SDK的引入上废了一点功夫，实际上实现整个逻辑，真的只需要几行代码！因为 Authing 在背后做了大量的工作来确保上层逻辑的简单。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/authing/authing.js",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/authing/authing.js",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/authing/configs.js",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/authing/configs.js",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/authing/graphql/wxgql.js",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/authing/graphql/wxgql.js",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/authing/utils/qiniuUploader.js",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/authing/utils/qiniuUploader.js",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/authing/utils/util.js",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/authing/utils/util.js",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/utils/authing/utils/wxapp_rsa.min.js",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/utils/authing/utils/wxapp_rsa.min.js",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "yarn.lock",
          "display": false,
          "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "yarn.lock",
              "commit": "dfea82b0b6e11d1a575d99e95337f72c8a4eb6f9",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "a23726a6b28dc78330c794563ee49b7980303266",
      "id": "46d1a46e",
      "articleId": "2b5a9f18",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "a23726a6b28dc78330c794563ee49b7980303266",
          "id": "943521d2",
          "fixed": true,
          "children": [
            {
              "text": "处理登出逻辑"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在上一小节中，我们成功将登录逻辑迁移到了手机号+验证码的方式，并且通过简单几行代码实现了验证码的发送，以及登录。"
                }
              ],
              "id": "_NPBDgWlS"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "因为我们的登录逻辑相比之前有了一些变化，所以我们要适当的调整我们的登出逻辑，以适应这些变化。"
                }
              ],
              "id": "_NPBDgWlS"
            }
          ]
        },
        {
          "file": "src/components/Logout/index.js",
          "display": true,
          "commit": "a23726a6b28dc78330c794563ee49b7980303266",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "改进登出组件"
                    }
                  ],
                  "id": "6Ee1fGaau"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "text": "src/components/Logout/index.js",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容做出对应的修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Logout/index.js",
              "commit": "a23726a6b28dc78330c794563ee49b7980303266",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要有如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "text": "handleLogout",
                          "code": true
                        },
                        {
                          "text": " 函数里处理登出逻辑的时候，首先初始化了一个 "
                        },
                        {
                          "text": "authing",
                          "code": true
                        },
                        {
                          "text": " 实例，主要这里的 "
                        },
                        {
                          "text": "userPoolId",
                          "code": true
                        },
                        {
                          "text": " 也需要读者替换成你自己的，可以在 Authing 控制台获取，接着调用 "
                        },
                        {
                          "text": "authing.logout",
                          "code": true
                        },
                        {
                          "text": " 传入用户的 "
                        },
                        {
                          "text": "userId",
                          "code": true
                        },
                        {
                          "text": " 来登出此用户，这样之后就不能操作 Authing 上创建的用户池了"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "关于 "
                        },
                        {
                          "text": "userId",
                          "code": true
                        },
                        {
                          "text": " 的获取，我们使用了 "
                        },
                        {
                          "text": "react-redux",
                          "code": true
                        },
                        {
                          "text": " 钩子 "
                        },
                        {
                          "text": "useSelector",
                          "code": true
                        },
                        {
                          "text": " 从 Redux Store 里面获取。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "最后我们还要删除 "
                        },
                        {
                          "text": "storage",
                          "code": true
                        },
                        {
                          "text": " 里面存储的 "
                        },
                        {
                          "text": "token",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/Footer/index.js",
          "display": true,
          "commit": "a23726a6b28dc78330c794563ee49b7980303266",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "清理其他登出逻辑"
                    }
                  ],
                  "id": "LOxxznSH-"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "因为目前我们的登陆不是之前的使用 "
                    },
                    {
                      "text": "nickName",
                      "code": true
                    },
                    {
                      "text": " 和 "
                    },
                    {
                      "text": "avatar",
                      "code": true
                    },
                    {
                      "text": " ，而是使用手机号+验证码，所以我们一登录之后默认的 "
                    },
                    {
                      "text": "nickName",
                      "code": true
                    },
                    {
                      "text": " 为空，而我们之前的判断用户是否登录的组件逻辑都是判断 "
                    },
                    {
                      "text": "nickName",
                      "code": true
                    },
                    {
                      "text": " 是否存在，这里就有问题了，所以我们需要修改一下。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "打开 "
                    },
                    {
                      "text": "src/components/Footer/index.js",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Footer/index.js",
              "commit": "a23726a6b28dc78330c794563ee49b7980303266",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要就是将 "
                    },
                    {
                      "text": "nickName",
                      "code": true
                    },
                    {
                      "text": " 替换成了 "
                    },
                    {
                      "text": "userId",
                      "code": true
                    },
                    {
                      "text": " ，并用 "
                    },
                    {
                      "text": "userId",
                      "code": true
                    },
                    {
                      "text": " 判断是否处于登录状态。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/Header/index.js",
          "display": true,
          "commit": "a23726a6b28dc78330c794563ee49b7980303266",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "同样的，"
                    },
                    {
                      "text": "src/components/Header/index.js",
                      "code": true
                    },
                    {
                      "text": " 也要作出类似的修改："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/Header/index.js",
              "commit": "a23726a6b28dc78330c794563ee49b7980303266",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/mine/mine.jsx",
          "display": true,
          "commit": "a23726a6b28dc78330c794563ee49b7980303266",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "还有我们的 “我的” 页面，"
                    },
                    {
                      "text": "src/pages/mine/mine.jsx",
                      "code": true
                    },
                    {
                      "text": " 文件："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/mine/mine.jsx",
              "commit": "a23726a6b28dc78330c794563ee49b7980303266",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "a23726a6b28dc78330c794563ee49b7980303266",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "最后，我们修改首页的 "
                    },
                    {
                      "text": "src/pages/index/index.jsx",
                      "code": true
                    },
                    {
                      "text": " ："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "a23726a6b28dc78330c794563ee49b7980303266",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "修改了如上代码并保存之后，打开应用，我们点击登出，应该顺利看到如下效果："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281abc7d4f9b3.gif"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-three",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "yST5eL2qI"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在这一节中，我们呼应使用 Authing 登录的逻辑，对应修改了登出逻辑，并且使用 "
                },
                {
                  "text": "userId",
                  "code": true
                },
                {
                  "text": " 替换 "
                },
                {
                  "text": "nickName",
                  "code": true
                },
                {
                  "text": " 作为是否登录的判断标准。"
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "29ce05bdb74dd53f6d83b82591186d2d1d10835b",
      "id": "882f88b5",
      "articleId": "2b5a9f18",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "29ce05bdb74dd53f6d83b82591186d2d1d10835b",
          "id": "b1570f5a",
          "fixed": true,
          "children": [
            {
              "text": "集成微信授权登录"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在前两小节中，我们使用 Authing 集成了手机号+验证码的登录逻辑，然后处理了登出逻辑，有同学可能会问了，我们之前是取代了普通登录，还有一个微信登录，我们是不是也可以用 Authing 来进行替换呢？毕竟集成用户系统肯定要全面集成，答案是可以！"
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/WeappLoginButton/index.js",
          "display": true,
          "commit": "29ce05bdb74dd53f6d83b82591186d2d1d10835b",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接下来我们将使用 Authing 为我们提供的 "
                    },
                    {
                      "text": "loginWithWxapp",
                      "code": true
                    },
                    {
                      "text": " ，快捷的将微信授权登录集成好，打开 "
                    },
                    {
                      "text": "src/components/WeappLoginButton/index.js",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/WeappLoginButton/index.js",
              "commit": "29ce05bdb74dd53f6d83b82591186d2d1d10835b",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到上面的内容主要有如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们删除了之前简单粗暴获取到 "
                        },
                        {
                          "text": "userInfo",
                          "code": true
                        },
                        {
                          "text": " 里面的 "
                        },
                        {
                          "text": "nickName",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "avatarUrl",
                          "code": true
                        },
                        {
                          "text": " 就发起登录的代码逻辑。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "text": "onGetUserInfo",
                          "code": true
                        },
                        {
                          "text": " 里面初始化了一个 "
                        },
                        {
                          "text": "authing",
                          "code": true
                        },
                        {
                          "text": " 实例，然后定义了一个 "
                        },
                        {
                          "text": "loginWithAuthing",
                          "code": true
                        },
                        {
                          "text": " 方法，具体细节我们马上讲解，然后我们使用 "
                        },
                        {
                          "text": "Taro.login",
                          "code": true
                        },
                        {
                          "text": " 调用微信授权登录 API，获取对应的 "
                        },
                        {
                          "text": "code",
                          "code": true
                        },
                        {
                          "text": " ，并连同把 "
                        },
                        {
                          "text": "onGetUserInfo",
                          "code": true
                        },
                        {
                          "text": " 传进来的 "
                        },
                        {
                          "text": "e.detail",
                          "code": true
                        },
                        {
                          "text": " 一起传给 "
                        },
                        {
                          "text": "loginWithAuthing",
                          "code": true
                        },
                        {
                          "text": " 。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "在 "
                        },
                        {
                          "text": "loginWithAuthing",
                          "code": true
                        },
                        {
                          "text": " 函数里面，哦们首先调用 "
                        },
                        {
                          "text": "authing.loginWithWxapp",
                          "code": true
                        },
                        {
                          "text": " ，并传入对应的 "
                        },
                        {
                          "text": "code",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "detail",
                          "code": true
                        },
                        {
                          "text": " ，进行登录，然后将登录获取的信息存在 "
                        },
                        {
                          "text": "storage",
                          "code": true
                        },
                        {
                          "text": " 里面以及保存在 Redux Store 中，并提示用户登录成功。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "保存上面的代码，并运行我们的应用，你应该可以自由的操作微信登录了："
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281abd1c93268.gif"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "就这样，我们就成功将微信授权登录使用 Authing 集成好了，可以看到我们只需要一个 "
                    },
                    {
                      "text": "loginWithWxapp",
                      "code": true
                    },
                    {
                      "text": " 就把逻辑集成好了，完全不需要之前 "
                    },
                    {
                      "text": "dispatch",
                      "code": true
                    },
                    {
                      "text": " 一个 "
                    },
                    {
                      "text": "LOGIN",
                      "code": true
                    },
                    {
                      "text": " 请求，还要去处理一堆 "
                    },
                    {
                      "text": "sagas",
                      "code": true
                    },
                    {
                      "text": " 逻辑，并且还要编写小程序云函数逻辑，手动处理这些逻辑不仅繁琐，还容易出错，并且也不够灵活，而 Authing 提供的 SDK 可以很好的解决这一点，赋能业务成功。"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
      "id": "b7baa91d",
      "articleId": "2b5a9f18",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
          "id": "a5466d47",
          "fixed": true,
          "children": [
            {
              "text": "新版用户系统整合进现有后端"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "在之前四个小节，我们都在将现有小程序博客的用户逻辑使用 Authing 来替代，而将用户逻辑用 Authing 来替代之后，我们会遇到一个小问题，就是之前的用户系统与其他模块如我们的发帖模块是存在耦合的，所以我们还需要将这个耦合的部分替换成 Authing 的相关逻辑，这就涉及到如何将新版的用户系统整合进现有的后端。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "我们目前的博客小程序涉及到和用户系统耦合的部分就是我们云函数 "
                },
                {
                  "text": "createPost",
                  "code": true
                },
                {
                  "text": " 在发帖的时候要带上用户信息，所以我们需要在这个云函数下使用 Authing 来替换相应的用户逻辑。"
                }
              ]
            }
          ]
        },
        {
          "file": "functions/createPost/package.json",
          "display": true,
          "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "heading-three",
                  "children": [
                    {
                      "text": "安装 SDK"
                    }
                  ],
                  "id": "H_T8x7IlN"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们的微信小程序后台使用了云函数，而云函数是一个个的 Node.js 函数，而 Authing 为我们提供了 Node.js 的 SDK npm 包，我们马上来安装它，在 "
                    },
                    {
                      "text": "functions/createPost",
                      "code": true
                    },
                    {
                      "text": " 下执行如下的代码："
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "bash",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "$ npm install authing-js-sdk"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "执行之后，我们的 "
                    },
                    {
                      "text": "package.json",
                      "code": true
                    },
                    {
                      "text": " 会是如下的样子："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/createPost/package.json",
              "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "functions/createPost/index.js",
          "display": true,
          "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "接着，我们在云函数里面替换对应的逻辑，打开 "
                    },
                    {
                      "text": "functions/createPost/index.js",
                      "code": true
                    },
                    {
                      "text": " 文件，对其中的内容做出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/createPost/index.js",
              "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，我们主要做了如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们导入了 Authing SDK"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    },
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "然后函数内部我们定义了 "
                        },
                        {
                          "text": "userPoolId",
                          "code": true
                        },
                        {
                          "text": " 和 "
                        },
                        {
                          "text": "secret",
                          "code": true
                        },
                        {
                          "text": " 来初始化 "
                        },
                        {
                          "text": "authing",
                          "code": true
                        },
                        {
                          "text": " 实例，这两个参数我们可以在用户池控制台找到："
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281abd4f70166.png"
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们使用初始化好的 "
                        },
                        {
                          "text": "authing",
                          "code": true
                        },
                        {
                          "text": " 来调用 "
                        },
                        {
                          "text": "authing.user",
                          "code": true
                        },
                        {
                          "text": " 方法传入我们接收到的 "
                        },
                        {
                          "text": "userId",
                          "code": true
                        },
                        {
                          "text": " 查询在 Authing 中保存的此用户资料，并用这个用户资料替换我们需要在小程序云数据库里面查到的用户数据"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "自此，我们就在前后端深度整合了 Authing 用户系统，在之后我们的应用扩展过程中，所有和用户有关的逻辑都不需要自己在后台单独编写，前端也大大简化了工作量，并且我们还能在 Authing 的控制台可视化用户的数据：登录情况、登录区域、登录机器，还可以给用户进行权限分配，甚至直接修改用户资料等。"
                    }
                  ]
                },
                {
                  "type": "image",
                  "children": [
                    {
                      "text": ""
                    }
                  ],
                  "url": "https://static.tuture.co/c/34a473b/172281abd746fd45.png"
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "functions/createPost/yarn.lock",
          "display": false,
          "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "functions/createPost/yarn.lock",
              "commit": "336a60bbad354531b6c875f5f10319ad64a7267d",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": ""
                }
              ]
            }
          ]
        }
      ]
    },
    {
      "commit": "c16984d25953ccee3a345815713cb54c9f9bc3fa",
      "id": "e01479e5",
      "articleId": "2b5a9f18",
      "type": "step",
      "children": [
        {
          "type": "heading-two",
          "commit": "c16984d25953ccee3a345815713cb54c9f9bc3fa",
          "id": "e87c095a",
          "fixed": true,
          "children": [
            {
              "text": "通过鉴权保有用户登录状态"
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "最后，我们来收尾一下，做一下用户登录状态的查询，因为应用的登录凭证它存在一个失效时间，当时间一到，我们再去操作用户信息就会显示没有权限，因为凭证失效了，所以说我们要及时检查用户的登录凭证是否失效，如果失效则要求用户重新登录，这也是读者经常会在访问某些网站的时候遇到，而现在我们将实操一下这个过程。"
                }
              ]
            }
          ]
        },
        {
          "file": "src/pages/index/index.jsx",
          "display": true,
          "commit": "c16984d25953ccee3a345815713cb54c9f9bc3fa",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "一般处理用户登录态的验证主要是在应用刚刚启动时，去进行一个鉴权处理，如果用户态有效，则顺利从应用的 "
                    },
                    {
                      "text": "storage",
                      "code": true
                    },
                    {
                      "text": "  里面取出数据，然后设置进前端状态管理，进而展示用户数据，而如果没有则删除 "
                    },
                    {
                      "text": "storage",
                      "code": true
                    },
                    {
                      "text": " 里面的数据，提示用户进行登录。"
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "我们打开 "
                    },
                    {
                      "text": "src/pages/index/index.jsx",
                      "code": true
                    },
                    {
                      "text": " 来实操，对其中的内容作出对应的修改如下："
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/pages/index/index.jsx",
              "commit": "c16984d25953ccee3a345815713cb54c9f9bc3fa",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "可以看到，上面的内容主要做出了如下几处修改："
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "我们在 "
                        },
                        {
                          "text": "getStorage",
                          "code": true
                        },
                        {
                          "text": " 函数里面，首先获取了之前登录时保存的用户凭证 "
                        },
                        {
                          "text": "token",
                          "code": true
                        },
                        {
                          "text": " ，然后初始化了一个 "
                        },
                        {
                          "text": "authing",
                          "code": true
                        },
                        {
                          "text": " 实例，并通过 "
                        },
                        {
                          "text": "Taro.request",
                          "code": true
                        },
                        {
                          "text": " 的方式，去请求 Authing 为我们提供的鉴权地址："
                        },
                        {
                          "text": "https://users.authing.cn/authing/token?access_token=YOUR_TOKEN ",
                          "code": true
                        },
                        {
                          "text": " ，我们将这个链接中的 "
                        },
                        {
                          "text": "YOUR_TOKEN",
                          "code": true
                        },
                        {
                          "text": " 替换成我们保存在 "
                        },
                        {
                          "text": "storage",
                          "code": true
                        },
                        {
                          "text": " 里面的 "
                        },
                        {
                          "text": "token",
                          "code": true
                        },
                        {
                          "text": " ，访问这个地址如果成功则会得到如下的结果："
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                },
                {
                  "type": "code-block",
                  "lang": "js",
                  "children": [
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "{"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  \"status\": true,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  \"message\": \"已登录\","
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  \"code\": 200,"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "  \"token\": {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    \"data\": {"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "\t\"email\": \"YOUR_EMAIL@domain.com\","
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "\t\"id\": \"YOUR_USER_ID\","
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "\t\"clientId\": \"YOUR_UESR_POOL_ID\""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    },"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "        \"iat\": \"Token 签发时间\""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "\t\"exp\": \"Token 过期时间\""
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "    }"
                        }
                      ]
                    },
                    {
                      "type": "code-line",
                      "children": [
                        {
                          "text": "}"
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": "如果失败其中的 "
                    },
                    {
                      "text": "status",
                      "code": true
                    },
                    {
                      "text": " 会为 "
                    },
                    {
                      "text": "false",
                      "code": true
                    },
                    {
                      "text": " ，其它内容也会相应的变化。"
                    }
                  ]
                },
                {
                  "type": "bulleted-list",
                  "children": [
                    {
                      "type": "list-item",
                      "children": [
                        {
                          "text": "接着我们判断 "
                        },
                        {
                          "text": "status",
                          "code": true
                        },
                        {
                          "text": " ，如果为 "
                        },
                        {
                          "text": "true",
                          "code": true
                        },
                        {
                          "text": " 则从 "
                        },
                        {
                          "text": "storage",
                          "code": true
                        },
                        {
                          "text": " 里面取出数据，设置进 Redux Store，如果为 "
                        },
                        {
                          "text": "false",
                          "code": true
                        },
                        {
                          "text": " ，我们清空 "
                        },
                        {
                          "text": "storage",
                          "code": true
                        },
                        {
                          "text": " 数据，这样在用户发帖时会提示用户需要登录。"
                        }
                      ],
                      "level": 0,
                      "parent": "bulleted-list"
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "file": "src/components/WeappLoginButton/index.js",
          "display": false,
          "commit": "c16984d25953ccee3a345815713cb54c9f9bc3fa",
          "type": "file",
          "children": [
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            },
            {
              "type": "diff-block",
              "file": "src/components/WeappLoginButton/index.js",
              "commit": "c16984d25953ccee3a345815713cb54c9f9bc3fa",
              "hiddenLines": [],
              "children": [
                {
                  "text": ""
                }
              ]
            },
            {
              "type": "explain",
              "fixed": true,
              "children": [
                {
                  "type": "paragraph",
                  "children": [
                    {
                      "text": ""
                    }
                  ]
                }
              ]
            }
          ]
        },
        {
          "type": "explain",
          "fixed": true,
          "children": [
            {
              "type": "heading-two",
              "children": [
                {
                  "text": "小结"
                }
              ],
              "id": "YWIvktYln"
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "通过这篇教程，我们将之前一个比较简单的用户系统替换成了专业的通用云身份提供商 Authing 提供的专业的用户系统，并且体验到了通过短短几行代码就可以实现专业的手机号+验证码登录、用户登出、微信授权登录、并且还可以做用户登录状态的检测等。"
                }
              ]
            },
            {
              "type": "paragraph",
              "children": [
                {
                  "text": "有了这样一个简单、方便且强大的用户系统做保障之后，我们的博客应用小程序将可以无顾虑的扩展其它模块，而涉及到身份相关的内容都可以交给 Authing 来做。当然我们这片文章还只用了 Authing 很小的一部分功能，还有诸如企业组织管理、单点登录等高级功能，有兴趣的用户可以自行发掘💪！"
                }
              ]
            }
          ]
        }
      ]
    }
  ],
  "version": "v1",
  "remotes": []
}